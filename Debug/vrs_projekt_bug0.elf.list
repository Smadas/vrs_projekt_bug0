
vrs_projekt_bug0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a44  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001b84  08001b8c  00011b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001b84  08001b84  00011b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001b88  08001b88  00011b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00011b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004e7c  20000000  08001b8c  00020000  2**3
                  ALLOC
  7 ._user_heap_stack 00000400  20004e7c  08001b8c  00014e7c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00011b8c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004a62  00000000  00000000  00011bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000c75  00000000  00000000  00016617  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000668  00000000  00000000  00017290  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005d0  00000000  00000000  000178f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001fd1  00000000  00000000  00017ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001dbd  00000000  00000000  00019e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0001bc56  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001a88  00000000  00000000  0001bcd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0001d75c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000000 	.word	0x20000000
 800015c:	00000000 	.word	0x00000000
 8000160:	08001b6c 	.word	0x08001b6c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000004 	.word	0x20000004
 800017c:	08001b6c 	.word	0x08001b6c

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	bf14      	ite	ne
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e720      	b.n	80002c4 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aedc 	beq.w	8000272 <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6c1      	b.n	8000272 <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800091c:	2300      	movs	r3, #0
 800091e:	73fb      	strb	r3, [r7, #15]
 8000920:	2300      	movs	r3, #0
 8000922:	73bb      	strb	r3, [r7, #14]
 8000924:	230f      	movs	r3, #15
 8000926:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	78db      	ldrb	r3, [r3, #3]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d038      	beq.n	80009a2 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000930:	4b26      	ldr	r3, [pc, #152]	; (80009cc <NVIC_Init+0xb8>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	43db      	mvns	r3, r3
 8000936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800093a:	0a1b      	lsrs	r3, r3, #8
 800093c:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	f1c3 0304 	rsb	r3, r3, #4
 8000944:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000946:	7b7a      	ldrb	r2, [r7, #13]
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	fa42 f303 	asr.w	r3, r2, r3
 800094e:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	785b      	ldrb	r3, [r3, #1]
 8000954:	461a      	mov	r2, r3
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	789a      	ldrb	r2, [r3, #2]
 8000962:	7b7b      	ldrb	r3, [r7, #13]
 8000964:	4013      	ands	r3, r2
 8000966:	b2da      	uxtb	r2, r3
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	4313      	orrs	r3, r2
 800096c:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	011b      	lsls	r3, r3, #4
 8000972:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000974:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <NVIC_Init+0xbc>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	4413      	add	r3, r2
 800097c:	7bfa      	ldrb	r2, [r7, #15]
 800097e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000982:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <NVIC_Init+0xbc>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	095b      	lsrs	r3, r3, #5
 800098a:	b2db      	uxtb	r3, r3
 800098c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	f003 031f 	and.w	r3, r3, #31
 8000996:	2101      	movs	r1, #1
 8000998:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800099c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80009a0:	e00f      	b.n	80009c2 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009a2:	490b      	ldr	r1, [pc, #44]	; (80009d0 <NVIC_Init+0xbc>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	095b      	lsrs	r3, r3, #5
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	f003 031f 	and.w	r3, r3, #31
 80009b6:	2201      	movs	r2, #1
 80009b8:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009ba:	f100 0320 	add.w	r3, r0, #32
 80009be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80009c2:	bf00      	nop
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00
 80009d0:	e000e100 	.word	0xe000e100

080009d4 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b087      	sub	sp, #28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	e07e      	b.n	8000aee <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80009f0:	2201      	movs	r2, #1
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	4013      	ands	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000a04:	68fa      	ldr	r2, [r7, #12]
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d16d      	bne.n	8000ae8 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	2103      	movs	r1, #3
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	791b      	ldrb	r3, [r3, #4]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	fa01 f303 	lsl.w	r3, r1, r3
 8000a34:	431a      	orrs	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	791b      	ldrb	r3, [r3, #4]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d003      	beq.n	8000a4a <GPIO_Init+0x76>
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	791b      	ldrb	r3, [r3, #4]
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d136      	bne.n	8000ab8 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	689a      	ldr	r2, [r3, #8]
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	2103      	movs	r1, #3
 8000a54:	fa01 f303 	lsl.w	r3, r1, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	689a      	ldr	r2, [r3, #8]
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	795b      	ldrb	r3, [r3, #5]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a72:	431a      	orrs	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	889b      	ldrh	r3, [r3, #4]
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	2101      	movs	r1, #1
 8000a84:	fa01 f303 	lsl.w	r3, r1, r3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	4013      	ands	r3, r2
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	889b      	ldrh	r3, [r3, #4]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	b21a      	sxth	r2, r3
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	799b      	ldrb	r3, [r3, #6]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aac:	b21b      	sxth	r3, r3
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68da      	ldr	r2, [r3, #12]
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	2103      	movs	r1, #3
 8000ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	401a      	ands	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	68da      	ldr	r2, [r3, #12]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	79db      	ldrb	r3, [r3, #7]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	3301      	adds	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	f67f af7d 	bls.w	80009f0 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000af6:	bf00      	nop
 8000af8:	371c      	adds	r7, #28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: Specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	8a9b      	ldrh	r3, [r3, #20]
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	887b      	ldrh	r3, [r7, #2]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d002      	beq.n	8000b26 <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000b20:	2301      	movs	r3, #1
 8000b22:	73fb      	strb	r3, [r7, #15]
 8000b24:	e001      	b.n	8000b2a <GPIO_ReadOutputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
 8000b44:	4613      	mov	r3, r2
 8000b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8000b48:	787b      	ldrb	r3, [r7, #1]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	887a      	ldrh	r2, [r7, #2]
 8000b52:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000b54:	e002      	b.n	8000b5c <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	887a      	ldrh	r2, [r7, #2]
 8000b5a:	835a      	strh	r2, [r3, #26]
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..H) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	8a9b      	ldrh	r3, [r3, #20]
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	887b      	ldrh	r3, [r7, #2]
 8000b7c:	4053      	eors	r3, r2
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	829a      	strh	r2, [r3, #20]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000ba8:	787a      	ldrb	r2, [r7, #1]
 8000baa:	887b      	ldrh	r3, [r7, #2]
 8000bac:	f003 0307 	and.w	r3, r3, #7
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000bb8:	887b      	ldrh	r3, [r7, #2]
 8000bba:	08db      	lsrs	r3, r3, #3
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	887b      	ldrh	r3, [r7, #2]
 8000bc2:	08db      	lsrs	r3, r3, #3
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3208      	adds	r2, #8
 8000bcc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bd0:	887b      	ldrh	r3, [r7, #2]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	210f      	movs	r1, #15
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	ea02 0103 	and.w	r1, r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f100 0208 	add.w	r2, r0, #8
 8000bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000bee:	887b      	ldrh	r3, [r7, #2]
 8000bf0:	08db      	lsrs	r3, r3, #3
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3208      	adds	r2, #8
 8000bfa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000c04:	887b      	ldrh	r3, [r7, #2]
 8000c06:	08db      	lsrs	r3, r3, #3
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3208      	adds	r2, #8
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr

08000c20 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c2c:	78fb      	ldrb	r3, [r7, #3]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d006      	beq.n	8000c40 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000c32:	4909      	ldr	r1, [pc, #36]	; (8000c58 <RCC_AHBPeriphClockCmd+0x38>)
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <RCC_AHBPeriphClockCmd+0x38>)
 8000c36:	69da      	ldr	r2, [r3, #28]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000c3e:	e006      	b.n	8000c4e <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000c40:	4905      	ldr	r1, [pc, #20]	; (8000c58 <RCC_AHBPeriphClockCmd+0x38>)
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <RCC_AHBPeriphClockCmd+0x38>)
 8000c44:	69da      	ldr	r2, [r3, #28]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	61cb      	str	r3, [r1, #28]
  }
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	40023800 	.word	0x40023800

08000c5c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c68:	78fb      	ldrb	r3, [r7, #3]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d006      	beq.n	8000c7c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000c6e:	4909      	ldr	r1, [pc, #36]	; (8000c94 <RCC_APB1PeriphClockCmd+0x38>)
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <RCC_APB1PeriphClockCmd+0x38>)
 8000c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000c7a:	e006      	b.n	8000c8a <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000c7c:	4905      	ldr	r1, [pc, #20]	; (8000c94 <RCC_APB1PeriphClockCmd+0x38>)
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <RCC_APB1PeriphClockCmd+0x38>)
 8000c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	4013      	ands	r3, r2
 8000c88:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	40023800 	.word	0x40023800

08000c98 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cb2:	d00b      	beq.n	8000ccc <TIM_TimeBaseInit+0x34>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a1c      	ldr	r2, [pc, #112]	; (8000d28 <TIM_TimeBaseInit+0x90>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d007      	beq.n	8000ccc <TIM_TimeBaseInit+0x34>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <TIM_TimeBaseInit+0x94>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d003      	beq.n	8000ccc <TIM_TimeBaseInit+0x34>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a1a      	ldr	r2, [pc, #104]	; (8000d30 <TIM_TimeBaseInit+0x98>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d108      	bne.n	8000cde <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000ccc:	89fb      	ldrh	r3, [r7, #14]
 8000cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cd2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	885a      	ldrh	r2, [r3, #2]
 8000cd8:	89fb      	ldrh	r3, [r7, #14]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <TIM_TimeBaseInit+0x9c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d00c      	beq.n	8000d00 <TIM_TimeBaseInit+0x68>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <TIM_TimeBaseInit+0xa0>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d008      	beq.n	8000d00 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000cee:	89fb      	ldrh	r3, [r7, #14]
 8000cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cf4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	891a      	ldrh	r2, [r3, #8]
 8000cfa:	89fb      	ldrh	r3, [r7, #14]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	89fa      	ldrh	r2, [r7, #14]
 8000d04:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	881a      	ldrh	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	829a      	strh	r2, [r3, #20]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40000400 	.word	0x40000400
 8000d2c:	40000800 	.word	0x40000800
 8000d30:	40000c00 	.word	0x40000c00
 8000d34:	40001000 	.word	0x40001000
 8000d38:	40001400 	.word	0x40001400

08000d3c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d008      	beq.n	8000d60 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000d5e:	e007      	b.n	8000d70 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	f023 0301 	bic.w	r3, r3, #1
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	801a      	strh	r2, [r3, #0]
  }
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <TIM_ICInit>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d10f      	bne.n	8000dae <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	8859      	ldrh	r1, [r3, #2]
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	889a      	ldrh	r2, [r3, #4]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	891b      	ldrh	r3, [r3, #8]
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f000 f92c 	bl	8000ff8 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	88db      	ldrh	r3, [r3, #6]
 8000da4:	4619      	mov	r1, r3
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f000 f854 	bl	8000e54 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000dac:	e036      	b.n	8000e1c <TIM_ICInit+0xa0>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	d10f      	bne.n	8000dd6 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	8859      	ldrh	r1, [r3, #2]
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	889a      	ldrh	r2, [r3, #4]
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	891b      	ldrh	r3, [r3, #8]
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 f95a 	bl	800107c <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	88db      	ldrh	r3, [r3, #6]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f000 f85c 	bl	8000e8c <TIM_SetIC2Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000dd4:	e022      	b.n	8000e1c <TIM_ICInit+0xa0>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	2b08      	cmp	r3, #8
 8000ddc:	d10f      	bne.n	8000dfe <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	8859      	ldrh	r1, [r3, #2]
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	889a      	ldrh	r2, [r3, #4]
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	891b      	ldrh	r3, [r3, #8]
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 f992 	bl	8001114 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	88db      	ldrh	r3, [r3, #6]
 8000df4:	4619      	mov	r1, r3
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 f866 	bl	8000ec8 <TIM_SetIC3Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000dfc:	e00e      	b.n	8000e1c <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	8859      	ldrh	r1, [r3, #2]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	889a      	ldrh	r2, [r3, #4]
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	891b      	ldrh	r3, [r3, #8]
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f000 f9ca 	bl	80011a4 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	88db      	ldrh	r3, [r3, #6]
 8000e14:	4619      	mov	r1, r3
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 f872 	bl	8000f00 <TIM_SetIC4Prescaler>
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 2, 3, 4, 5, 9, 10 or 11 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 2, 3, 4, 5 or 9 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	8b1b      	ldrh	r3, [r3, #24]
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	f023 030c 	bic.w	r3, r3, #12
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	8b1b      	ldrh	r3, [r3, #24]
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	887b      	ldrh	r3, [r7, #2]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	831a      	strh	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	8b1b      	ldrh	r3, [r3, #24]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	8b1b      	ldrh	r3, [r3, #24]
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	887b      	ldrh	r3, [r7, #2]
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	831a      	strh	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	8b9b      	ldrh	r3, [r3, #28]
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	f023 030c 	bic.w	r3, r3, #12
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	8b9b      	ldrh	r3, [r3, #28]
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	887b      	ldrh	r3, [r7, #2]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	839a      	strh	r2, [r3, #28]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	8b9b      	ldrh	r3, [r3, #28]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	8b9b      	ldrh	r3, [r3, #28]
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	887b      	ldrh	r3, [r7, #2]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	839a      	strh	r2, [r3, #28]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	807b      	strh	r3, [r7, #2]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000f4c:	787b      	ldrb	r3, [r7, #1]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d008      	beq.n	8000f64 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	899b      	ldrh	r3, [r3, #12]
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000f62:	e009      	b.n	8000f78 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	899b      	ldrh	r3, [r3, #12]
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	887b      	ldrh	r3, [r7, #2]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	4013      	ands	r3, r2
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	819a      	strh	r2, [r3, #12]
  }
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000f90:	2300      	movs	r3, #0
 8000f92:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	81bb      	strh	r3, [r7, #12]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	8a1b      	ldrh	r3, [r3, #16]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	899b      	ldrh	r3, [r3, #12]
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	887b      	ldrh	r3, [r7, #2]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000fb4:	89bb      	ldrh	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d005      	beq.n	8000fc6 <TIM_GetITStatus+0x42>
 8000fba:	897b      	ldrh	r3, [r7, #10]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e001      	b.n	8000fca <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000fe4:	887b      	ldrh	r3, [r7, #2]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	821a      	strh	r2, [r3, #16]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	4608      	mov	r0, r1
 8001002:	4611      	mov	r1, r2
 8001004:	461a      	mov	r2, r3
 8001006:	4603      	mov	r3, r0
 8001008:	817b      	strh	r3, [r7, #10]
 800100a:	460b      	mov	r3, r1
 800100c:	813b      	strh	r3, [r7, #8]
 800100e:	4613      	mov	r3, r2
 8001010:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	82fb      	strh	r3, [r7, #22]
 8001016:	2300      	movs	r3, #0
 8001018:	82bb      	strh	r3, [r7, #20]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	8c1b      	ldrh	r3, [r3, #32]
 800101e:	b29b      	uxth	r3, r3
 8001020:	f023 0301 	bic.w	r3, r3, #1
 8001024:	b29a      	uxth	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	8b1b      	ldrh	r3, [r3, #24]
 800102e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	8c1b      	ldrh	r3, [r3, #32]
 8001034:	82bb      	strh	r3, [r7, #20]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8001036:	8afb      	ldrh	r3, [r7, #22]
 8001038:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800103c:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	b29a      	uxth	r2, r3
 8001044:	893b      	ldrh	r3, [r7, #8]
 8001046:	4313      	orrs	r3, r2
 8001048:	b29a      	uxth	r2, r3
 800104a:	8afb      	ldrh	r3, [r7, #22]
 800104c:	4313      	orrs	r3, r2
 800104e:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001050:	8abb      	ldrh	r3, [r7, #20]
 8001052:	f023 030a 	bic.w	r3, r3, #10
 8001056:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001058:	897a      	ldrh	r2, [r7, #10]
 800105a:	8abb      	ldrh	r3, [r7, #20]
 800105c:	4313      	orrs	r3, r2
 800105e:	b29b      	uxth	r3, r3
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	8afa      	ldrh	r2, [r7, #22]
 800106a:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	8aba      	ldrh	r2, [r7, #20]
 8001070:	841a      	strh	r2, [r3, #32]
}
 8001072:	bf00      	nop
 8001074:	371c      	adds	r7, #28
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	4608      	mov	r0, r1
 8001086:	4611      	mov	r1, r2
 8001088:	461a      	mov	r2, r3
 800108a:	4603      	mov	r3, r0
 800108c:	817b      	strh	r3, [r7, #10]
 800108e:	460b      	mov	r3, r1
 8001090:	813b      	strh	r3, [r7, #8]
 8001092:	4613      	mov	r3, r2
 8001094:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	82fb      	strh	r3, [r7, #22]
 800109a:	2300      	movs	r3, #0
 800109c:	82bb      	strh	r3, [r7, #20]
 800109e:	2300      	movs	r3, #0
 80010a0:	827b      	strh	r3, [r7, #18]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	8c1b      	ldrh	r3, [r3, #32]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	f023 0310 	bic.w	r3, r3, #16
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	8b1b      	ldrh	r3, [r3, #24]
 80010b6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	8c1b      	ldrh	r3, [r3, #32]
 80010bc:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80010be:	897b      	ldrh	r3, [r7, #10]
 80010c0:	011b      	lsls	r3, r3, #4
 80010c2:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80010c4:	8afb      	ldrh	r3, [r7, #22]
 80010c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010ca:	051b      	lsls	r3, r3, #20
 80010cc:	0d1b      	lsrs	r3, r3, #20
 80010ce:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	031b      	lsls	r3, r3, #12
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	8afb      	ldrh	r3, [r7, #22]
 80010d8:	4313      	orrs	r3, r2
 80010da:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80010dc:	893b      	ldrh	r3, [r7, #8]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	8afb      	ldrh	r3, [r7, #22]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80010e8:	8abb      	ldrh	r3, [r7, #20]
 80010ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80010ee:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80010f0:	8a7a      	ldrh	r2, [r7, #18]
 80010f2:	8abb      	ldrh	r3, [r7, #20]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	f043 0310 	orr.w	r3, r3, #16
 80010fc:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	8afa      	ldrh	r2, [r7, #22]
 8001102:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	8aba      	ldrh	r2, [r7, #20]
 8001108:	841a      	strh	r2, [r3, #32]
}
 800110a:	bf00      	nop
 800110c:	371c      	adds	r7, #28
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	4608      	mov	r0, r1
 800111e:	4611      	mov	r1, r2
 8001120:	461a      	mov	r2, r3
 8001122:	4603      	mov	r3, r0
 8001124:	817b      	strh	r3, [r7, #10]
 8001126:	460b      	mov	r3, r1
 8001128:	813b      	strh	r3, [r7, #8]
 800112a:	4613      	mov	r3, r2
 800112c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	82fb      	strh	r3, [r7, #22]
 8001132:	2300      	movs	r3, #0
 8001134:	82bb      	strh	r3, [r7, #20]
 8001136:	2300      	movs	r3, #0
 8001138:	827b      	strh	r3, [r7, #18]
  
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	8c1b      	ldrh	r3, [r3, #32]
 800113e:	b29b      	uxth	r3, r3
 8001140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001144:	b29a      	uxth	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	8b9b      	ldrh	r3, [r3, #28]
 800114e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	8c1b      	ldrh	r3, [r3, #32]
 8001154:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8001156:	897b      	ldrh	r3, [r7, #10]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 800115c:	8afb      	ldrh	r3, [r7, #22]
 800115e:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8001162:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	b29a      	uxth	r2, r3
 800116a:	893b      	ldrh	r3, [r7, #8]
 800116c:	4313      	orrs	r3, r2
 800116e:	b29a      	uxth	r2, r3
 8001170:	8afb      	ldrh	r3, [r7, #22]
 8001172:	4313      	orrs	r3, r2
 8001174:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001176:	8abb      	ldrh	r3, [r7, #20]
 8001178:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800117c:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800117e:	8a7a      	ldrh	r2, [r7, #18]
 8001180:	8abb      	ldrh	r3, [r7, #20]
 8001182:	4313      	orrs	r3, r2
 8001184:	b29b      	uxth	r3, r3
 8001186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118a:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	8afa      	ldrh	r2, [r7, #22]
 8001190:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	8aba      	ldrh	r2, [r7, #20]
 8001196:	841a      	strh	r2, [r3, #32]
}
 8001198:	bf00      	nop
 800119a:	371c      	adds	r7, #28
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop

080011a4 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	4608      	mov	r0, r1
 80011ae:	4611      	mov	r1, r2
 80011b0:	461a      	mov	r2, r3
 80011b2:	4603      	mov	r3, r0
 80011b4:	817b      	strh	r3, [r7, #10]
 80011b6:	460b      	mov	r3, r1
 80011b8:	813b      	strh	r3, [r7, #8]
 80011ba:	4613      	mov	r3, r2
 80011bc:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	82fb      	strh	r3, [r7, #22]
 80011c2:	2300      	movs	r3, #0
 80011c4:	82bb      	strh	r3, [r7, #20]
 80011c6:	2300      	movs	r3, #0
 80011c8:	827b      	strh	r3, [r7, #18]
  
  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	8c1b      	ldrh	r3, [r3, #32]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	8b9b      	ldrh	r3, [r3, #28]
 80011de:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	8c1b      	ldrh	r3, [r3, #32]
 80011e4:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 80011e6:	897b      	ldrh	r3, [r7, #10]
 80011e8:	031b      	lsls	r3, r3, #12
 80011ea:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 80011ec:	8afb      	ldrh	r3, [r7, #22]
 80011ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011f2:	051b      	lsls	r3, r3, #20
 80011f4:	0d1b      	lsrs	r3, r3, #20
 80011f6:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 80011f8:	893b      	ldrh	r3, [r7, #8]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	8afb      	ldrh	r3, [r7, #22]
 8001200:	4313      	orrs	r3, r2
 8001202:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	031b      	lsls	r3, r3, #12
 8001208:	b29a      	uxth	r2, r3
 800120a:	8afb      	ldrh	r3, [r7, #22]
 800120c:	4313      	orrs	r3, r2
 800120e:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001210:	8abb      	ldrh	r3, [r7, #20]
 8001212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001216:	045b      	lsls	r3, r3, #17
 8001218:	0c5b      	lsrs	r3, r3, #17
 800121a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800121c:	8a7a      	ldrh	r2, [r7, #18]
 800121e:	8abb      	ldrh	r3, [r7, #20]
 8001220:	4313      	orrs	r3, r2
 8001222:	b29b      	uxth	r3, r3
 8001224:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001228:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	8afa      	ldrh	r2, [r7, #22]
 800122e:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	8aba      	ldrh	r2, [r7, #20]
 8001234:	841a      	strh	r2, [r3, #32]
}
 8001236:	bf00      	nop
 8001238:	371c      	adds	r7, #28
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <init_kontrolka>:

/* Private function prototypes */

/* Private functions */
int init_kontrolka()
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
	//spustenie hodin pre periferiu
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001246:	2101      	movs	r1, #1
 8001248:	2001      	movs	r0, #1
 800124a:	f7ff fce9 	bl	8000c20 <RCC_AHBPeriphClockCmd>
	//vytvorenie struktury GPIO
	GPIO_InitTypeDef gpioInitStruc;
	gpioInitStruc.GPIO_Mode = GPIO_Mode_OUT;
 800124e:	2301      	movs	r3, #1
 8001250:	713b      	strb	r3, [r7, #4]
	gpioInitStruc.GPIO_OType = GPIO_OType_PP;
 8001252:	2300      	movs	r3, #0
 8001254:	71bb      	strb	r3, [r7, #6]
	gpioInitStruc.GPIO_Pin = GPIO_Pin_5;
 8001256:	2320      	movs	r3, #32
 8001258:	603b      	str	r3, [r7, #0]
	gpioInitStruc.GPIO_Speed = GPIO_Speed_400KHz;
 800125a:	2300      	movs	r3, #0
 800125c:	717b      	strb	r3, [r7, #5]
	//zapisanie inicializacnej struktury
	GPIO_Init(GPIOA, &gpioInitStruc);
 800125e:	463b      	mov	r3, r7
 8001260:	4619      	mov	r1, r3
 8001262:	4804      	ldr	r0, [pc, #16]	; (8001274 <init_kontrolka+0x34>)
 8001264:	f7ff fbb6 	bl	80009d4 <GPIO_Init>

	return 0;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40020000 	.word	0x40020000

08001278 <init_cas_blikanie>:

//inicializacia casovaca pre kontrolnu LED
int init_cas_blikanie()
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
	gTimeStamp = 0;
 800127e:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <init_cas_blikanie+0x74>)
 8001280:	f04f 0300 	mov.w	r3, #0
 8001284:	f04f 0400 	mov.w	r4, #0
 8001288:	e882 0018 	stmia.w	r2, {r3, r4}
	//unsigned short prescalerValue = (unsigned short) (SystemCoreClock / 1000) - 1;
	unsigned short prescalerValue = (unsigned short) (16000000 / 1000) - 1;
 800128c:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8001290:	82fb      	strh	r3, [r7, #22]
	//Structure for timer settings
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	// TIM6 clock enable
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 8001292:	2101      	movs	r1, #1
 8001294:	2010      	movs	r0, #16
 8001296:	f7ff fce1 	bl	8000c5c <RCC_APB1PeriphClockCmd>
	// Enable the TIM6 gloabal Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = TIM6_IRQn;
 800129a:	232b      	movs	r3, #43	; 0x2b
 800129c:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 80012a2:	2302      	movs	r3, #2
 80012a4:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80012a6:	2301      	movs	r3, #1
 80012a8:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fb31 	bl	8000914 <NVIC_Init>
	TIM_TimeBaseStructure.TIM_Period = 999;
 80012b2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80012b6:	60fb      	str	r3, [r7, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	823b      	strh	r3, [r7, #16]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80012bc:	2300      	movs	r3, #0
 80012be:	817b      	strh	r3, [r7, #10]
	TIM_TimeBaseStructure.TIM_Prescaler = prescalerValue;
 80012c0:	8afb      	ldrh	r3, [r7, #22]
 80012c2:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	4619      	mov	r1, r3
 80012ca:	4809      	ldr	r0, [pc, #36]	; (80012f0 <init_cas_blikanie+0x78>)
 80012cc:	f7ff fce4 	bl	8000c98 <TIM_TimeBaseInit>
	// TIM Interrupts enable
	TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);
 80012d0:	2201      	movs	r2, #1
 80012d2:	2101      	movs	r1, #1
 80012d4:	4806      	ldr	r0, [pc, #24]	; (80012f0 <init_cas_blikanie+0x78>)
 80012d6:	f7ff fe31 	bl	8000f3c <TIM_ITConfig>
	// TIM6 enable counter
	TIM_Cmd(TIM6, ENABLE);
 80012da:	2101      	movs	r1, #1
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <init_cas_blikanie+0x78>)
 80012de:	f7ff fd2d 	bl	8000d3c <TIM_Cmd>

	return 0;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	20000020 	.word	0x20000020
 80012f0:	40001000 	.word	0x40001000

080012f4 <TIM6_IRQHandler>:

//spracovanie prerusenia z TIM6, casovaca pre kontrolku
void TIM6_IRQHandler(void)
{
 80012f4:	b598      	push	{r3, r4, r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) == SET)
 80012f8:	2101      	movs	r1, #1
 80012fa:	480c      	ldr	r0, [pc, #48]	; (800132c <TIM6_IRQHandler+0x38>)
 80012fc:	f7ff fe42 	bl	8000f84 <TIM_GetITStatus>
 8001300:	4603      	mov	r3, r0
 8001302:	2b01      	cmp	r3, #1
 8001304:	d10f      	bne.n	8001326 <TIM6_IRQHandler+0x32>
	{
		gTimeStamp++;
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <TIM6_IRQHandler+0x3c>)
 8001308:	cb18      	ldmia	r3, {r3, r4}
 800130a:	3301      	adds	r3, #1
 800130c:	f144 0400 	adc.w	r4, r4, #0
 8001310:	4a07      	ldr	r2, [pc, #28]	; (8001330 <TIM6_IRQHandler+0x3c>)
 8001312:	e882 0018 	stmia.w	r2, {r3, r4}
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);//toggle LED PA5
 8001316:	2120      	movs	r1, #32
 8001318:	4806      	ldr	r0, [pc, #24]	; (8001334 <TIM6_IRQHandler+0x40>)
 800131a:	f7ff fc25 	bl	8000b68 <GPIO_ToggleBits>
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 800131e:	2101      	movs	r1, #1
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <TIM6_IRQHandler+0x38>)
 8001322:	f7ff fe59 	bl	8000fd8 <TIM_ClearITPendingBit>
	}
}
 8001326:	bf00      	nop
 8001328:	bd98      	pop	{r3, r4, r7, pc}
 800132a:	bf00      	nop
 800132c:	40001000 	.word	0x40001000
 8001330:	20000020 	.word	0x20000020
 8001334:	40020000 	.word	0x40020000

08001338 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
  *  To reconfigure the default setting of SystemInit() function, refer to
  *  system_stm32l1xx.c file
  */

  /* TODO - Add your application code here */
	double vzdialenost = 0;
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	f04f 0400 	mov.w	r4, #0
 8001346:	e9c7 3402 	strd	r3, r4, [r7, #8]
	double vzdialenost1 = 0;
 800134a:	f04f 0300 	mov.w	r3, #0
 800134e:	f04f 0400 	mov.w	r4, #0
 8001352:	e887 0018 	stmia.w	r7, {r3, r4}

	init_cas_blikanie();
 8001356:	f7ff ff8f 	bl	8001278 <init_cas_blikanie>
	init_kontrolka();
 800135a:	f7ff ff71 	bl	8001240 <init_kontrolka>
	sensorInit();
 800135e:	f000 f825 	bl	80013ac <sensorInit>

	forwardSensorMeasure();
 8001362:	f000 f913 	bl	800158c <forwardSensorMeasure>

  /* Infinite loop */
	while (1)
	{
		for (int i = 0; i < 1000000; i++)
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	e002      	b.n	8001372 <main+0x3a>
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	3301      	adds	r3, #1
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	4a0c      	ldr	r2, [pc, #48]	; (80013a8 <main+0x70>)
 8001376:	4293      	cmp	r3, r2
 8001378:	ddf8      	ble.n	800136c <main+0x34>
		{

		}
		vzdialenost = forwardSensorGetDistance();//183; 70
 800137a:	f000 fa65 	bl	8001848 <forwardSensorGetDistance>
 800137e:	e9c7 0102 	strd	r0, r1, [r7, #8]
		leftSensorMeasure();
 8001382:	f000 f8f1 	bl	8001568 <leftSensorMeasure>

		for (int i = 0; i < 1000000; i++)
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	e002      	b.n	8001392 <main+0x5a>
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	3301      	adds	r3, #1
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <main+0x70>)
 8001396:	4293      	cmp	r3, r2
 8001398:	ddf8      	ble.n	800138c <main+0x54>
		{

		}
		vzdialenost1 = leftSensorGetDistance();//183; 70
 800139a:	f000 fa05 	bl	80017a8 <leftSensorGetDistance>
 800139e:	e9c7 0100 	strd	r0, r1, [r7]
		forwardSensorMeasure();
 80013a2:	f000 f8f3 	bl	800158c <forwardSensorMeasure>
	}
 80013a6:	e7de      	b.n	8001366 <main+0x2e>
 80013a8:	000f423f 	.word	0x000f423f

080013ac <sensorInit>:


//Functions
//inicializacia senzorov vzdialenosti
void sensorInit(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	sensorInitTriggerTimer();
 80013b0:	f000 f808 	bl	80013c4 <sensorInitTriggerTimer>
	sensorInitTriggerPin();
 80013b4:	f000 f834 	bl	8001420 <sensorInitTriggerPin>
	sensorInitCapturePins();
 80013b8:	f000 f8a8 	bl	800150c <sensorInitCapturePins>
	sensorInitCaptureTimer();
 80013bc:	f000 f854 	bl	8001468 <sensorInitCaptureTimer>
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <sensorInitTriggerTimer>:
//inicializacia casovaca, ktory generuje spustaci impulz
void sensorInitTriggerTimer(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
	//unsigned short prescalerValue = (unsigned short) (SystemCoreClock / 1000) - 1;
	unsigned short prescalerValue = (unsigned short) (16000000 / 100000) - 1;
 80013ca:	239f      	movs	r3, #159	; 0x9f
 80013cc:	82fb      	strh	r3, [r7, #22]
	//Structure for timer settings
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	// TIM6 clock enable
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 80013ce:	2101      	movs	r1, #1
 80013d0:	2020      	movs	r0, #32
 80013d2:	f7ff fc43 	bl	8000c5c <RCC_APB1PeriphClockCmd>
	// Enable the TIM7 gloabal Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = TIM7_IRQn;
 80013d6:	232c      	movs	r3, #44	; 0x2c
 80013d8:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80013de:	2301      	movs	r3, #1
 80013e0:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80013e2:	2301      	movs	r3, #1
 80013e4:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fa93 	bl	8000914 <NVIC_Init>
	TIM_TimeBaseStructure.TIM_Period = 1;
 80013ee:	2301      	movs	r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	823b      	strh	r3, [r7, #16]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80013f6:	2300      	movs	r3, #0
 80013f8:	817b      	strh	r3, [r7, #10]
	TIM_TimeBaseStructure.TIM_Prescaler = prescalerValue;
 80013fa:	8afb      	ldrh	r3, [r7, #22]
 80013fc:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInit(TIM7, &TIM_TimeBaseStructure);
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <sensorInitTriggerTimer+0x58>)
 8001406:	f7ff fc47 	bl	8000c98 <TIM_TimeBaseInit>
	// TIM Interrupts enable
	TIM_ITConfig(TIM7, TIM_IT_Update, ENABLE);
 800140a:	2201      	movs	r2, #1
 800140c:	2101      	movs	r1, #1
 800140e:	4803      	ldr	r0, [pc, #12]	; (800141c <sensorInitTriggerTimer+0x58>)
 8001410:	f7ff fd94 	bl	8000f3c <TIM_ITConfig>
	// TIM7 enable counter
	//TIM_Cmd(TIM7, ENABLE);
}
 8001414:	bf00      	nop
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40001400 	.word	0x40001400

08001420 <sensorInitTriggerPin>:
//inicializacia pinov pre spustanie dialkomerov
void sensorInitTriggerPin(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);//spusti hodiny pre port C
 8001426:	2101      	movs	r1, #1
 8001428:	2004      	movs	r0, #4
 800142a:	f7ff fbf9 	bl	8000c20 <RCC_AHBPeriphClockCmd>
	//vytvorenie struktury GPIO
	GPIO_InitTypeDef gpioInitStruc;
	gpioInitStruc.GPIO_Mode = GPIO_Mode_OUT;
 800142e:	2301      	movs	r3, #1
 8001430:	713b      	strb	r3, [r7, #4]
	gpioInitStruc.GPIO_OType = GPIO_OType_PP;
 8001432:	2300      	movs	r3, #0
 8001434:	71bb      	strb	r3, [r7, #6]
	gpioInitStruc.GPIO_Pin = GPIO_Pin_10;
 8001436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800143a:	603b      	str	r3, [r7, #0]
	gpioInitStruc.GPIO_Speed = GPIO_Speed_400KHz;
 800143c:	2300      	movs	r3, #0
 800143e:	717b      	strb	r3, [r7, #5]
	//zapisanie inicializacnej struktury - left
	GPIO_Init(GPIOC, &gpioInitStruc);
 8001440:	463b      	mov	r3, r7
 8001442:	4619      	mov	r1, r3
 8001444:	4807      	ldr	r0, [pc, #28]	; (8001464 <sensorInitTriggerPin+0x44>)
 8001446:	f7ff fac5 	bl	80009d4 <GPIO_Init>

	//forward
	gpioInitStruc.GPIO_Pin = GPIO_Pin_12;
 800144a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144e:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &gpioInitStruc);
 8001450:	463b      	mov	r3, r7
 8001452:	4619      	mov	r1, r3
 8001454:	4803      	ldr	r0, [pc, #12]	; (8001464 <sensorInitTriggerPin+0x44>)
 8001456:	f7ff fabd 	bl	80009d4 <GPIO_Init>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40020800 	.word	0x40020800

08001468 <sensorInitCaptureTimer>:
//inicializacia casovaca pre meranie dlzky impulzu z dialkomera
void sensorInitCaptureTimer(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

	// TIM5 clock enable
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 800146e:	2101      	movs	r1, #1
 8001470:	2008      	movs	r0, #8
 8001472:	f7ff fbf3 	bl	8000c5c <RCC_APB1PeriphClockCmd>
	 The external signal is connected to TIM5 CH2 pin (PA.01)
	 The both Rising and Falling edge are used as active edge,
	 The TIM5 CCR2 is used to compute the impulse duration
	------------------------------------------------------------ */

	TIM_ICInitStructure.TIM_Channel     = TIM_Channel_1;//left, forward
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <sensorInitCaptureTimer+0x9c>)
 8001478:	2200      	movs	r2, #0
 800147a:	801a      	strh	r2, [r3, #0]
	TIM_ICInitStructure.TIM_ICPolarity  = TIM_ICPolarity_BothEdge;
 800147c:	4b21      	ldr	r3, [pc, #132]	; (8001504 <sensorInitCaptureTimer+0x9c>)
 800147e:	220a      	movs	r2, #10
 8001480:	805a      	strh	r2, [r3, #2]
	TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <sensorInitCaptureTimer+0x9c>)
 8001484:	2201      	movs	r2, #1
 8001486:	809a      	strh	r2, [r3, #4]
	TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <sensorInitCaptureTimer+0x9c>)
 800148a:	2200      	movs	r2, #0
 800148c:	80da      	strh	r2, [r3, #6]
	TIM_ICInitStructure.TIM_ICFilter = 0x0;
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <sensorInitCaptureTimer+0x9c>)
 8001490:	2200      	movs	r2, #0
 8001492:	811a      	strh	r2, [r3, #8]
	TIM_ICInit(TIM5, &TIM_ICInitStructure);
 8001494:	491b      	ldr	r1, [pc, #108]	; (8001504 <sensorInitCaptureTimer+0x9c>)
 8001496:	481c      	ldr	r0, [pc, #112]	; (8001508 <sensorInitCaptureTimer+0xa0>)
 8001498:	f7ff fc70 	bl	8000d7c <TIM_ICInit>
	TIM_ICInitStructure.TIM_Channel     = TIM_Channel_2;//left, forward
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <sensorInitCaptureTimer+0x9c>)
 800149e:	2204      	movs	r2, #4
 80014a0:	801a      	strh	r2, [r3, #0]
	TIM_ICInit(TIM5, &TIM_ICInitStructure);
 80014a2:	4918      	ldr	r1, [pc, #96]	; (8001504 <sensorInitCaptureTimer+0x9c>)
 80014a4:	4818      	ldr	r0, [pc, #96]	; (8001508 <sensorInitCaptureTimer+0xa0>)
 80014a6:	f7ff fc69 	bl	8000d7c <TIM_ICInit>

	//TIM prescale clock
	TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 80014aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ae:	607b      	str	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80014b4:	2300      	movs	r3, #0
 80014b6:	807b      	strh	r3, [r7, #2]
	TIM_TimeBaseStructure.TIM_Prescaler = (unsigned short)160;
 80014b8:	23a0      	movs	r3, #160	; 0xa0
 80014ba:	803b      	strh	r3, [r7, #0]
	TIM_TimeBaseInit(TIM5, &TIM_TimeBaseStructure);
 80014bc:	463b      	mov	r3, r7
 80014be:	4619      	mov	r1, r3
 80014c0:	4811      	ldr	r0, [pc, #68]	; (8001508 <sensorInitCaptureTimer+0xa0>)
 80014c2:	f7ff fbe9 	bl	8000c98 <TIM_TimeBaseInit>

	// TIM enable counter
	TIM_Cmd(TIM5, ENABLE);
 80014c6:	2101      	movs	r1, #1
 80014c8:	480f      	ldr	r0, [pc, #60]	; (8001508 <sensorInitCaptureTimer+0xa0>)
 80014ca:	f7ff fc37 	bl	8000d3c <TIM_Cmd>

	// Enable the CC2 Interrupt Request
	TIM_ITConfig(TIM5, TIM_IT_CC1, ENABLE);//left
 80014ce:	2201      	movs	r2, #1
 80014d0:	2102      	movs	r1, #2
 80014d2:	480d      	ldr	r0, [pc, #52]	; (8001508 <sensorInitCaptureTimer+0xa0>)
 80014d4:	f7ff fd32 	bl	8000f3c <TIM_ITConfig>
	TIM_ITConfig(TIM5, TIM_IT_CC2, ENABLE);//forward
 80014d8:	2201      	movs	r2, #1
 80014da:	2104      	movs	r1, #4
 80014dc:	480a      	ldr	r0, [pc, #40]	; (8001508 <sensorInitCaptureTimer+0xa0>)
 80014de:	f7ff fd2d 	bl	8000f3c <TIM_ITConfig>

	// Enable the TIM5 global Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn;
 80014e2:	232e      	movs	r3, #46	; 0x2e
 80014e4:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 80014ea:	2302      	movs	r3, #2
 80014ec:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80014ee:	2301      	movs	r3, #1
 80014f0:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fa0c 	bl	8000914 <NVIC_Init>
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20004e70 	.word	0x20004e70
 8001508:	40000c00 	.word	0x40000c00

0800150c <sensorInitCapturePins>:
//inicializacia pinu pre meranie dlzky impulzu z dialkomera
void sensorInitCapturePins(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// GPIOB clock enable
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001512:	2101      	movs	r1, #1
 8001514:	2001      	movs	r0, #1
 8001516:	f7ff fb83 	bl	8000c20 <RCC_AHBPeriphClockCmd>

	// TIM5 channel 2 pin (PA.01) configuration
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 800151a:	2302      	movs	r3, #2
 800151c:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 800151e:	2303      	movs	r3, #3
 8001520:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001522:	2300      	movs	r3, #0
 8001524:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8001526:	2301      	movs	r3, #1
 8001528:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_1;
 800152a:	2302      	movs	r3, #2
 800152c:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800152e:	463b      	mov	r3, r7
 8001530:	4619      	mov	r1, r3
 8001532:	480c      	ldr	r0, [pc, #48]	; (8001564 <sensorInitCapturePins+0x58>)
 8001534:	f7ff fa4e 	bl	80009d4 <GPIO_Init>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM5);
 8001538:	2202      	movs	r2, #2
 800153a:	2101      	movs	r1, #1
 800153c:	4809      	ldr	r0, [pc, #36]	; (8001564 <sensorInitCapturePins+0x58>)
 800153e:	f7ff fb27 	bl	8000b90 <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0;
 8001542:	2301      	movs	r3, #1
 8001544:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001546:	463b      	mov	r3, r7
 8001548:	4619      	mov	r1, r3
 800154a:	4806      	ldr	r0, [pc, #24]	; (8001564 <sensorInitCapturePins+0x58>)
 800154c:	f7ff fa42 	bl	80009d4 <GPIO_Init>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_TIM5);
 8001550:	2202      	movs	r2, #2
 8001552:	2100      	movs	r1, #0
 8001554:	4803      	ldr	r0, [pc, #12]	; (8001564 <sensorInitCapturePins+0x58>)
 8001556:	f7ff fb1b 	bl	8000b90 <GPIO_PinAFConfig>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40020000 	.word	0x40020000

08001568 <leftSensorMeasure>:

//spustenie merania laveho dialkomeru
void leftSensorMeasure(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	TIM_Cmd(TIM7, ENABLE);
 800156c:	2101      	movs	r1, #1
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <leftSensorMeasure+0x1c>)
 8001570:	f7ff fbe4 	bl	8000d3c <TIM_Cmd>
	GPIO_WriteBit(GPIOC, GPIO_Pin_10, Bit_SET);//spustenie trig impulzu
 8001574:	2201      	movs	r2, #1
 8001576:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800157a:	4803      	ldr	r0, [pc, #12]	; (8001588 <leftSensorMeasure+0x20>)
 800157c:	f7ff fadc 	bl	8000b38 <GPIO_WriteBit>
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40001400 	.word	0x40001400
 8001588:	40020800 	.word	0x40020800

0800158c <forwardSensorMeasure>:
{

}
//spustenie memrania predneho dialkomeru
void forwardSensorMeasure(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	TIM_Cmd(TIM7, ENABLE);
 8001590:	2101      	movs	r1, #1
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <forwardSensorMeasure+0x1c>)
 8001594:	f7ff fbd2 	bl	8000d3c <TIM_Cmd>
	GPIO_WriteBit(GPIOC, GPIO_Pin_12, Bit_SET);//spustenie trig impulzu
 8001598:	2201      	movs	r2, #1
 800159a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800159e:	4803      	ldr	r0, [pc, #12]	; (80015ac <forwardSensorMeasure+0x20>)
 80015a0:	f7ff faca 	bl	8000b38 <GPIO_WriteBit>
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40001400 	.word	0x40001400
 80015ac:	40020800 	.word	0x40020800

080015b0 <TIM7_IRQHandler>:

//spracovanie prerusenia z TIM7, casovac pre spustaci impulz dialkomeru
void TIM7_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) == SET)
 80015b4:	2101      	movs	r1, #1
 80015b6:	4816      	ldr	r0, [pc, #88]	; (8001610 <TIM7_IRQHandler+0x60>)
 80015b8:	f7ff fce4 	bl	8000f84 <TIM_GetITStatus>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d124      	bne.n	800160c <TIM7_IRQHandler+0x5c>
	{
		TIM_Cmd(TIM7, DISABLE);
 80015c2:	2100      	movs	r1, #0
 80015c4:	4812      	ldr	r0, [pc, #72]	; (8001610 <TIM7_IRQHandler+0x60>)
 80015c6:	f7ff fbb9 	bl	8000d3c <TIM_Cmd>
		if (GPIO_ReadOutputDataBit(GPIOC, GPIO_Pin_10) == 1)
 80015ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ce:	4811      	ldr	r0, [pc, #68]	; (8001614 <TIM7_IRQHandler+0x64>)
 80015d0:	f7ff fa96 	bl	8000b00 <GPIO_ReadOutputDataBit>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d106      	bne.n	80015e8 <TIM7_IRQHandler+0x38>
		{
			GPIO_WriteBit(GPIOC, GPIO_Pin_10, Bit_RESET);//ukoncenie trig impulzu left
 80015da:	2200      	movs	r2, #0
 80015dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015e0:	480c      	ldr	r0, [pc, #48]	; (8001614 <TIM7_IRQHandler+0x64>)
 80015e2:	f7ff faa9 	bl	8000b38 <GPIO_WriteBit>
 80015e6:	e00d      	b.n	8001604 <TIM7_IRQHandler+0x54>
		}
		else if (GPIO_ReadOutputDataBit(GPIOC, GPIO_Pin_12) == 1)
 80015e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ec:	4809      	ldr	r0, [pc, #36]	; (8001614 <TIM7_IRQHandler+0x64>)
 80015ee:	f7ff fa87 	bl	8000b00 <GPIO_ReadOutputDataBit>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d105      	bne.n	8001604 <TIM7_IRQHandler+0x54>
		{
			GPIO_WriteBit(GPIOC, GPIO_Pin_12, Bit_RESET);//ukoncenie trig impulzu forward
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <TIM7_IRQHandler+0x64>)
 8001600:	f7ff fa9a 	bl	8000b38 <GPIO_WriteBit>
		}
		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 8001604:	2101      	movs	r1, #1
 8001606:	4802      	ldr	r0, [pc, #8]	; (8001610 <TIM7_IRQHandler+0x60>)
 8001608:	f7ff fce6 	bl	8000fd8 <TIM_ClearITPendingBit>
	}
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40001400 	.word	0x40001400
 8001614:	40020800 	.word	0x40020800

08001618 <TIM5_IRQHandler>:

//spracovanie prerusenia z TIM5, casovac pre meranie dlzky impulzu z dialialkomerov
void TIM5_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	//left
	if (TIM_GetITStatus(TIM5, TIM_IT_CC2) != RESET)
 800161c:	2104      	movs	r1, #4
 800161e:	4858      	ldr	r0, [pc, #352]	; (8001780 <TIM5_IRQHandler+0x168>)
 8001620:	f7ff fcb0 	bl	8000f84 <TIM_GetITStatus>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d05b      	beq.n	80016e2 <TIM5_IRQHandler+0xca>
	  {


	    /* Clear TIM5 Capture compare interrupt pending bit */
	    TIM_ClearITPendingBit(TIM5, TIM_IT_CC2);
 800162a:	2104      	movs	r1, #4
 800162c:	4854      	ldr	r0, [pc, #336]	; (8001780 <TIM5_IRQHandler+0x168>)
 800162e:	f7ff fcd3 	bl	8000fd8 <TIM_ClearITPendingBit>
	    if(CaptureNumber == 0)
 8001632:	4b54      	ldr	r3, [pc, #336]	; (8001784 <TIM5_IRQHandler+0x16c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d109      	bne.n	800164e <TIM5_IRQHandler+0x36>
	    {
	      /* Get the Input Capture value */
	      IC4ReadValue1 = TIM_GetCapture2(TIM5);
 800163a:	4851      	ldr	r0, [pc, #324]	; (8001780 <TIM5_IRQHandler+0x168>)
 800163c:	f7ff fbfe 	bl	8000e3c <TIM_GetCapture2>
 8001640:	4602      	mov	r2, r0
 8001642:	4b51      	ldr	r3, [pc, #324]	; (8001788 <TIM5_IRQHandler+0x170>)
 8001644:	601a      	str	r2, [r3, #0]
	      CaptureNumber = 1;
 8001646:	4b4f      	ldr	r3, [pc, #316]	; (8001784 <TIM5_IRQHandler+0x16c>)
 8001648:	2201      	movs	r2, #1
 800164a:	601a      	str	r2, [r3, #0]
		      //pamatCapture[pocitadlo] = Capture;
		      //pocitadlo++;
		      CaptureNumber = 0;
		    }
		  }
}
 800164c:	e096      	b.n	800177c <TIM5_IRQHandler+0x164>
	    {
	      /* Get the Input Capture value */
	      IC4ReadValue1 = TIM_GetCapture2(TIM5);
	      CaptureNumber = 1;
	    }
	    else if(CaptureNumber == 1)
 800164e:	4b4d      	ldr	r3, [pc, #308]	; (8001784 <TIM5_IRQHandler+0x16c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	f040 8092 	bne.w	800177c <TIM5_IRQHandler+0x164>
	    {
	      /* Get the Input Capture value */
	      IC4ReadValue2 = TIM_GetCapture2(TIM5);
 8001658:	4849      	ldr	r0, [pc, #292]	; (8001780 <TIM5_IRQHandler+0x168>)
 800165a:	f7ff fbef 	bl	8000e3c <TIM_GetCapture2>
 800165e:	4602      	mov	r2, r0
 8001660:	4b4a      	ldr	r3, [pc, #296]	; (800178c <TIM5_IRQHandler+0x174>)
 8001662:	601a      	str	r2, [r3, #0]

	      /* Capture computation */
	      if (IC4ReadValue2 > IC4ReadValue1)
 8001664:	4b49      	ldr	r3, [pc, #292]	; (800178c <TIM5_IRQHandler+0x174>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b47      	ldr	r3, [pc, #284]	; (8001788 <TIM5_IRQHandler+0x170>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d908      	bls.n	8001682 <TIM5_IRQHandler+0x6a>
	      {
	        Capture = (IC4ReadValue2 - IC4ReadValue1) - 1;
 8001670:	4b46      	ldr	r3, [pc, #280]	; (800178c <TIM5_IRQHandler+0x174>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b44      	ldr	r3, [pc, #272]	; (8001788 <TIM5_IRQHandler+0x170>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	3b01      	subs	r3, #1
 800167c:	4a44      	ldr	r2, [pc, #272]	; (8001790 <TIM5_IRQHandler+0x178>)
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	e013      	b.n	80016aa <TIM5_IRQHandler+0x92>
	      }
	      else if (IC4ReadValue2 < IC4ReadValue1)
 8001682:	4b42      	ldr	r3, [pc, #264]	; (800178c <TIM5_IRQHandler+0x174>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4b40      	ldr	r3, [pc, #256]	; (8001788 <TIM5_IRQHandler+0x170>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d20a      	bcs.n	80016a4 <TIM5_IRQHandler+0x8c>
	      {
	        Capture = ((0xFFFF - IC4ReadValue1) + IC4ReadValue2) - 1;
 800168e:	4b3f      	ldr	r3, [pc, #252]	; (800178c <TIM5_IRQHandler+0x174>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4b3d      	ldr	r3, [pc, #244]	; (8001788 <TIM5_IRQHandler+0x170>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800169c:	33fe      	adds	r3, #254	; 0xfe
 800169e:	4a3c      	ldr	r2, [pc, #240]	; (8001790 <TIM5_IRQHandler+0x178>)
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e002      	b.n	80016aa <TIM5_IRQHandler+0x92>
	      }
	      else
	      {
	        Capture = 0;
 80016a4:	4b3a      	ldr	r3, [pc, #232]	; (8001790 <TIM5_IRQHandler+0x178>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
	      }

	      /* Frequency computation */
	      TIM4Freq = Capture;
 80016aa:	4b39      	ldr	r3, [pc, #228]	; (8001790 <TIM5_IRQHandler+0x178>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a39      	ldr	r2, [pc, #228]	; (8001794 <TIM5_IRQHandler+0x17c>)
 80016b0:	6013      	str	r3, [r2, #0]
	      pamatCapture[pocitadlo] = Capture;
 80016b2:	4b39      	ldr	r3, [pc, #228]	; (8001798 <TIM5_IRQHandler+0x180>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a36      	ldr	r2, [pc, #216]	; (8001790 <TIM5_IRQHandler+0x178>)
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	4938      	ldr	r1, [pc, #224]	; (800179c <TIM5_IRQHandler+0x184>)
 80016bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	      pocitadlo++;
 80016c0:	4b35      	ldr	r3, [pc, #212]	; (8001798 <TIM5_IRQHandler+0x180>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	4a34      	ldr	r2, [pc, #208]	; (8001798 <TIM5_IRQHandler+0x180>)
 80016c8:	6013      	str	r3, [r2, #0]
	      if (pocitadlo >= 980)
 80016ca:	4b33      	ldr	r3, [pc, #204]	; (8001798 <TIM5_IRQHandler+0x180>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f5b3 7f75 	cmp.w	r3, #980	; 0x3d4
 80016d2:	d302      	bcc.n	80016da <TIM5_IRQHandler+0xc2>
	      {
	    	  pocitadlo = 0;
 80016d4:	4b30      	ldr	r3, [pc, #192]	; (8001798 <TIM5_IRQHandler+0x180>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
	      }
	      CaptureNumber = 0;
 80016da:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <TIM5_IRQHandler+0x16c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
		      //pamatCapture[pocitadlo] = Capture;
		      //pocitadlo++;
		      CaptureNumber = 0;
		    }
		  }
}
 80016e0:	e04c      	b.n	800177c <TIM5_IRQHandler+0x164>
	      }
	      CaptureNumber = 0;
	    }
	  }
	//forward
	else if (TIM_GetITStatus(TIM5, TIM_IT_CC1) != RESET)
 80016e2:	2102      	movs	r1, #2
 80016e4:	4826      	ldr	r0, [pc, #152]	; (8001780 <TIM5_IRQHandler+0x168>)
 80016e6:	f7ff fc4d 	bl	8000f84 <TIM_GetITStatus>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d045      	beq.n	800177c <TIM5_IRQHandler+0x164>
		  {


		    /* Clear TIM5 Capture compare interrupt pending bit */
		    TIM_ClearITPendingBit(TIM5, TIM_IT_CC1);
 80016f0:	2102      	movs	r1, #2
 80016f2:	4823      	ldr	r0, [pc, #140]	; (8001780 <TIM5_IRQHandler+0x168>)
 80016f4:	f7ff fc70 	bl	8000fd8 <TIM_ClearITPendingBit>
		    if(CaptureNumber == 0)
 80016f8:	4b22      	ldr	r3, [pc, #136]	; (8001784 <TIM5_IRQHandler+0x16c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d109      	bne.n	8001714 <TIM5_IRQHandler+0xfc>
		    {
		      /* Get the Input Capture value */
		      IC4ReadValue1 = TIM_GetCapture1(TIM5);
 8001700:	481f      	ldr	r0, [pc, #124]	; (8001780 <TIM5_IRQHandler+0x168>)
 8001702:	f7ff fb8f 	bl	8000e24 <TIM_GetCapture1>
 8001706:	4602      	mov	r2, r0
 8001708:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <TIM5_IRQHandler+0x170>)
 800170a:	601a      	str	r2, [r3, #0]
		      CaptureNumber = 1;
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <TIM5_IRQHandler+0x16c>)
 800170e:	2201      	movs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]
		      //pamatCapture[pocitadlo] = Capture;
		      //pocitadlo++;
		      CaptureNumber = 0;
		    }
		  }
}
 8001712:	e033      	b.n	800177c <TIM5_IRQHandler+0x164>
		    {
		      /* Get the Input Capture value */
		      IC4ReadValue1 = TIM_GetCapture1(TIM5);
		      CaptureNumber = 1;
		    }
		    else if(CaptureNumber == 1)
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <TIM5_IRQHandler+0x16c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d12f      	bne.n	800177c <TIM5_IRQHandler+0x164>
		    {
		      /* Get the Input Capture value */
		      IC4ReadValue2 = TIM_GetCapture1(TIM5);
 800171c:	4818      	ldr	r0, [pc, #96]	; (8001780 <TIM5_IRQHandler+0x168>)
 800171e:	f7ff fb81 	bl	8000e24 <TIM_GetCapture1>
 8001722:	4602      	mov	r2, r0
 8001724:	4b19      	ldr	r3, [pc, #100]	; (800178c <TIM5_IRQHandler+0x174>)
 8001726:	601a      	str	r2, [r3, #0]

		      /* Capture computation */
		      if (IC4ReadValue2 > IC4ReadValue1)
 8001728:	4b18      	ldr	r3, [pc, #96]	; (800178c <TIM5_IRQHandler+0x174>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b16      	ldr	r3, [pc, #88]	; (8001788 <TIM5_IRQHandler+0x170>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d908      	bls.n	8001746 <TIM5_IRQHandler+0x12e>
		      {
		        Capture = (IC4ReadValue2 - IC4ReadValue1) - 1;
 8001734:	4b15      	ldr	r3, [pc, #84]	; (800178c <TIM5_IRQHandler+0x174>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b13      	ldr	r3, [pc, #76]	; (8001788 <TIM5_IRQHandler+0x170>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	3b01      	subs	r3, #1
 8001740:	4a13      	ldr	r2, [pc, #76]	; (8001790 <TIM5_IRQHandler+0x178>)
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	e013      	b.n	800176e <TIM5_IRQHandler+0x156>
		      }
		      else if (IC4ReadValue2 < IC4ReadValue1)
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <TIM5_IRQHandler+0x174>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <TIM5_IRQHandler+0x170>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d20a      	bcs.n	8001768 <TIM5_IRQHandler+0x150>
		      {
		        Capture = ((0xFFFF - IC4ReadValue1) + IC4ReadValue2) - 1;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <TIM5_IRQHandler+0x174>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <TIM5_IRQHandler+0x170>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001760:	33fe      	adds	r3, #254	; 0xfe
 8001762:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <TIM5_IRQHandler+0x178>)
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e002      	b.n	800176e <TIM5_IRQHandler+0x156>
		      }
		      else
		      {
		        Capture = 0;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <TIM5_IRQHandler+0x178>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
		      }

		      /* Frequency computation */
		      TIM5Freq = Capture;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <TIM5_IRQHandler+0x178>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <TIM5_IRQHandler+0x188>)
 8001774:	6013      	str	r3, [r2, #0]
		      //pamatCapture[pocitadlo] = Capture;
		      //pocitadlo++;
		      CaptureNumber = 0;
 8001776:	4b03      	ldr	r3, [pc, #12]	; (8001784 <TIM5_IRQHandler+0x16c>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
		    }
		  }
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40000c00 	.word	0x40000c00
 8001784:	2000003c 	.word	0x2000003c
 8001788:	20000034 	.word	0x20000034
 800178c:	20000038 	.word	0x20000038
 8001790:	20000040 	.word	0x20000040
 8001794:	20000028 	.word	0x20000028
 8001798:	20000030 	.word	0x20000030
 800179c:	2000004c 	.word	0x2000004c
 80017a0:	2000002c 	.word	0x2000002c
 80017a4:	00000000 	.word	0x00000000

080017a8 <leftSensorGetDistance>:

//prevzatie nameranej vzdialenosti z laveho dialkomeru
double leftSensorGetDistance(void)
{
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	pocitadlo1++;
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <leftSensorGetDistance+0x90>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	4a21      	ldr	r2, [pc, #132]	; (8001838 <leftSensorGetDistance+0x90>)
 80017b4:	6013      	str	r3, [r2, #0]
	if (pocitadlo1 >= 980)
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <leftSensorGetDistance+0x90>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f5b3 7f75 	cmp.w	r3, #980	; 0x3d4
 80017be:	d302      	bcc.n	80017c6 <leftSensorGetDistance+0x1e>
	{
		pocitadlo1 = 0;
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <leftSensorGetDistance+0x90>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
	}
	pamatDist[pocitadlo1] = TIM4Freq/0.1/58.0;
 80017c6:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <leftSensorGetDistance+0x90>)
 80017c8:	681d      	ldr	r5, [r3, #0]
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <leftSensorGetDistance+0x94>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fe18 	bl	8000404 <__aeabi_ui2d>
 80017d4:	a316      	add	r3, pc, #88	; (adr r3, 8001830 <leftSensorGetDistance+0x88>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	f7fe ffb3 	bl	8000744 <__aeabi_ddiv>
 80017de:	4603      	mov	r3, r0
 80017e0:	460c      	mov	r4, r1
 80017e2:	4618      	mov	r0, r3
 80017e4:	4621      	mov	r1, r4
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <leftSensorGetDistance+0x98>)
 80017ec:	f7fe ffaa 	bl	8000744 <__aeabi_ddiv>
 80017f0:	4603      	mov	r3, r0
 80017f2:	460c      	mov	r4, r1
 80017f4:	4913      	ldr	r1, [pc, #76]	; (8001844 <leftSensorGetDistance+0x9c>)
 80017f6:	00ea      	lsls	r2, r5, #3
 80017f8:	440a      	add	r2, r1
 80017fa:	e882 0018 	stmia.w	r2, {r3, r4}
	return TIM4Freq/0.1/58.0;
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <leftSensorGetDistance+0x94>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fdfe 	bl	8000404 <__aeabi_ui2d>
 8001808:	a309      	add	r3, pc, #36	; (adr r3, 8001830 <leftSensorGetDistance+0x88>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7fe ff99 	bl	8000744 <__aeabi_ddiv>
 8001812:	4603      	mov	r3, r0
 8001814:	460c      	mov	r4, r1
 8001816:	4618      	mov	r0, r3
 8001818:	4621      	mov	r1, r4
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <leftSensorGetDistance+0x98>)
 8001820:	f7fe ff90 	bl	8000744 <__aeabi_ddiv>
 8001824:	4603      	mov	r3, r0
 8001826:	460c      	mov	r4, r1
}
 8001828:	4618      	mov	r0, r3
 800182a:	4621      	mov	r1, r4
 800182c:	bdb0      	pop	{r4, r5, r7, pc}
 800182e:	bf00      	nop
 8001830:	9999999a 	.word	0x9999999a
 8001834:	3fb99999 	.word	0x3fb99999
 8001838:	20000044 	.word	0x20000044
 800183c:	20000028 	.word	0x20000028
 8001840:	404d0000 	.word	0x404d0000
 8001844:	20002f30 	.word	0x20002f30

08001848 <forwardSensorGetDistance>:
{
	return 0;
}
//prevzatie nameranej vzdialenosti z predneho dialkomeru
double forwardSensorGetDistance(void)
{
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	af00      	add	r7, sp, #0
	pocitadlo11++;
 800184c:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <forwardSensorGetDistance+0x90>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	3301      	adds	r3, #1
 8001852:	4a21      	ldr	r2, [pc, #132]	; (80018d8 <forwardSensorGetDistance+0x90>)
 8001854:	6013      	str	r3, [r2, #0]
	if (pocitadlo11 >= 980)
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <forwardSensorGetDistance+0x90>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f5b3 7f75 	cmp.w	r3, #980	; 0x3d4
 800185e:	d302      	bcc.n	8001866 <forwardSensorGetDistance+0x1e>
	{
		pocitadlo11 = 0;
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <forwardSensorGetDistance+0x90>)
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
	}
	pamatDist1[pocitadlo11] = TIM5Freq/0.1/58.0;
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <forwardSensorGetDistance+0x90>)
 8001868:	681d      	ldr	r5, [r3, #0]
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <forwardSensorGetDistance+0x94>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fdc8 	bl	8000404 <__aeabi_ui2d>
 8001874:	a316      	add	r3, pc, #88	; (adr r3, 80018d0 <forwardSensorGetDistance+0x88>)
 8001876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187a:	f7fe ff63 	bl	8000744 <__aeabi_ddiv>
 800187e:	4603      	mov	r3, r0
 8001880:	460c      	mov	r4, r1
 8001882:	4618      	mov	r0, r3
 8001884:	4621      	mov	r1, r4
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <forwardSensorGetDistance+0x98>)
 800188c:	f7fe ff5a 	bl	8000744 <__aeabi_ddiv>
 8001890:	4603      	mov	r3, r0
 8001892:	460c      	mov	r4, r1
 8001894:	4913      	ldr	r1, [pc, #76]	; (80018e4 <forwardSensorGetDistance+0x9c>)
 8001896:	00ea      	lsls	r2, r5, #3
 8001898:	440a      	add	r2, r1
 800189a:	e882 0018 	stmia.w	r2, {r3, r4}
	return TIM5Freq/0.1/58.0;
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <forwardSensorGetDistance+0x94>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fdae 	bl	8000404 <__aeabi_ui2d>
 80018a8:	a309      	add	r3, pc, #36	; (adr r3, 80018d0 <forwardSensorGetDistance+0x88>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	f7fe ff49 	bl	8000744 <__aeabi_ddiv>
 80018b2:	4603      	mov	r3, r0
 80018b4:	460c      	mov	r4, r1
 80018b6:	4618      	mov	r0, r3
 80018b8:	4621      	mov	r1, r4
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <forwardSensorGetDistance+0x98>)
 80018c0:	f7fe ff40 	bl	8000744 <__aeabi_ddiv>
 80018c4:	4603      	mov	r3, r0
 80018c6:	460c      	mov	r4, r1
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	4621      	mov	r1, r4
 80018cc:	bdb0      	pop	{r4, r5, r7, pc}
 80018ce:	bf00      	nop
 80018d0:	9999999a 	.word	0x9999999a
 80018d4:	3fb99999 	.word	0x3fb99999
 80018d8:	20000048 	.word	0x20000048
 80018dc:	2000002c 	.word	0x2000002c
 80018e0:	404d0000 	.word	0x404d0000
 80018e4:	20000ff0 	.word	0x20000ff0

080018e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001920 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80018ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80018ee:	e003      	b.n	80018f8 <LoopCopyDataInit>

080018f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 80018f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80018f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80018f6:	3104      	adds	r1, #4

080018f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80018f8:	480b      	ldr	r0, [pc, #44]	; (8001928 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 80018fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80018fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001900:	d3f6      	bcc.n	80018f0 <CopyDataInit>
  ldr r2, =_sbss
 8001902:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8001904:	e002      	b.n	800190c <LoopFillZerobss>

08001906 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001908:	f842 3b04 	str.w	r3, [r2], #4

0800190c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <LoopFillZerobss+0x28>)
  cmp r2, r3
 800190e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001910:	d3f9      	bcc.n	8001906 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001912:	f000 f841 	bl	8001998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001916:	f000 f903 	bl	8001b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800191a:	f7ff fd0d 	bl	8001338 <main>
  bx lr
 800191e:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001920:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001924:	08001b8c 	.word	0x08001b8c
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8001928:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800192c:	20000000 	.word	0x20000000
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8001930:	20000000 	.word	0x20000000
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8001934:	20004e7c 	.word	0x20004e7c

08001938 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC1_IRQHandler>
	...

0800193c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800194c:	e7fe      	b.n	800194c <HardFault_Handler+0x4>
 800194e:	bf00      	nop

08001950 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001954:	e7fe      	b.n	8001954 <MemManage_Handler+0x4>
 8001956:	bf00      	nop

08001958 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800195c:	e7fe      	b.n	800195c <BusFault_Handler+0x4>
 800195e:	bf00      	nop

08001960 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001964:	e7fe      	b.n	8001964 <UsageFault_Handler+0x4>
 8001966:	bf00      	nop

08001968 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800199c:	4a15      	ldr	r2, [pc, #84]	; (80019f4 <SystemInit+0x5c>)
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <SystemInit+0x5c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a6:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80019a8:	4912      	ldr	r1, [pc, #72]	; (80019f4 <SystemInit+0x5c>)
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <SystemInit+0x5c>)
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <SystemInit+0x60>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80019b4:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <SystemInit+0x5c>)
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <SystemInit+0x5c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80019be:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80019c2:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80019c4:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <SystemInit+0x5c>)
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <SystemInit+0x5c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ce:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80019d0:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <SystemInit+0x5c>)
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <SystemInit+0x5c>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80019da:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <SystemInit+0x5c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 80019e2:	f000 f80d 	bl	8001a00 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <SystemInit+0x64>)
 80019e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ec:	609a      	str	r2, [r3, #8]
#endif
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
 80019f8:	88ffc00c 	.word	0x88ffc00c
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001a0e:	4a41      	ldr	r2, [pc, #260]	; (8001b14 <SetSysClock+0x114>)
 8001a10:	4b40      	ldr	r3, [pc, #256]	; (8001b14 <SetSysClock+0x114>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a18:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001a1a:	4b3e      	ldr	r3, [pc, #248]	; (8001b14 <SetSysClock+0x114>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3301      	adds	r3, #1
 8001a28:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d103      	bne.n	8001a38 <SetSysClock+0x38>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001a36:	d1f0      	bne.n	8001a1a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001a38:	4b36      	ldr	r3, [pc, #216]	; (8001b14 <SetSysClock+0x114>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001a44:	2301      	movs	r3, #1
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	e001      	b.n	8001a4e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d15a      	bne.n	8001b0a <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001a54:	4a30      	ldr	r2, [pc, #192]	; (8001b18 <SetSysClock+0x118>)
 8001a56:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <SetSysClock+0x118>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8001a60:	4a2d      	ldr	r2, [pc, #180]	; (8001b18 <SetSysClock+0x118>)
 8001a62:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <SetSysClock+0x118>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f043 0302 	orr.w	r3, r3, #2
 8001a6a:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8001a6c:	4a2a      	ldr	r2, [pc, #168]	; (8001b18 <SetSysClock+0x118>)
 8001a6e:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <SetSysClock+0x118>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001a78:	4a26      	ldr	r2, [pc, #152]	; (8001b14 <SetSysClock+0x114>)
 8001a7a:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <SetSysClock+0x114>)
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a82:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8001a84:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <SetSysClock+0x11c>)
 8001a86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a8a:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8001a8c:	bf00      	nop
 8001a8e:	4b23      	ldr	r3, [pc, #140]	; (8001b1c <SetSysClock+0x11c>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f9      	bne.n	8001a8e <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001a9a:	4a1e      	ldr	r2, [pc, #120]	; (8001b14 <SetSysClock+0x114>)
 8001a9c:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <SetSysClock+0x114>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001aa2:	4a1c      	ldr	r2, [pc, #112]	; (8001b14 <SetSysClock+0x114>)
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <SetSysClock+0x114>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001aaa:	4a1a      	ldr	r2, [pc, #104]	; (8001b14 <SetSysClock+0x114>)
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <SetSysClock+0x114>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8001ab2:	4a18      	ldr	r2, [pc, #96]	; (8001b14 <SetSysClock+0x114>)
 8001ab4:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <SetSysClock+0x114>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001abc:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8001abe:	4a15      	ldr	r2, [pc, #84]	; (8001b14 <SetSysClock+0x114>)
 8001ac0:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <SetSysClock+0x114>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8001ac8:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001aca:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <SetSysClock+0x114>)
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <SetSysClock+0x114>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ad4:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001ad6:	bf00      	nop
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <SetSysClock+0x114>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f9      	beq.n	8001ad8 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001ae4:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <SetSysClock+0x114>)
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <SetSysClock+0x114>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f023 0303 	bic.w	r3, r3, #3
 8001aee:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001af0:	4a08      	ldr	r2, [pc, #32]	; (8001b14 <SetSysClock+0x114>)
 8001af2:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <SetSysClock+0x114>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f043 0303 	orr.w	r3, r3, #3
 8001afa:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001afc:	bf00      	nop
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <SetSysClock+0x114>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d1f9      	bne.n	8001afe <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40023c00 	.word	0x40023c00
 8001b1c:	40007000 	.word	0x40007000

08001b20 <__libc_init_array>:
 8001b20:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <__libc_init_array+0x3c>)
 8001b22:	b570      	push	{r4, r5, r6, lr}
 8001b24:	461e      	mov	r6, r3
 8001b26:	4c0e      	ldr	r4, [pc, #56]	; (8001b60 <__libc_init_array+0x40>)
 8001b28:	2500      	movs	r5, #0
 8001b2a:	1ae4      	subs	r4, r4, r3
 8001b2c:	10a4      	asrs	r4, r4, #2
 8001b2e:	42a5      	cmp	r5, r4
 8001b30:	d004      	beq.n	8001b3c <__libc_init_array+0x1c>
 8001b32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b36:	4798      	blx	r3
 8001b38:	3501      	adds	r5, #1
 8001b3a:	e7f8      	b.n	8001b2e <__libc_init_array+0xe>
 8001b3c:	f000 f816 	bl	8001b6c <_init>
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <__libc_init_array+0x44>)
 8001b42:	4c09      	ldr	r4, [pc, #36]	; (8001b68 <__libc_init_array+0x48>)
 8001b44:	461e      	mov	r6, r3
 8001b46:	1ae4      	subs	r4, r4, r3
 8001b48:	10a4      	asrs	r4, r4, #2
 8001b4a:	2500      	movs	r5, #0
 8001b4c:	42a5      	cmp	r5, r4
 8001b4e:	d004      	beq.n	8001b5a <__libc_init_array+0x3a>
 8001b50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b54:	4798      	blx	r3
 8001b56:	3501      	adds	r5, #1
 8001b58:	e7f8      	b.n	8001b4c <__libc_init_array+0x2c>
 8001b5a:	bd70      	pop	{r4, r5, r6, pc}
 8001b5c:	08001b84 	.word	0x08001b84
 8001b60:	08001b84 	.word	0x08001b84
 8001b64:	08001b84 	.word	0x08001b84
 8001b68:	08001b88 	.word	0x08001b88

08001b6c <_init>:
 8001b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b6e:	bf00      	nop
 8001b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b72:	bc08      	pop	{r3}
 8001b74:	469e      	mov	lr, r3
 8001b76:	4770      	bx	lr

08001b78 <_fini>:
 8001b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7a:	bf00      	nop
 8001b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b7e:	bc08      	pop	{r3}
 8001b80:	469e      	mov	lr, r3
 8001b82:	4770      	bx	lr
