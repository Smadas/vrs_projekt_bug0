
vrs_projekt_bug0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b38  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001c78  08001c80  00011c80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001c78  08001c78  00011c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001c7c  08001c7c  00011c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00011c80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000040  20000000  08001c80  00020000  2**3
                  ALLOC
  7 ._user_heap_stack 00000400  20000040  08001c80  00020040  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00011c80  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004aae  00000000  00000000  00011ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ca4  00000000  00000000  00016757  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000698  00000000  00000000  00017400  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000600  00000000  00000000  00017a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002029  00000000  00000000  00018098  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001ef1  00000000  00000000  0001a0c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0001bfb2  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001b64  00000000  00000000  0001c030  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0001db94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000000 	.word	0x20000000
 800015c:	00000000 	.word	0x00000000
 8000160:	08001c60 	.word	0x08001c60

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000004 	.word	0x20000004
 800017c:	08001c60 	.word	0x08001c60

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	bf14      	ite	ne
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e720      	b.n	80002c4 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aedc 	beq.w	8000272 <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6c1      	b.n	8000272 <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <__gedf2>:
 8000914:	f04f 3cff 	mov.w	ip, #4294967295
 8000918:	e006      	b.n	8000928 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__ledf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	e002      	b.n	8000928 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__cmpdf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	f84d cd04 	str.w	ip, [sp, #-4]!
 800092c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000930:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000934:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000938:	bf18      	it	ne
 800093a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093e:	d01b      	beq.n	8000978 <__cmpdf2+0x54>
 8000940:	b001      	add	sp, #4
 8000942:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000946:	bf0c      	ite	eq
 8000948:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800094c:	ea91 0f03 	teqne	r1, r3
 8000950:	bf02      	ittt	eq
 8000952:	ea90 0f02 	teqeq	r0, r2
 8000956:	2000      	moveq	r0, #0
 8000958:	4770      	bxeq	lr
 800095a:	f110 0f00 	cmn.w	r0, #0
 800095e:	ea91 0f03 	teq	r1, r3
 8000962:	bf58      	it	pl
 8000964:	4299      	cmppl	r1, r3
 8000966:	bf08      	it	eq
 8000968:	4290      	cmpeq	r0, r2
 800096a:	bf2c      	ite	cs
 800096c:	17d8      	asrcs	r0, r3, #31
 800096e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000972:	f040 0001 	orr.w	r0, r0, #1
 8000976:	4770      	bx	lr
 8000978:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800097c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000980:	d102      	bne.n	8000988 <__cmpdf2+0x64>
 8000982:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000986:	d107      	bne.n	8000998 <__cmpdf2+0x74>
 8000988:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d1d6      	bne.n	8000940 <__cmpdf2+0x1c>
 8000992:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000996:	d0d3      	beq.n	8000940 <__cmpdf2+0x1c>
 8000998:	f85d 0b04 	ldr.w	r0, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <__aeabi_cdrcmple>:
 80009a0:	4684      	mov	ip, r0
 80009a2:	4610      	mov	r0, r2
 80009a4:	4662      	mov	r2, ip
 80009a6:	468c      	mov	ip, r1
 80009a8:	4619      	mov	r1, r3
 80009aa:	4663      	mov	r3, ip
 80009ac:	e000      	b.n	80009b0 <__aeabi_cdcmpeq>
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdcmpeq>:
 80009b0:	b501      	push	{r0, lr}
 80009b2:	f7ff ffb7 	bl	8000924 <__cmpdf2>
 80009b6:	2800      	cmp	r0, #0
 80009b8:	bf48      	it	mi
 80009ba:	f110 0f00 	cmnmi.w	r0, #0
 80009be:	bd01      	pop	{r0, pc}

080009c0 <__aeabi_dcmpeq>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff fff4 	bl	80009b0 <__aeabi_cdcmpeq>
 80009c8:	bf0c      	ite	eq
 80009ca:	2001      	moveq	r0, #1
 80009cc:	2000      	movne	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmplt>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffea 	bl	80009b0 <__aeabi_cdcmpeq>
 80009dc:	bf34      	ite	cc
 80009de:	2001      	movcc	r0, #1
 80009e0:	2000      	movcs	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmple>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffe0 	bl	80009b0 <__aeabi_cdcmpeq>
 80009f0:	bf94      	ite	ls
 80009f2:	2001      	movls	r0, #1
 80009f4:	2000      	movhi	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpge>:
 80009fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a00:	f7ff ffce 	bl	80009a0 <__aeabi_cdrcmple>
 8000a04:	bf94      	ite	ls
 8000a06:	2001      	movls	r0, #1
 8000a08:	2000      	movhi	r0, #0
 8000a0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dcmpgt>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff ffc4 	bl	80009a0 <__aeabi_cdrcmple>
 8000a18:	bf34      	ite	cc
 8000a1a:	2001      	movcc	r0, #1
 8000a1c:	2000      	movcs	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73fb      	strb	r3, [r7, #15]
 8000a30:	2300      	movs	r3, #0
 8000a32:	73bb      	strb	r3, [r7, #14]
 8000a34:	230f      	movs	r3, #15
 8000a36:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	78db      	ldrb	r3, [r3, #3]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d038      	beq.n	8000ab2 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000a40:	4b26      	ldr	r3, [pc, #152]	; (8000adc <NVIC_Init+0xb8>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	43db      	mvns	r3, r3
 8000a46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000a4a:	0a1b      	lsrs	r3, r3, #8
 8000a4c:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	f1c3 0304 	rsb	r3, r3, #4
 8000a54:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000a56:	7b7a      	ldrb	r2, [r7, #13]
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	fa42 f303 	asr.w	r3, r2, r3
 8000a5e:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	785b      	ldrb	r3, [r3, #1]
 8000a64:	461a      	mov	r2, r3
 8000a66:	7bbb      	ldrb	r3, [r7, #14]
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	789a      	ldrb	r2, [r3, #2]
 8000a72:	7b7b      	ldrb	r3, [r7, #13]
 8000a74:	4013      	ands	r3, r2
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	011b      	lsls	r3, r3, #4
 8000a82:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000a84:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <NVIC_Init+0xbc>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	7bfa      	ldrb	r2, [r7, #15]
 8000a8e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a92:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <NVIC_Init+0xbc>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	095b      	lsrs	r3, r3, #5
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	f003 031f 	and.w	r3, r3, #31
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000aac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000ab0:	e00f      	b.n	8000ad2 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000ab2:	490b      	ldr	r1, [pc, #44]	; (8000ae0 <NVIC_Init+0xbc>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	095b      	lsrs	r3, r3, #5
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	f003 031f 	and.w	r3, r3, #31
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000aca:	f100 0320 	add.w	r3, r0, #32
 8000ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00
 8000ae0:	e000e100 	.word	0xe000e100

08000ae4 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b087      	sub	sp, #28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	e07e      	b.n	8000bfe <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000b00:	2201      	movs	r2, #1
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d16d      	bne.n	8000bf8 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	2103      	movs	r1, #3
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	401a      	ands	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	791b      	ldrb	r3, [r3, #4]
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	fa01 f303 	lsl.w	r3, r1, r3
 8000b44:	431a      	orrs	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	791b      	ldrb	r3, [r3, #4]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d003      	beq.n	8000b5a <GPIO_Init+0x76>
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	791b      	ldrb	r3, [r3, #4]
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d136      	bne.n	8000bc8 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689a      	ldr	r2, [r3, #8]
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	2103      	movs	r1, #3
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	795b      	ldrb	r3, [r3, #5]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	431a      	orrs	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	889b      	ldrh	r3, [r3, #4]
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	2101      	movs	r1, #1
 8000b94:	fa01 f303 	lsl.w	r3, r1, r3
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	889b      	ldrh	r3, [r3, #4]
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	b21a      	sxth	r2, r3
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	799b      	ldrb	r3, [r3, #6]
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	b21b      	sxth	r3, r3
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	68da      	ldr	r2, [r3, #12]
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	2103      	movs	r1, #3
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	401a      	ands	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	68da      	ldr	r2, [r3, #12]
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	79db      	ldrb	r3, [r3, #7]
 8000be8:	4619      	mov	r1, r3
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	f67f af7d 	bls.w	8000b00 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000c06:	bf00      	nop
 8000c08:	371c      	adds	r7, #28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: Specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	8a9b      	ldrh	r3, [r3, #20]
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d002      	beq.n	8000c36 <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000c30:	2301      	movs	r3, #1
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	e001      	b.n	8000c3a <GPIO_ReadOutputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	807b      	strh	r3, [r7, #2]
 8000c54:	4613      	mov	r3, r2
 8000c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8000c58:	787b      	ldrb	r3, [r7, #1]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	887a      	ldrh	r2, [r7, #2]
 8000c62:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000c64:	e002      	b.n	8000c6c <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	887a      	ldrh	r2, [r7, #2]
 8000c6a:	835a      	strh	r2, [r3, #26]
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..H) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	8a9b      	ldrh	r3, [r3, #20]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	887b      	ldrh	r3, [r7, #2]
 8000c8c:	4053      	eors	r3, r2
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	829a      	strh	r2, [r3, #20]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	807b      	strh	r3, [r7, #2]
 8000cac:	4613      	mov	r3, r2
 8000cae:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000cb8:	787a      	ldrb	r2, [r7, #1]
 8000cba:	887b      	ldrh	r3, [r7, #2]
 8000cbc:	f003 0307 	and.w	r3, r3, #7
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000cc8:	887b      	ldrh	r3, [r7, #2]
 8000cca:	08db      	lsrs	r3, r3, #3
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	887b      	ldrh	r3, [r7, #2]
 8000cd2:	08db      	lsrs	r3, r3, #3
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3208      	adds	r2, #8
 8000cdc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ce0:	887b      	ldrh	r3, [r7, #2]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	210f      	movs	r1, #15
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	ea02 0103 	and.w	r1, r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f100 0208 	add.w	r2, r0, #8
 8000cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000cfe:	887b      	ldrh	r3, [r7, #2]
 8000d00:	08db      	lsrs	r3, r3, #3
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	461a      	mov	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3208      	adds	r2, #8
 8000d0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000d14:	887b      	ldrh	r3, [r7, #2]
 8000d16:	08db      	lsrs	r3, r3, #3
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3208      	adds	r2, #8
 8000d20:	68b9      	ldr	r1, [r7, #8]
 8000d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d3c:	78fb      	ldrb	r3, [r7, #3]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d006      	beq.n	8000d50 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000d42:	4909      	ldr	r1, [pc, #36]	; (8000d68 <RCC_AHBPeriphClockCmd+0x38>)
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <RCC_AHBPeriphClockCmd+0x38>)
 8000d46:	69da      	ldr	r2, [r3, #28]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000d4e:	e006      	b.n	8000d5e <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000d50:	4905      	ldr	r1, [pc, #20]	; (8000d68 <RCC_AHBPeriphClockCmd+0x38>)
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <RCC_AHBPeriphClockCmd+0x38>)
 8000d54:	69da      	ldr	r2, [r3, #28]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	61cb      	str	r3, [r1, #28]
  }
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	40023800 	.word	0x40023800

08000d6c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d006      	beq.n	8000d8c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000d7e:	4909      	ldr	r1, [pc, #36]	; (8000da4 <RCC_APB1PeriphClockCmd+0x38>)
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <RCC_APB1PeriphClockCmd+0x38>)
 8000d82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000d8a:	e006      	b.n	8000d9a <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000d8c:	4905      	ldr	r1, [pc, #20]	; (8000da4 <RCC_APB1PeriphClockCmd+0x38>)
 8000d8e:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <RCC_APB1PeriphClockCmd+0x38>)
 8000d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4013      	ands	r3, r2
 8000d98:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	40023800 	.word	0x40023800

08000da8 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dc2:	d00b      	beq.n	8000ddc <TIM_TimeBaseInit+0x34>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <TIM_TimeBaseInit+0x90>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d007      	beq.n	8000ddc <TIM_TimeBaseInit+0x34>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a1b      	ldr	r2, [pc, #108]	; (8000e3c <TIM_TimeBaseInit+0x94>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d003      	beq.n	8000ddc <TIM_TimeBaseInit+0x34>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a1a      	ldr	r2, [pc, #104]	; (8000e40 <TIM_TimeBaseInit+0x98>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d108      	bne.n	8000dee <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000ddc:	89fb      	ldrh	r3, [r7, #14]
 8000dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000de2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	885a      	ldrh	r2, [r3, #2]
 8000de8:	89fb      	ldrh	r3, [r7, #14]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <TIM_TimeBaseInit+0x9c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d00c      	beq.n	8000e10 <TIM_TimeBaseInit+0x68>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a13      	ldr	r2, [pc, #76]	; (8000e48 <TIM_TimeBaseInit+0xa0>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d008      	beq.n	8000e10 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000dfe:	89fb      	ldrh	r3, [r7, #14]
 8000e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e04:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	891a      	ldrh	r2, [r3, #8]
 8000e0a:	89fb      	ldrh	r3, [r7, #14]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	89fa      	ldrh	r2, [r7, #14]
 8000e14:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	881a      	ldrh	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	829a      	strh	r2, [r3, #20]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40000400 	.word	0x40000400
 8000e3c:	40000800 	.word	0x40000800
 8000e40:	40000c00 	.word	0x40000c00
 8000e44:	40001000 	.word	0x40001000
 8000e48:	40001400 	.word	0x40001400

08000e4c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d008      	beq.n	8000e70 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000e6e:	e007      	b.n	8000e80 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	f023 0301 	bic.w	r3, r3, #1
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	801a      	strh	r2, [r3, #0]
  }
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <TIM_ICInit>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d10f      	bne.n	8000ebe <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	8859      	ldrh	r1, [r3, #2]
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	889a      	ldrh	r2, [r3, #4]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	891b      	ldrh	r3, [r3, #8]
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 f920 	bl	80010f0 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	88db      	ldrh	r3, [r3, #6]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f000 f848 	bl	8000f4c <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000ebc:	e036      	b.n	8000f2c <TIM_ICInit+0xa0>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	d10f      	bne.n	8000ee6 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	8859      	ldrh	r1, [r3, #2]
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	889a      	ldrh	r2, [r3, #4]
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	891b      	ldrh	r3, [r3, #8]
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 f94e 	bl	8001174 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	88db      	ldrh	r3, [r3, #6]
 8000edc:	4619      	mov	r1, r3
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f000 f850 	bl	8000f84 <TIM_SetIC2Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000ee4:	e022      	b.n	8000f2c <TIM_ICInit+0xa0>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	2b08      	cmp	r3, #8
 8000eec:	d10f      	bne.n	8000f0e <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	8859      	ldrh	r1, [r3, #2]
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	889a      	ldrh	r2, [r3, #4]
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	891b      	ldrh	r3, [r3, #8]
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 f986 	bl	800120c <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	88db      	ldrh	r3, [r3, #6]
 8000f04:	4619      	mov	r1, r3
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 f85a 	bl	8000fc0 <TIM_SetIC3Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000f0c:	e00e      	b.n	8000f2c <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	8859      	ldrh	r1, [r3, #2]
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	889a      	ldrh	r2, [r3, #4]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	891b      	ldrh	r3, [r3, #8]
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 f9be 	bl	800129c <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	88db      	ldrh	r3, [r3, #6]
 8000f24:	4619      	mov	r1, r3
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 f866 	bl	8000ff8 <TIM_SetIC4Prescaler>
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 2, 3, 4 or 5 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	8b1b      	ldrh	r3, [r3, #24]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	f023 030c 	bic.w	r3, r3, #12
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	8b1b      	ldrh	r3, [r3, #24]
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	887b      	ldrh	r3, [r7, #2]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	831a      	strh	r2, [r3, #24]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	8b1b      	ldrh	r3, [r3, #24]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	8b1b      	ldrh	r3, [r3, #24]
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	4313      	orrs	r3, r2
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	831a      	strh	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	8b9b      	ldrh	r3, [r3, #28]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	f023 030c 	bic.w	r3, r3, #12
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	8b9b      	ldrh	r3, [r3, #28]
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	839a      	strh	r2, [r3, #28]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	8b9b      	ldrh	r3, [r3, #28]
 8001008:	b29b      	uxth	r3, r3
 800100a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800100e:	b29a      	uxth	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	8b9b      	ldrh	r3, [r3, #28]
 8001018:	b29a      	uxth	r2, r3
 800101a:	887b      	ldrh	r3, [r7, #2]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b29b      	uxth	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b29a      	uxth	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	839a      	strh	r2, [r3, #28]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
 8001040:	4613      	mov	r3, r2
 8001042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001044:	787b      	ldrb	r3, [r7, #1]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d008      	beq.n	800105c <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	899b      	ldrh	r3, [r3, #12]
 800104e:	b29a      	uxth	r2, r3
 8001050:	887b      	ldrh	r3, [r7, #2]
 8001052:	4313      	orrs	r3, r2
 8001054:	b29a      	uxth	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800105a:	e009      	b.n	8001070 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	899b      	ldrh	r3, [r3, #12]
 8001060:	b29a      	uxth	r2, r3
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	43db      	mvns	r3, r3
 8001066:	b29b      	uxth	r3, r3
 8001068:	4013      	ands	r3, r2
 800106a:	b29a      	uxth	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	819a      	strh	r2, [r3, #12]
  }
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800108c:	2300      	movs	r3, #0
 800108e:	81bb      	strh	r3, [r7, #12]
 8001090:	2300      	movs	r3, #0
 8001092:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	8a1b      	ldrh	r3, [r3, #16]
 8001098:	b29a      	uxth	r2, r3
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	4013      	ands	r3, r2
 800109e:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	899b      	ldrh	r3, [r3, #12]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	887b      	ldrh	r3, [r7, #2]
 80010a8:	4013      	ands	r3, r2
 80010aa:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80010ac:	89bb      	ldrh	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d005      	beq.n	80010be <TIM_GetITStatus+0x42>
 80010b2:	897b      	ldrh	r3, [r7, #10]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d002      	beq.n	80010be <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80010b8:	2301      	movs	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	e001      	b.n	80010c2 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80010dc:	887b      	ldrh	r3, [r7, #2]
 80010de:	43db      	mvns	r3, r3
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	821a      	strh	r2, [r3, #16]
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr

080010f0 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b087      	sub	sp, #28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	4608      	mov	r0, r1
 80010fa:	4611      	mov	r1, r2
 80010fc:	461a      	mov	r2, r3
 80010fe:	4603      	mov	r3, r0
 8001100:	817b      	strh	r3, [r7, #10]
 8001102:	460b      	mov	r3, r1
 8001104:	813b      	strh	r3, [r7, #8]
 8001106:	4613      	mov	r3, r2
 8001108:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	82fb      	strh	r3, [r7, #22]
 800110e:	2300      	movs	r3, #0
 8001110:	82bb      	strh	r3, [r7, #20]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	8c1b      	ldrh	r3, [r3, #32]
 8001116:	b29b      	uxth	r3, r3
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	b29a      	uxth	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	8b1b      	ldrh	r3, [r3, #24]
 8001126:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	8c1b      	ldrh	r3, [r3, #32]
 800112c:	82bb      	strh	r3, [r7, #20]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 800112e:	8afb      	ldrh	r3, [r7, #22]
 8001130:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8001134:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	b29a      	uxth	r2, r3
 800113c:	893b      	ldrh	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
 8001140:	b29a      	uxth	r2, r3
 8001142:	8afb      	ldrh	r3, [r7, #22]
 8001144:	4313      	orrs	r3, r2
 8001146:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001148:	8abb      	ldrh	r3, [r7, #20]
 800114a:	f023 030a 	bic.w	r3, r3, #10
 800114e:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001150:	897a      	ldrh	r2, [r7, #10]
 8001152:	8abb      	ldrh	r3, [r7, #20]
 8001154:	4313      	orrs	r3, r2
 8001156:	b29b      	uxth	r3, r3
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	8afa      	ldrh	r2, [r7, #22]
 8001162:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	8aba      	ldrh	r2, [r7, #20]
 8001168:	841a      	strh	r2, [r3, #32]
}
 800116a:	bf00      	nop
 800116c:	371c      	adds	r7, #28
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	4608      	mov	r0, r1
 800117e:	4611      	mov	r1, r2
 8001180:	461a      	mov	r2, r3
 8001182:	4603      	mov	r3, r0
 8001184:	817b      	strh	r3, [r7, #10]
 8001186:	460b      	mov	r3, r1
 8001188:	813b      	strh	r3, [r7, #8]
 800118a:	4613      	mov	r3, r2
 800118c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	82fb      	strh	r3, [r7, #22]
 8001192:	2300      	movs	r3, #0
 8001194:	82bb      	strh	r3, [r7, #20]
 8001196:	2300      	movs	r3, #0
 8001198:	827b      	strh	r3, [r7, #18]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	8c1b      	ldrh	r3, [r3, #32]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	f023 0310 	bic.w	r3, r3, #16
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	8b1b      	ldrh	r3, [r3, #24]
 80011ae:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	8c1b      	ldrh	r3, [r3, #32]
 80011b4:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80011b6:	897b      	ldrh	r3, [r7, #10]
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80011bc:	8afb      	ldrh	r3, [r7, #22]
 80011be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011c2:	051b      	lsls	r3, r3, #20
 80011c4:	0d1b      	lsrs	r3, r3, #20
 80011c6:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	031b      	lsls	r3, r3, #12
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	8afb      	ldrh	r3, [r7, #22]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80011d4:	893b      	ldrh	r3, [r7, #8]
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	b29a      	uxth	r2, r3
 80011da:	8afb      	ldrh	r3, [r7, #22]
 80011dc:	4313      	orrs	r3, r2
 80011de:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80011e0:	8abb      	ldrh	r3, [r7, #20]
 80011e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80011e6:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80011e8:	8a7a      	ldrh	r2, [r7, #18]
 80011ea:	8abb      	ldrh	r3, [r7, #20]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	f043 0310 	orr.w	r3, r3, #16
 80011f4:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	8afa      	ldrh	r2, [r7, #22]
 80011fa:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	8aba      	ldrh	r2, [r7, #20]
 8001200:	841a      	strh	r2, [r3, #32]
}
 8001202:	bf00      	nop
 8001204:	371c      	adds	r7, #28
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800120c:	b480      	push	{r7}
 800120e:	b087      	sub	sp, #28
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	4608      	mov	r0, r1
 8001216:	4611      	mov	r1, r2
 8001218:	461a      	mov	r2, r3
 800121a:	4603      	mov	r3, r0
 800121c:	817b      	strh	r3, [r7, #10]
 800121e:	460b      	mov	r3, r1
 8001220:	813b      	strh	r3, [r7, #8]
 8001222:	4613      	mov	r3, r2
 8001224:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	82fb      	strh	r3, [r7, #22]
 800122a:	2300      	movs	r3, #0
 800122c:	82bb      	strh	r3, [r7, #20]
 800122e:	2300      	movs	r3, #0
 8001230:	827b      	strh	r3, [r7, #18]
  
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	8c1b      	ldrh	r3, [r3, #32]
 8001236:	b29b      	uxth	r3, r3
 8001238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800123c:	b29a      	uxth	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	8b9b      	ldrh	r3, [r3, #28]
 8001246:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	8c1b      	ldrh	r3, [r3, #32]
 800124c:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800124e:	897b      	ldrh	r3, [r7, #10]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8001254:	8afb      	ldrh	r3, [r7, #22]
 8001256:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800125a:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	b29a      	uxth	r2, r3
 8001262:	893b      	ldrh	r3, [r7, #8]
 8001264:	4313      	orrs	r3, r2
 8001266:	b29a      	uxth	r2, r3
 8001268:	8afb      	ldrh	r3, [r7, #22]
 800126a:	4313      	orrs	r3, r2
 800126c:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800126e:	8abb      	ldrh	r3, [r7, #20]
 8001270:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8001274:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8001276:	8a7a      	ldrh	r2, [r7, #18]
 8001278:	8abb      	ldrh	r3, [r7, #20]
 800127a:	4313      	orrs	r3, r2
 800127c:	b29b      	uxth	r3, r3
 800127e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001282:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	8afa      	ldrh	r2, [r7, #22]
 8001288:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	8aba      	ldrh	r2, [r7, #20]
 800128e:	841a      	strh	r2, [r3, #32]
}
 8001290:	bf00      	nop
 8001292:	371c      	adds	r7, #28
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop

0800129c <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800129c:	b480      	push	{r7}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	4608      	mov	r0, r1
 80012a6:	4611      	mov	r1, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4603      	mov	r3, r0
 80012ac:	817b      	strh	r3, [r7, #10]
 80012ae:	460b      	mov	r3, r1
 80012b0:	813b      	strh	r3, [r7, #8]
 80012b2:	4613      	mov	r3, r2
 80012b4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	82fb      	strh	r3, [r7, #22]
 80012ba:	2300      	movs	r3, #0
 80012bc:	82bb      	strh	r3, [r7, #20]
 80012be:	2300      	movs	r3, #0
 80012c0:	827b      	strh	r3, [r7, #18]
  
  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	8c1b      	ldrh	r3, [r3, #32]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	8b9b      	ldrh	r3, [r3, #28]
 80012d6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	8c1b      	ldrh	r3, [r3, #32]
 80012dc:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 80012de:	897b      	ldrh	r3, [r7, #10]
 80012e0:	031b      	lsls	r3, r3, #12
 80012e2:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 80012e4:	8afb      	ldrh	r3, [r7, #22]
 80012e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012ea:	051b      	lsls	r3, r3, #20
 80012ec:	0d1b      	lsrs	r3, r3, #20
 80012ee:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 80012f0:	893b      	ldrh	r3, [r7, #8]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	8afb      	ldrh	r3, [r7, #22]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	031b      	lsls	r3, r3, #12
 8001300:	b29a      	uxth	r2, r3
 8001302:	8afb      	ldrh	r3, [r7, #22]
 8001304:	4313      	orrs	r3, r2
 8001306:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001308:	8abb      	ldrh	r3, [r7, #20]
 800130a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800130e:	045b      	lsls	r3, r3, #17
 8001310:	0c5b      	lsrs	r3, r3, #17
 8001312:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8001314:	8a7a      	ldrh	r2, [r7, #18]
 8001316:	8abb      	ldrh	r3, [r7, #20]
 8001318:	4313      	orrs	r3, r2
 800131a:	b29b      	uxth	r3, r3
 800131c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001320:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	8afa      	ldrh	r2, [r7, #22]
 8001326:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	8aba      	ldrh	r2, [r7, #20]
 800132c:	841a      	strh	r2, [r3, #32]
}
 800132e:	bf00      	nop
 8001330:	371c      	adds	r7, #28
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <init_kontrolka>:

/* Private function prototypes */

/* Private functions */
int init_kontrolka()
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
	//spustenie hodin pre periferiu
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800133e:	2101      	movs	r1, #1
 8001340:	2001      	movs	r0, #1
 8001342:	f7ff fcf5 	bl	8000d30 <RCC_AHBPeriphClockCmd>
	//vytvorenie struktury GPIO
	GPIO_InitTypeDef gpioInitStruc;
	gpioInitStruc.GPIO_Mode = GPIO_Mode_OUT;
 8001346:	2301      	movs	r3, #1
 8001348:	713b      	strb	r3, [r7, #4]
	gpioInitStruc.GPIO_OType = GPIO_OType_PP;
 800134a:	2300      	movs	r3, #0
 800134c:	71bb      	strb	r3, [r7, #6]
	gpioInitStruc.GPIO_Pin = GPIO_Pin_5;
 800134e:	2320      	movs	r3, #32
 8001350:	603b      	str	r3, [r7, #0]
	gpioInitStruc.GPIO_Speed = GPIO_Speed_400KHz;
 8001352:	2300      	movs	r3, #0
 8001354:	717b      	strb	r3, [r7, #5]
	//zapisanie inicializacnej struktury
	GPIO_Init(GPIOA, &gpioInitStruc);
 8001356:	463b      	mov	r3, r7
 8001358:	4619      	mov	r1, r3
 800135a:	4804      	ldr	r0, [pc, #16]	; (800136c <init_kontrolka+0x34>)
 800135c:	f7ff fbc2 	bl	8000ae4 <GPIO_Init>

	return 0;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40020000 	.word	0x40020000

08001370 <init_cas_blikanie>:

//inicializacia casovaca pre kontrolnu LED
int init_cas_blikanie()
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
	gTimeStamp = 0;
 8001376:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <init_cas_blikanie+0x74>)
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	f04f 0400 	mov.w	r4, #0
 8001380:	e882 0018 	stmia.w	r2, {r3, r4}
	//unsigned short prescalerValue = (unsigned short) (SystemCoreClock / 1000) - 1;
	unsigned short prescalerValue = (unsigned short) (16000000 / 1000) - 1;
 8001384:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8001388:	82fb      	strh	r3, [r7, #22]
	//Structure for timer settings
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	// TIM6 clock enable
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 800138a:	2101      	movs	r1, #1
 800138c:	2010      	movs	r0, #16
 800138e:	f7ff fced 	bl	8000d6c <RCC_APB1PeriphClockCmd>
	// Enable the TIM6 gloabal Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = TIM6_IRQn;
 8001392:	232b      	movs	r3, #43	; 0x2b
 8001394:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 800139a:	2302      	movs	r3, #2
 800139c:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800139e:	2301      	movs	r3, #1
 80013a0:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fb3d 	bl	8000a24 <NVIC_Init>
	TIM_TimeBaseStructure.TIM_Period = 999;
 80013aa:	f240 33e7 	movw	r3, #999	; 0x3e7
 80013ae:	60fb      	str	r3, [r7, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	823b      	strh	r3, [r7, #16]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80013b4:	2300      	movs	r3, #0
 80013b6:	817b      	strh	r3, [r7, #10]
	TIM_TimeBaseStructure.TIM_Prescaler = prescalerValue;
 80013b8:	8afb      	ldrh	r3, [r7, #22]
 80013ba:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	4619      	mov	r1, r3
 80013c2:	4809      	ldr	r0, [pc, #36]	; (80013e8 <init_cas_blikanie+0x78>)
 80013c4:	f7ff fcf0 	bl	8000da8 <TIM_TimeBaseInit>
	// TIM Interrupts enable
	TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);
 80013c8:	2201      	movs	r2, #1
 80013ca:	2101      	movs	r1, #1
 80013cc:	4806      	ldr	r0, [pc, #24]	; (80013e8 <init_cas_blikanie+0x78>)
 80013ce:	f7ff fe31 	bl	8001034 <TIM_ITConfig>
	// TIM6 enable counter
	TIM_Cmd(TIM6, ENABLE);
 80013d2:	2101      	movs	r1, #1
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <init_cas_blikanie+0x78>)
 80013d6:	f7ff fd39 	bl	8000e4c <TIM_Cmd>

	return 0;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	371c      	adds	r7, #28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	20000020 	.word	0x20000020
 80013e8:	40001000 	.word	0x40001000

080013ec <TIM6_IRQHandler>:

//spracovanie prerusenia z TIM6, casovaca pre kontrolku
void TIM6_IRQHandler(void)
{
 80013ec:	b598      	push	{r3, r4, r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) == SET)
 80013f0:	2101      	movs	r1, #1
 80013f2:	480c      	ldr	r0, [pc, #48]	; (8001424 <TIM6_IRQHandler+0x38>)
 80013f4:	f7ff fe42 	bl	800107c <TIM_GetITStatus>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d10f      	bne.n	800141e <TIM6_IRQHandler+0x32>
	{
		gTimeStamp++;
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <TIM6_IRQHandler+0x3c>)
 8001400:	cb18      	ldmia	r3, {r3, r4}
 8001402:	3301      	adds	r3, #1
 8001404:	f144 0400 	adc.w	r4, r4, #0
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <TIM6_IRQHandler+0x3c>)
 800140a:	e882 0018 	stmia.w	r2, {r3, r4}
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);//toggle LED PA5
 800140e:	2120      	movs	r1, #32
 8001410:	4806      	ldr	r0, [pc, #24]	; (800142c <TIM6_IRQHandler+0x40>)
 8001412:	f7ff fc31 	bl	8000c78 <GPIO_ToggleBits>
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 8001416:	2101      	movs	r1, #1
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <TIM6_IRQHandler+0x38>)
 800141a:	f7ff fe59 	bl	80010d0 <TIM_ClearITPendingBit>
	}
}
 800141e:	bf00      	nop
 8001420:	bd98      	pop	{r3, r4, r7, pc}
 8001422:	bf00      	nop
 8001424:	40001000 	.word	0x40001000
 8001428:	20000020 	.word	0x20000020
 800142c:	40020000 	.word	0x40020000

08001430 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
  *  To reconfigure the default setting of SystemInit() function, refer to
  *  system_stm32l1xx.c file
  */

  /* TODO - Add your application code here */
	double vzdialenost = 0;
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	f04f 0400 	mov.w	r4, #0
 800143e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	double vzdialenost1 = 0;
 8001442:	f04f 0300 	mov.w	r3, #0
 8001446:	f04f 0400 	mov.w	r4, #0
 800144a:	e887 0018 	stmia.w	r7, {r3, r4}

	init_cas_blikanie();
 800144e:	f7ff ff8f 	bl	8001370 <init_cas_blikanie>
	init_kontrolka();
 8001452:	f7ff ff71 	bl	8001338 <init_kontrolka>
	sensorInit();
 8001456:	f000 f825 	bl	80014a4 <sensorInit>

	forwardSensorMeasure();
 800145a:	f000 f947 	bl	80016ec <forwardSensorMeasure>

  /* Infinite loop */
	while (1)
	{
		for (int i = 0; i < 1000000; i++)
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	e002      	b.n	800146a <main+0x3a>
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	3301      	adds	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	4a0c      	ldr	r2, [pc, #48]	; (80014a0 <main+0x70>)
 800146e:	4293      	cmp	r3, r2
 8001470:	ddf8      	ble.n	8001464 <main+0x34>
		{

		}
		vzdialenost = forwardSensorGetDistance();//183; 70
 8001472:	f000 fa39 	bl	80018e8 <forwardSensorGetDistance>
 8001476:	e9c7 0102 	strd	r0, r1, [r7, #8]
		leftSensorMeasure();
 800147a:	f000 f919 	bl	80016b0 <leftSensorMeasure>

		for (int i = 0; i < 1000000; i++)
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	e002      	b.n	800148a <main+0x5a>
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	3301      	adds	r3, #1
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <main+0x70>)
 800148e:	4293      	cmp	r3, r2
 8001490:	ddf8      	ble.n	8001484 <main+0x54>
		{

		}
		vzdialenost1 = leftSensorGetDistance();//183; 70
 8001492:	f000 f9d5 	bl	8001840 <leftSensorGetDistance>
 8001496:	e9c7 0100 	strd	r0, r1, [r7]
		forwardSensorMeasure();
 800149a:	f000 f927 	bl	80016ec <forwardSensorMeasure>
	}
 800149e:	e7de      	b.n	800145e <main+0x2e>
 80014a0:	000f423f 	.word	0x000f423f

080014a4 <sensorInit>:
#define STM_SYSTEM_CLOCK 16000000

//Functions
//inicializacia senzorov vzdialenosti
void sensorInit(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	sensorInitTriggerTimer();
 80014a8:	f000 f808 	bl	80014bc <sensorInitTriggerTimer>
	sensorInitTriggerPin();
 80014ac:	f000 f83e 	bl	800152c <sensorInitTriggerPin>
	sensorInitCapturePins();
 80014b0:	f000 f8c4 	bl	800163c <sensorInitCapturePins>
	sensorInitCaptureTimer();
 80014b4:	f000 f866 	bl	8001584 <sensorInitCaptureTimer>
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}

080014bc <sensorInitTriggerTimer>:
//inicializacia casovaca, ktory generuje spustaci impulz
void sensorInitTriggerTimer(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
	//vypocet delicky pre periodu 10us
	unsigned short prescalerValue = (unsigned short) (STM_SYSTEM_CLOCK / TRIG_TIM_FREQ) - 1;
 80014c2:	239f      	movs	r3, #159	; 0x9f
 80014c4:	81fb      	strh	r3, [r7, #14]

	//struktura pre zakladny casovac TRIG_TIM
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

	//spustenie hodinovych impulzov pre TRIG_TIM
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 80014c6:	2101      	movs	r1, #1
 80014c8:	2020      	movs	r0, #32
 80014ca:	f7ff fc4f 	bl	8000d6c <RCC_APB1PeriphClockCmd>

	//TRIG_TIM init prerusenie
	sensorInitTriggerTimerInterrup();
 80014ce:	f000 f819 	bl	8001504 <sensorInitTriggerTimerInterrup>

	//init struktura TRIG_TIM
	TIM_TimeBaseStructure.TIM_Period = 1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	607b      	str	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80014da:	2300      	movs	r3, #0
 80014dc:	807b      	strh	r3, [r7, #2]
	TIM_TimeBaseStructure.TIM_Prescaler = prescalerValue;
 80014de:	89fb      	ldrh	r3, [r7, #14]
 80014e0:	803b      	strh	r3, [r7, #0]
	TIM_TimeBaseInit(TRIG_TIM, &TIM_TimeBaseStructure);//zapisanie struktury
 80014e2:	463b      	mov	r3, r7
 80014e4:	4619      	mov	r1, r3
 80014e6:	4806      	ldr	r0, [pc, #24]	; (8001500 <sensorInitTriggerTimer+0x44>)
 80014e8:	f7ff fc5e 	bl	8000da8 <TIM_TimeBaseInit>

	//povolenie preruseni TRIG_TIM
	TIM_ITConfig(TRIG_TIM, TIM_IT_Update, ENABLE);
 80014ec:	2201      	movs	r2, #1
 80014ee:	2101      	movs	r1, #1
 80014f0:	4803      	ldr	r0, [pc, #12]	; (8001500 <sensorInitTriggerTimer+0x44>)
 80014f2:	f7ff fd9f 	bl	8001034 <TIM_ITConfig>
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40001400 	.word	0x40001400

08001504 <sensorInitTriggerTimerInterrup>:
//inicializacia preruseni casovaca, ktory generuje spustaci impulz
void sensorInitTriggerTimerInterrup(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
	//TRIG_TIM struct prerusenie
	NVIC_InitTypeDef NVIC_InitStructure;

	//init struktura prerusenie
	NVIC_InitStructure.NVIC_IRQChannel = TIM7_IRQn;
 800150a:	232c      	movs	r3, #44	; 0x2c
 800150c:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8001512:	2301      	movs	r3, #1
 8001514:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001516:	2301      	movs	r3, #1
 8001518:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);//zapisanie struktury
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fa81 	bl	8000a24 <NVIC_Init>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop

0800152c <sensorInitTriggerPin>:
//inicializacia pinov pre spustanie dialkomerov
void sensorInitTriggerPin(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
	//spusti hodiny pre port C
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);//spusti hodiny pre port C
 8001532:	2101      	movs	r1, #1
 8001534:	2004      	movs	r0, #4
 8001536:	f7ff fbfb 	bl	8000d30 <RCC_AHBPeriphClockCmd>

	//vytvorenie struktury GPIO
	GPIO_InitTypeDef gpioInitStruc;
	gpioInitStruc.GPIO_Mode = GPIO_Mode_OUT;
 800153a:	2301      	movs	r3, #1
 800153c:	713b      	strb	r3, [r7, #4]
	gpioInitStruc.GPIO_OType = GPIO_OType_PP;
 800153e:	2300      	movs	r3, #0
 8001540:	71bb      	strb	r3, [r7, #6]
	gpioInitStruc.GPIO_Speed = GPIO_Speed_400KHz;
 8001542:	2300      	movs	r3, #0
 8001544:	717b      	strb	r3, [r7, #5]

	//zapisanie inicializacnej struktury - left
	gpioInitStruc.GPIO_Pin = LEFT_TRIG_PIN;
 8001546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800154a:	603b      	str	r3, [r7, #0]
	GPIO_Init(TRIG_PORT, &gpioInitStruc);
 800154c:	463b      	mov	r3, r7
 800154e:	4619      	mov	r1, r3
 8001550:	480b      	ldr	r0, [pc, #44]	; (8001580 <sensorInitTriggerPin+0x54>)
 8001552:	f7ff fac7 	bl	8000ae4 <GPIO_Init>

	//zapisanie inicializacnej struktury - right
	gpioInitStruc.GPIO_Pin = RIGHT_TRIG_PIN;
 8001556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155a:	603b      	str	r3, [r7, #0]
	GPIO_Init(TRIG_PORT, &gpioInitStruc);
 800155c:	463b      	mov	r3, r7
 800155e:	4619      	mov	r1, r3
 8001560:	4807      	ldr	r0, [pc, #28]	; (8001580 <sensorInitTriggerPin+0x54>)
 8001562:	f7ff fabf 	bl	8000ae4 <GPIO_Init>

	//zapisanie inicializacnej struktury - forward
	gpioInitStruc.GPIO_Pin = FORWARD_TRIG_PIN;
 8001566:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800156a:	603b      	str	r3, [r7, #0]
	GPIO_Init(TRIG_PORT, &gpioInitStruc);
 800156c:	463b      	mov	r3, r7
 800156e:	4619      	mov	r1, r3
 8001570:	4803      	ldr	r0, [pc, #12]	; (8001580 <sensorInitTriggerPin+0x54>)
 8001572:	f7ff fab7 	bl	8000ae4 <GPIO_Init>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40020800 	.word	0x40020800

08001584 <sensorInitCaptureTimer>:
//inicializacia casovaca pre meranie dlzky impulzu z dialkomera
void sensorInitCaptureTimer(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	//CAPTURE_TIM struct capture
	TIM_ICInitTypeDef  TIM_ICInitStructure;

	//povolenie hodin pre CAPTURE_TIM
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 800158a:	2101      	movs	r1, #1
 800158c:	2002      	movs	r0, #2
 800158e:	f7ff fbed 	bl	8000d6c <RCC_APB1PeriphClockCmd>

	//init CAPTURE_TIM struct capture
	TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_BothEdge;
 8001592:	230a      	movs	r3, #10
 8001594:	807b      	strh	r3, [r7, #2]
	TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001596:	2301      	movs	r3, #1
 8001598:	80bb      	strh	r3, [r7, #4]
	TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	80fb      	strh	r3, [r7, #6]
	TIM_ICInitStructure.TIM_ICFilter = 0x0;
 800159e:	2300      	movs	r3, #0
 80015a0:	813b      	strh	r3, [r7, #8]

	//CAPTURE_TIM nastavenie kanalov
	TIM_ICInitStructure.TIM_Channel = LEFT_TIM_CHANNEL;//left
 80015a2:	2308      	movs	r3, #8
 80015a4:	803b      	strh	r3, [r7, #0]
	TIM_ICInit(CAPTURE_TIM, &TIM_ICInitStructure);
 80015a6:	463b      	mov	r3, r7
 80015a8:	4619      	mov	r1, r3
 80015aa:	4819      	ldr	r0, [pc, #100]	; (8001610 <sensorInitCaptureTimer+0x8c>)
 80015ac:	f7ff fc6e 	bl	8000e8c <TIM_ICInit>
	TIM_ICInitStructure.TIM_Channel = RIGHT_TIM_CHANNEL;//right
 80015b0:	2300      	movs	r3, #0
 80015b2:	803b      	strh	r3, [r7, #0]
	TIM_ICInit(CAPTURE_TIM, &TIM_ICInitStructure);
 80015b4:	463b      	mov	r3, r7
 80015b6:	4619      	mov	r1, r3
 80015b8:	4815      	ldr	r0, [pc, #84]	; (8001610 <sensorInitCaptureTimer+0x8c>)
 80015ba:	f7ff fc67 	bl	8000e8c <TIM_ICInit>
	TIM_ICInitStructure.TIM_Channel = FORWARD_TIM_CHANNEL;//forward
 80015be:	230c      	movs	r3, #12
 80015c0:	803b      	strh	r3, [r7, #0]
	TIM_ICInit(CAPTURE_TIM, &TIM_ICInitStructure);
 80015c2:	463b      	mov	r3, r7
 80015c4:	4619      	mov	r1, r3
 80015c6:	4812      	ldr	r0, [pc, #72]	; (8001610 <sensorInitCaptureTimer+0x8c>)
 80015c8:	f7ff fc60 	bl	8000e8c <TIM_ICInit>

	//nastavenie delicky hodinovych impuzov
	TIM_TimeBaseStructure.TIM_Prescaler = (unsigned short)CAPTURE_CLC_PRESCALER;
 80015cc:	239f      	movs	r3, #159	; 0x9f
 80015ce:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(CAPTURE_TIM, &TIM_TimeBaseStructure);
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	4619      	mov	r1, r3
 80015d6:	480e      	ldr	r0, [pc, #56]	; (8001610 <sensorInitCaptureTimer+0x8c>)
 80015d8:	f7ff fbe6 	bl	8000da8 <TIM_TimeBaseInit>

	//CAPTURE_TIM povolenie pocitadla
	TIM_Cmd(CAPTURE_TIM, ENABLE);
 80015dc:	2101      	movs	r1, #1
 80015de:	480c      	ldr	r0, [pc, #48]	; (8001610 <sensorInitCaptureTimer+0x8c>)
 80015e0:	f7ff fc34 	bl	8000e4c <TIM_Cmd>

	//povolenie CC poziadavky na prerusenie
	TIM_ITConfig(CAPTURE_TIM, LEFT_TIM_CC, ENABLE);//left
 80015e4:	2201      	movs	r2, #1
 80015e6:	2108      	movs	r1, #8
 80015e8:	4809      	ldr	r0, [pc, #36]	; (8001610 <sensorInitCaptureTimer+0x8c>)
 80015ea:	f7ff fd23 	bl	8001034 <TIM_ITConfig>
	TIM_ITConfig(CAPTURE_TIM, RIGHT_TIM_CC, ENABLE);//right
 80015ee:	2201      	movs	r2, #1
 80015f0:	2102      	movs	r1, #2
 80015f2:	4807      	ldr	r0, [pc, #28]	; (8001610 <sensorInitCaptureTimer+0x8c>)
 80015f4:	f7ff fd1e 	bl	8001034 <TIM_ITConfig>
	TIM_ITConfig(CAPTURE_TIM, FORWARD_TIM_CC, ENABLE);//forward
 80015f8:	2201      	movs	r2, #1
 80015fa:	2110      	movs	r1, #16
 80015fc:	4804      	ldr	r0, [pc, #16]	; (8001610 <sensorInitCaptureTimer+0x8c>)
 80015fe:	f7ff fd19 	bl	8001034 <TIM_ITConfig>

	//CAPTURE_TIM prerusenie init
	sensorInitCaptureTimerInterrup();
 8001602:	f000 f807 	bl	8001614 <sensorInitCaptureTimerInterrup>

	//mozno to tam chyba TEMP
	//povolenie preruseni CAPTURE_TIM
	//TIM_ITConfig(CAPTURE_TIM, TIM_IT_Update, ENABLE);
}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40000400 	.word	0x40000400

08001614 <sensorInitCaptureTimerInterrup>:
//inicializacia preruseni casovaca pre meranie dlzky impulzu z dialkomera
void sensorInitCaptureTimerInterrup(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
	//CAPTURE_TIM struct prerusenie
	NVIC_InitTypeDef NVIC_InitStructure;

	//init TIM struct prerusenie
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 800161a:	231d      	movs	r3, #29
 800161c:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 8001622:	2302      	movs	r3, #2
 8001624:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001626:	2301      	movs	r3, #1
 8001628:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff f9f9 	bl	8000a24 <NVIC_Init>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop

0800163c <sensorInitCapturePins>:
//inicializacia pinu pre meranie dlzky impulzu z dialkomera
void sensorInitCapturePins(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
	//GPIO struct
	GPIO_InitTypeDef GPIO_InitStructure;

	//GPIOB povolenie hodin
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001642:	2101      	movs	r1, #1
 8001644:	2001      	movs	r0, #1
 8001646:	f7ff fb73 	bl	8000d30 <RCC_AHBPeriphClockCmd>

	//CAPTURE_TIM struct init
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 800164a:	2302      	movs	r3, #2
 800164c:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 800164e:	2303      	movs	r3, #3
 8001650:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001652:	2300      	movs	r3, #0
 8001654:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8001656:	2301      	movs	r3, #1
 8001658:	71fb      	strb	r3, [r7, #7]

	//inicializacia pinu left
	GPIO_InitStructure.GPIO_Pin   = LEFT_CAP_PIN;
 800165a:	2301      	movs	r3, #1
 800165c:	603b      	str	r3, [r7, #0]
	GPIO_Init(CAPTURE_PORT, &GPIO_InitStructure);//zapisanie struktury
 800165e:	463b      	mov	r3, r7
 8001660:	4619      	mov	r1, r3
 8001662:	4812      	ldr	r0, [pc, #72]	; (80016ac <sensorInitCapturePins+0x70>)
 8001664:	f7ff fa3e 	bl	8000ae4 <GPIO_Init>
	GPIO_PinAFConfig(CAPTURE_PORT, LEFT_CAP_PINSOURCE, GPIO_AF_TIM3);
 8001668:	2202      	movs	r2, #2
 800166a:	2100      	movs	r1, #0
 800166c:	480f      	ldr	r0, [pc, #60]	; (80016ac <sensorInitCapturePins+0x70>)
 800166e:	f7ff fb17 	bl	8000ca0 <GPIO_PinAFConfig>
	//inicializacia pinu right
	GPIO_InitStructure.GPIO_Pin   = RIGHT_CAP_PIN;
 8001672:	2310      	movs	r3, #16
 8001674:	603b      	str	r3, [r7, #0]
	GPIO_Init(CAPTURE_PORT, &GPIO_InitStructure);//zapisanie struktury
 8001676:	463b      	mov	r3, r7
 8001678:	4619      	mov	r1, r3
 800167a:	480c      	ldr	r0, [pc, #48]	; (80016ac <sensorInitCapturePins+0x70>)
 800167c:	f7ff fa32 	bl	8000ae4 <GPIO_Init>
	GPIO_PinAFConfig(CAPTURE_PORT, RIGHT_CAP_PINSOURCE, GPIO_AF_TIM3);
 8001680:	2202      	movs	r2, #2
 8001682:	2104      	movs	r1, #4
 8001684:	4809      	ldr	r0, [pc, #36]	; (80016ac <sensorInitCapturePins+0x70>)
 8001686:	f7ff fb0b 	bl	8000ca0 <GPIO_PinAFConfig>
	//inicializacia pinu forward
	GPIO_InitStructure.GPIO_Pin   = FORWARD_CAP_PIN;
 800168a:	2302      	movs	r3, #2
 800168c:	603b      	str	r3, [r7, #0]
	GPIO_Init(CAPTURE_PORT, &GPIO_InitStructure);//zapisanie struktury
 800168e:	463b      	mov	r3, r7
 8001690:	4619      	mov	r1, r3
 8001692:	4806      	ldr	r0, [pc, #24]	; (80016ac <sensorInitCapturePins+0x70>)
 8001694:	f7ff fa26 	bl	8000ae4 <GPIO_Init>
	GPIO_PinAFConfig(CAPTURE_PORT, FORWARD_CAP_PINSOURCE, GPIO_AF_TIM3);
 8001698:	2202      	movs	r2, #2
 800169a:	2101      	movs	r1, #1
 800169c:	4803      	ldr	r0, [pc, #12]	; (80016ac <sensorInitCapturePins+0x70>)
 800169e:	f7ff faff 	bl	8000ca0 <GPIO_PinAFConfig>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40020400 	.word	0x40020400

080016b0 <leftSensorMeasure>:

//spustenie merania laveho dialkomeru
void leftSensorMeasure(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 80016b4:	2101      	movs	r1, #1
 80016b6:	4808      	ldr	r0, [pc, #32]	; (80016d8 <leftSensorMeasure+0x28>)
 80016b8:	f7ff fbc8 	bl	8000e4c <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(GPIOC, LEFT_TRIG_PIN, Bit_SET);
 80016bc:	2201      	movs	r2, #1
 80016be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c2:	4806      	ldr	r0, [pc, #24]	; (80016dc <leftSensorMeasure+0x2c>)
 80016c4:	f7ff fac0 	bl	8000c48 <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	leftCaptureStep = 0;
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <leftSensorMeasure+0x30>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = leftSensorCaptureHandler;
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <leftSensorMeasure+0x34>)
 80016d0:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <leftSensorMeasure+0x38>)
 80016d2:	601a      	str	r2, [r3, #0]
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40001400 	.word	0x40001400
 80016dc:	40020800 	.word	0x40020800
 80016e0:	20000028 	.word	0x20000028
 80016e4:	2000003c 	.word	0x2000003c
 80016e8:	080017cd 	.word	0x080017cd

080016ec <forwardSensorMeasure>:
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = rightSensorCaptureHandler;
}
//spustenie memrania predneho dialkomeru
void forwardSensorMeasure(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 80016f0:	2101      	movs	r1, #1
 80016f2:	4808      	ldr	r0, [pc, #32]	; (8001714 <forwardSensorMeasure+0x28>)
 80016f4:	f7ff fbaa 	bl	8000e4c <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(GPIOC, FORWARD_TRIG_PIN, Bit_SET);
 80016f8:	2201      	movs	r2, #1
 80016fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016fe:	4806      	ldr	r0, [pc, #24]	; (8001718 <forwardSensorMeasure+0x2c>)
 8001700:	f7ff faa2 	bl	8000c48 <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	forwardCaptureStep = 0;
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <forwardSensorMeasure+0x30>)
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = forwardSensorCaptureHandler;
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <forwardSensorMeasure+0x34>)
 800170c:	4a05      	ldr	r2, [pc, #20]	; (8001724 <forwardSensorMeasure+0x38>)
 800170e:	601a      	str	r2, [r3, #0]
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40001400 	.word	0x40001400
 8001718:	40020800 	.word	0x40020800
 800171c:	2000002c 	.word	0x2000002c
 8001720:	2000003c 	.word	0x2000003c
 8001724:	08001831 	.word	0x08001831

08001728 <TIM7_IRQHandler>:

//handlery bude treba dat do suboru, ktory bude urcovat veci specificke pre dany hardver
//samotne funkcie ktore ma vykonat ale ostanu tu
//spracovanie prerusenia z TRIG_TIM, casovac pre spustaci impulz dialkomeru
void TIM7_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TRIG_TIM, TIM_IT_Update) == SET)
 800172c:	2101      	movs	r1, #1
 800172e:	481e      	ldr	r0, [pc, #120]	; (80017a8 <TIM7_IRQHandler+0x80>)
 8001730:	f7ff fca4 	bl	800107c <TIM_GetITStatus>
 8001734:	4603      	mov	r3, r0
 8001736:	2b01      	cmp	r3, #1
 8001738:	d133      	bne.n	80017a2 <TIM7_IRQHandler+0x7a>
	{
		TIM_Cmd(TRIG_TIM, DISABLE);
 800173a:	2100      	movs	r1, #0
 800173c:	481a      	ldr	r0, [pc, #104]	; (80017a8 <TIM7_IRQHandler+0x80>)
 800173e:	f7ff fb85 	bl	8000e4c <TIM_Cmd>
		//vypnutie impulzu na prislusnom spustacom pine
		if (GPIO_ReadOutputDataBit(TRIG_PORT, LEFT_TRIG_PIN) == 1)
 8001742:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001746:	4819      	ldr	r0, [pc, #100]	; (80017ac <TIM7_IRQHandler+0x84>)
 8001748:	f7ff fa62 	bl	8000c10 <GPIO_ReadOutputDataBit>
 800174c:	4603      	mov	r3, r0
 800174e:	2b01      	cmp	r3, #1
 8001750:	d106      	bne.n	8001760 <TIM7_IRQHandler+0x38>
		{
			GPIO_WriteBit(TRIG_PORT, LEFT_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu left
 8001752:	2200      	movs	r2, #0
 8001754:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001758:	4814      	ldr	r0, [pc, #80]	; (80017ac <TIM7_IRQHandler+0x84>)
 800175a:	f7ff fa75 	bl	8000c48 <GPIO_WriteBit>
 800175e:	e01c      	b.n	800179a <TIM7_IRQHandler+0x72>
		}
		else if (GPIO_ReadOutputDataBit(TRIG_PORT, RIGHT_TRIG_PIN) == 1)
 8001760:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001764:	4811      	ldr	r0, [pc, #68]	; (80017ac <TIM7_IRQHandler+0x84>)
 8001766:	f7ff fa53 	bl	8000c10 <GPIO_ReadOutputDataBit>
 800176a:	4603      	mov	r3, r0
 800176c:	2b01      	cmp	r3, #1
 800176e:	d106      	bne.n	800177e <TIM7_IRQHandler+0x56>
		{
			GPIO_WriteBit(TRIG_PORT, RIGHT_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu right
 8001770:	2200      	movs	r2, #0
 8001772:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001776:	480d      	ldr	r0, [pc, #52]	; (80017ac <TIM7_IRQHandler+0x84>)
 8001778:	f7ff fa66 	bl	8000c48 <GPIO_WriteBit>
 800177c:	e00d      	b.n	800179a <TIM7_IRQHandler+0x72>
		}
		else if (GPIO_ReadOutputDataBit(TRIG_PORT, FORWARD_TRIG_PIN) == 1)
 800177e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001782:	480a      	ldr	r0, [pc, #40]	; (80017ac <TIM7_IRQHandler+0x84>)
 8001784:	f7ff fa44 	bl	8000c10 <GPIO_ReadOutputDataBit>
 8001788:	4603      	mov	r3, r0
 800178a:	2b01      	cmp	r3, #1
 800178c:	d105      	bne.n	800179a <TIM7_IRQHandler+0x72>
		{
			GPIO_WriteBit(TRIG_PORT, FORWARD_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu forward
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <TIM7_IRQHandler+0x84>)
 8001796:	f7ff fa57 	bl	8000c48 <GPIO_WriteBit>
		}
		TIM_ClearITPendingBit(TRIG_TIM, TIM_IT_Update);
 800179a:	2101      	movs	r1, #1
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <TIM7_IRQHandler+0x80>)
 800179e:	f7ff fc97 	bl	80010d0 <TIM_ClearITPendingBit>
	}
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40001400 	.word	0x40001400
 80017ac:	40020800 	.word	0x40020800

080017b0 <TIM3_IRQHandler>:
//spracovanie prerusenia z TIM5, casovac pre meranie dlzky impulzu z dialialkomerov
void TIM3_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	//spustenie spracovania prerusenia CAPTURE_TIM pre prislusny senzor
	if (sensorCaptureHandler != 0)
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <TIM3_IRQHandler+0x18>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <TIM3_IRQHandler+0x12>
	{
		sensorCaptureHandler();
 80017bc:	4b02      	ldr	r3, [pc, #8]	; (80017c8 <TIM3_IRQHandler+0x18>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4798      	blx	r3
	}
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	2000003c 	.word	0x2000003c

080017cc <leftSensorCaptureHandler>:
//meranie dlzky impulzu lavy senzor
void leftSensorCaptureHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, LEFT_TIM_CC) != RESET)
 80017d0:	2108      	movs	r1, #8
 80017d2:	4813      	ldr	r0, [pc, #76]	; (8001820 <leftSensorCaptureHandler+0x54>)
 80017d4:	f7ff fc52 	bl	800107c <TIM_GetITStatus>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d01d      	beq.n	800181a <leftSensorCaptureHandler+0x4e>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, LEFT_TIM_CC);
 80017de:	2108      	movs	r1, #8
 80017e0:	480f      	ldr	r0, [pc, #60]	; (8001820 <leftSensorCaptureHandler+0x54>)
 80017e2:	f7ff fc75 	bl	80010d0 <TIM_ClearITPendingBit>

		if(leftCaptureStep == 0)
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <leftSensorCaptureHandler+0x58>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10a      	bne.n	8001804 <leftSensorCaptureHandler+0x38>
		{
			//zachyt cas nabeznej hrany
			leftRisingTime = LEFT_TIM_GETCAPTURE;
 80017ee:	480c      	ldr	r0, [pc, #48]	; (8001820 <leftSensorCaptureHandler+0x54>)
 80017f0:	f7ff fba0 	bl	8000f34 <TIM_GetCapture3>
 80017f4:	4603      	mov	r3, r0
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <leftSensorCaptureHandler+0x5c>)
 80017fa:	801a      	strh	r2, [r3, #0]
			leftCaptureStep = 1;
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <leftSensorCaptureHandler+0x58>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]
		{
			//zachyt cas dobeznej hrany
			rightFallingTime = LEFT_TIM_GETCAPTURE;
		}
	}
}
 8001802:	e00a      	b.n	800181a <leftSensorCaptureHandler+0x4e>
		{
			//zachyt cas nabeznej hrany
			leftRisingTime = LEFT_TIM_GETCAPTURE;
			leftCaptureStep = 1;
		}
		else if(leftCaptureStep == 1)
 8001804:	4b07      	ldr	r3, [pc, #28]	; (8001824 <leftSensorCaptureHandler+0x58>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d106      	bne.n	800181a <leftSensorCaptureHandler+0x4e>
		{
			//zachyt cas dobeznej hrany
			rightFallingTime = LEFT_TIM_GETCAPTURE;
 800180c:	4804      	ldr	r0, [pc, #16]	; (8001820 <leftSensorCaptureHandler+0x54>)
 800180e:	f7ff fb91 	bl	8000f34 <TIM_GetCapture3>
 8001812:	4603      	mov	r3, r0
 8001814:	b29a      	uxth	r2, r3
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <leftSensorCaptureHandler+0x60>)
 8001818:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40000400 	.word	0x40000400
 8001824:	20000028 	.word	0x20000028
 8001828:	20000030 	.word	0x20000030
 800182c:	20000036 	.word	0x20000036

08001830 <forwardSensorCaptureHandler>:
{

}
//meranie dlzky impulzu lavy senzor
void forwardSensorCaptureHandler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	0000      	movs	r0, r0
	...

08001840 <leftSensorGetDistance>:

//prevzatie nameranej vzdialenosti z laveho dialkomeru
double leftSensorGetDistance(void)
{
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
	uint16_t leftDistanceTime = 0;//konecna dlzka impulzu z dialkomeru
 8001846:	2300      	movs	r3, #0
 8001848:	81fb      	strh	r3, [r7, #14]
	double distance = 0;//konecna vzdialenost
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	f04f 0400 	mov.w	r4, #0
 8001852:	e887 0018 	stmia.w	r7, {r3, r4}

	//vypocet trvania impulzu
	leftDistanceTime = computeEchoDuration(leftRisingTime, leftFallingTime);
 8001856:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <leftSensorGetDistance+0x90>)
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	b29a      	uxth	r2, r3
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <leftSensorGetDistance+0x94>)
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	b29b      	uxth	r3, r3
 8001862:	4619      	mov	r1, r3
 8001864:	4610      	mov	r0, r2
 8001866:	f000 f891 	bl	800198c <computeEchoDuration>
 800186a:	4603      	mov	r3, r0
 800186c:	81fb      	strh	r3, [r7, #14]

	//vypocet vzdialenosti z laveho senzoru
	distance = leftDistanceTime/DISTANCE_CLC_CONST/DISTANCE_ENV_CONST;
 800186e:	89fb      	ldrh	r3, [r7, #14]
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fdd7 	bl	8000424 <__aeabi_i2d>
 8001876:	a314      	add	r3, pc, #80	; (adr r3, 80018c8 <leftSensorGetDistance+0x88>)
 8001878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187c:	f7fe ff62 	bl	8000744 <__aeabi_ddiv>
 8001880:	4603      	mov	r3, r0
 8001882:	460c      	mov	r4, r1
 8001884:	4618      	mov	r0, r3
 8001886:	4621      	mov	r1, r4
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <leftSensorGetDistance+0x98>)
 800188e:	f7fe ff59 	bl	8000744 <__aeabi_ddiv>
 8001892:	4603      	mov	r3, r0
 8001894:	460c      	mov	r4, r1
 8001896:	e887 0018 	stmia.w	r7, {r3, r4}
	if (distance > DISTANCE_MAX)
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <leftSensorGetDistance+0x9c>)
 80018a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018a4:	f7ff f8b4 	bl	8000a10 <__aeabi_dcmpgt>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <leftSensorGetDistance+0x76>
	{
		//senzor nic nezachytil
		return -1;
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	4c0b      	ldr	r4, [pc, #44]	; (80018e0 <leftSensorGetDistance+0xa0>)
 80018b4:	e001      	b.n	80018ba <leftSensorGetDistance+0x7a>
	}
	else
	{
		return distance;
 80018b6:	e897 0018 	ldmia.w	r7, {r3, r4}
	}
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	4621      	mov	r1, r4
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd90      	pop	{r4, r7, pc}
 80018c4:	f3af 8000 	nop.w
 80018c8:	9999999a 	.word	0x9999999a
 80018cc:	3fb99999 	.word	0x3fb99999
 80018d0:	20000030 	.word	0x20000030
 80018d4:	20000034 	.word	0x20000034
 80018d8:	404d0000 	.word	0x404d0000
 80018dc:	407f4000 	.word	0x407f4000
 80018e0:	bff00000 	.word	0xbff00000
 80018e4:	00000000 	.word	0x00000000

080018e8 <forwardSensorGetDistance>:
		return distance;
	}
}
//prevzatie nameranej vzdialenosti z predneho dialkomeru
double forwardSensorGetDistance(void)
{
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
	uint16_t forwardDistanceTime = 0;//konecna dlzka impulzu z dialkomeru
 80018ee:	2300      	movs	r3, #0
 80018f0:	81fb      	strh	r3, [r7, #14]
	double distance = 0;//konecna vzdialenost
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	f04f 0400 	mov.w	r4, #0
 80018fa:	e887 0018 	stmia.w	r7, {r3, r4}

	//vypocet trvania impulzu
	forwardDistanceTime = computeEchoDuration(forwardRisingTime, forwardFallingTime);
 80018fe:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <forwardSensorGetDistance+0x90>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	b29a      	uxth	r2, r3
 8001904:	4b1d      	ldr	r3, [pc, #116]	; (800197c <forwardSensorGetDistance+0x94>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	b29b      	uxth	r3, r3
 800190a:	4619      	mov	r1, r3
 800190c:	4610      	mov	r0, r2
 800190e:	f000 f83d 	bl	800198c <computeEchoDuration>
 8001912:	4603      	mov	r3, r0
 8001914:	81fb      	strh	r3, [r7, #14]

	//vypocet vzdialenosti z predneho senzoru
	distance = forwardDistanceTime/DISTANCE_CLC_CONST/DISTANCE_ENV_CONST;
 8001916:	89fb      	ldrh	r3, [r7, #14]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fd83 	bl	8000424 <__aeabi_i2d>
 800191e:	a314      	add	r3, pc, #80	; (adr r3, 8001970 <forwardSensorGetDistance+0x88>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe ff0e 	bl	8000744 <__aeabi_ddiv>
 8001928:	4603      	mov	r3, r0
 800192a:	460c      	mov	r4, r1
 800192c:	4618      	mov	r0, r3
 800192e:	4621      	mov	r1, r4
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <forwardSensorGetDistance+0x98>)
 8001936:	f7fe ff05 	bl	8000744 <__aeabi_ddiv>
 800193a:	4603      	mov	r3, r0
 800193c:	460c      	mov	r4, r1
 800193e:	e887 0018 	stmia.w	r7, {r3, r4}
	if (distance > DISTANCE_MAX)
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <forwardSensorGetDistance+0x9c>)
 8001948:	e9d7 0100 	ldrd	r0, r1, [r7]
 800194c:	f7ff f860 	bl	8000a10 <__aeabi_dcmpgt>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <forwardSensorGetDistance+0x76>
	{
		//senzor nic nezachytil
		return -1;
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	4c0b      	ldr	r4, [pc, #44]	; (8001988 <forwardSensorGetDistance+0xa0>)
 800195c:	e001      	b.n	8001962 <forwardSensorGetDistance+0x7a>
	}
	else
	{
		return distance;
 800195e:	e897 0018 	ldmia.w	r7, {r3, r4}
	}
}
 8001962:	4618      	mov	r0, r3
 8001964:	4621      	mov	r1, r4
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	bd90      	pop	{r4, r7, pc}
 800196c:	f3af 8000 	nop.w
 8001970:	9999999a 	.word	0x9999999a
 8001974:	3fb99999 	.word	0x3fb99999
 8001978:	20000032 	.word	0x20000032
 800197c:	20000038 	.word	0x20000038
 8001980:	404d0000 	.word	0x404d0000
 8001984:	407f4000 	.word	0x407f4000
 8001988:	bff00000 	.word	0xbff00000

0800198c <computeEchoDuration>:

//vypocet trvania impulzu ozveny z dialkomera
uint16_t computeEchoDuration(uint16_t risingTime, uint16_t fallingTime)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	460a      	mov	r2, r1
 8001996:	80fb      	strh	r3, [r7, #6]
 8001998:	4613      	mov	r3, r2
 800199a:	80bb      	strh	r3, [r7, #4]
	uint16_t distanceTime = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	81fb      	strh	r3, [r7, #14]
	//vypocet podla toho ci nabezna alebo dobezna je vacsie cislo
	if (fallingTime > risingTime)
 80019a0:	88ba      	ldrh	r2, [r7, #4]
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d906      	bls.n	80019b6 <computeEchoDuration+0x2a>
	{
		distanceTime = (fallingTime - risingTime) - 1;
 80019a8:	88ba      	ldrh	r2, [r7, #4]
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3b01      	subs	r3, #1
 80019b2:	81fb      	strh	r3, [r7, #14]
 80019b4:	e00c      	b.n	80019d0 <computeEchoDuration+0x44>
	}
	else if (fallingTime < risingTime)
 80019b6:	88ba      	ldrh	r2, [r7, #4]
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d206      	bcs.n	80019cc <computeEchoDuration+0x40>
	{
		distanceTime = ((CAPTURE_COUNT_MAX - risingTime) + fallingTime) - 1;
 80019be:	88ba      	ldrh	r2, [r7, #4]
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	3b02      	subs	r3, #2
 80019c8:	81fb      	strh	r3, [r7, #14]
 80019ca:	e001      	b.n	80019d0 <computeEchoDuration+0x44>
	}
	else
	{
		distanceTime = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	81fb      	strh	r3, [r7, #14]
	}

	return distanceTime;
 80019d0:	89fb      	ldrh	r3, [r7, #14]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80019e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80019e2:	e003      	b.n	80019ec <LoopCopyDataInit>

080019e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 80019e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80019e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80019ea:	3104      	adds	r1, #4

080019ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80019ec:	480b      	ldr	r0, [pc, #44]	; (8001a1c <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 80019f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80019f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80019f4:	d3f6      	bcc.n	80019e4 <CopyDataInit>
  ldr r2, =_sbss
 80019f6:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 80019f8:	e002      	b.n	8001a00 <LoopFillZerobss>

080019fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80019fc:	f842 3b04 	str.w	r3, [r2], #4

08001a00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8001a02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a04:	d3f9      	bcc.n	80019fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a06:	f000 f841 	bl	8001a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a0a:	f000 f903 	bl	8001c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a0e:	f7ff fd0f 	bl	8001430 <main>
  bx lr
 8001a12:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a14:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001a18:	08001c80 	.word	0x08001c80
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a1c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a20:	20000000 	.word	0x20000000
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8001a24:	20000000 	.word	0x20000000
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8001a28:	20000040 	.word	0x20000040

08001a2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC1_IRQHandler>
	...

08001a30 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001a40:	e7fe      	b.n	8001a40 <HardFault_Handler+0x4>
 8001a42:	bf00      	nop

08001a44 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001a48:	e7fe      	b.n	8001a48 <MemManage_Handler+0x4>
 8001a4a:	bf00      	nop

08001a4c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001a50:	e7fe      	b.n	8001a50 <BusFault_Handler+0x4>
 8001a52:	bf00      	nop

08001a54 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001a58:	e7fe      	b.n	8001a58 <UsageFault_Handler+0x4>
 8001a5a:	bf00      	nop

08001a5c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001a90:	4a15      	ldr	r2, [pc, #84]	; (8001ae8 <SystemInit+0x5c>)
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <SystemInit+0x5c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001a9c:	4912      	ldr	r1, [pc, #72]	; (8001ae8 <SystemInit+0x5c>)
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <SystemInit+0x5c>)
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <SystemInit+0x60>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001aa8:	4a0f      	ldr	r2, [pc, #60]	; (8001ae8 <SystemInit+0x5c>)
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <SystemInit+0x5c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001ab2:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001ab6:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <SystemInit+0x5c>)
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <SystemInit+0x5c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac2:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001ac4:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <SystemInit+0x5c>)
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <SystemInit+0x5c>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001ace:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <SystemInit+0x5c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8001ad6:	f000 f80d 	bl	8001af4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <SystemInit+0x64>)
 8001adc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ae0:	609a      	str	r2, [r3, #8]
#endif
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	88ffc00c 	.word	0x88ffc00c
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	2300      	movs	r3, #0
 8001b00:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001b02:	4a41      	ldr	r2, [pc, #260]	; (8001c08 <SetSysClock+0x114>)
 8001b04:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <SetSysClock+0x114>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001b0e:	4b3e      	ldr	r3, [pc, #248]	; (8001c08 <SetSysClock+0x114>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d103      	bne.n	8001b2c <SetSysClock+0x38>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b2a:	d1f0      	bne.n	8001b0e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001b2c:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <SetSysClock+0x114>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	e001      	b.n	8001b42 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d15a      	bne.n	8001bfe <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001b48:	4a30      	ldr	r2, [pc, #192]	; (8001c0c <SetSysClock+0x118>)
 8001b4a:	4b30      	ldr	r3, [pc, #192]	; (8001c0c <SetSysClock+0x118>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f043 0304 	orr.w	r3, r3, #4
 8001b52:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8001b54:	4a2d      	ldr	r2, [pc, #180]	; (8001c0c <SetSysClock+0x118>)
 8001b56:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <SetSysClock+0x118>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f043 0302 	orr.w	r3, r3, #2
 8001b5e:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8001b60:	4a2a      	ldr	r2, [pc, #168]	; (8001c0c <SetSysClock+0x118>)
 8001b62:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <SetSysClock+0x118>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001b6c:	4a26      	ldr	r2, [pc, #152]	; (8001c08 <SetSysClock+0x114>)
 8001b6e:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <SetSysClock+0x114>)
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b76:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8001b78:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <SetSysClock+0x11c>)
 8001b7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b7e:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8001b80:	bf00      	nop
 8001b82:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <SetSysClock+0x11c>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f9      	bne.n	8001b82 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001b8e:	4a1e      	ldr	r2, [pc, #120]	; (8001c08 <SetSysClock+0x114>)
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <SetSysClock+0x114>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001b96:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <SetSysClock+0x114>)
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <SetSysClock+0x114>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001b9e:	4a1a      	ldr	r2, [pc, #104]	; (8001c08 <SetSysClock+0x114>)
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <SetSysClock+0x114>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8001ba6:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <SetSysClock+0x114>)
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <SetSysClock+0x114>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001bb0:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8001bb2:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <SetSysClock+0x114>)
 8001bb4:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <SetSysClock+0x114>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8001bbc:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001bbe:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <SetSysClock+0x114>)
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <SetSysClock+0x114>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bc8:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001bca:	bf00      	nop
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <SetSysClock+0x114>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f9      	beq.n	8001bcc <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001bd8:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <SetSysClock+0x114>)
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <SetSysClock+0x114>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f023 0303 	bic.w	r3, r3, #3
 8001be2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001be4:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <SetSysClock+0x114>)
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <SetSysClock+0x114>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f043 0303 	orr.w	r3, r3, #3
 8001bee:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001bf0:	bf00      	nop
 8001bf2:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <SetSysClock+0x114>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d1f9      	bne.n	8001bf2 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40023c00 	.word	0x40023c00
 8001c10:	40007000 	.word	0x40007000

08001c14 <__libc_init_array>:
 8001c14:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <__libc_init_array+0x3c>)
 8001c16:	b570      	push	{r4, r5, r6, lr}
 8001c18:	461e      	mov	r6, r3
 8001c1a:	4c0e      	ldr	r4, [pc, #56]	; (8001c54 <__libc_init_array+0x40>)
 8001c1c:	2500      	movs	r5, #0
 8001c1e:	1ae4      	subs	r4, r4, r3
 8001c20:	10a4      	asrs	r4, r4, #2
 8001c22:	42a5      	cmp	r5, r4
 8001c24:	d004      	beq.n	8001c30 <__libc_init_array+0x1c>
 8001c26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c2a:	4798      	blx	r3
 8001c2c:	3501      	adds	r5, #1
 8001c2e:	e7f8      	b.n	8001c22 <__libc_init_array+0xe>
 8001c30:	f000 f816 	bl	8001c60 <_init>
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <__libc_init_array+0x44>)
 8001c36:	4c09      	ldr	r4, [pc, #36]	; (8001c5c <__libc_init_array+0x48>)
 8001c38:	461e      	mov	r6, r3
 8001c3a:	1ae4      	subs	r4, r4, r3
 8001c3c:	10a4      	asrs	r4, r4, #2
 8001c3e:	2500      	movs	r5, #0
 8001c40:	42a5      	cmp	r5, r4
 8001c42:	d004      	beq.n	8001c4e <__libc_init_array+0x3a>
 8001c44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c48:	4798      	blx	r3
 8001c4a:	3501      	adds	r5, #1
 8001c4c:	e7f8      	b.n	8001c40 <__libc_init_array+0x2c>
 8001c4e:	bd70      	pop	{r4, r5, r6, pc}
 8001c50:	08001c78 	.word	0x08001c78
 8001c54:	08001c78 	.word	0x08001c78
 8001c58:	08001c78 	.word	0x08001c78
 8001c5c:	08001c7c 	.word	0x08001c7c

08001c60 <_init>:
 8001c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c62:	bf00      	nop
 8001c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c66:	bc08      	pop	{r3}
 8001c68:	469e      	mov	lr, r3
 8001c6a:	4770      	bx	lr

08001c6c <_fini>:
 8001c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c6e:	bf00      	nop
 8001c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c72:	bc08      	pop	{r3}
 8001c74:	469e      	mov	lr, r3
 8001c76:	4770      	bx	lr
