
vrs_projekt_bug0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dd4  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003f18  08003f18  00013f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003f58  08003f58  00013f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003f5c  08003f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08003f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ac  20000020  08003f7c  00020020  2**3
                  ALLOC
  7 ._user_heap_stack 00000400  200000cc  08003f7c  000200cc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000820e  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000016ca  00000000  00000000  00028253  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a80  00000000  00000000  00029920  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000990  00000000  00000000  0002a3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003b24  00000000  00000000  0002ad30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002c9b  00000000  00000000  0002e854  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  000314ef  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002bf4  00000000  00000000  00031570  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00034164  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000020 	.word	0x20000020
 800015c:	00000000 	.word	0x00000000
 8000160:	08003efc 	.word	0x08003efc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000024 	.word	0x20000024
 800017c:	08003efc 	.word	0x08003efc

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	bf14      	ite	ne
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e720      	b.n	80002c4 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aedc 	beq.w	8000272 <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6c1      	b.n	8000272 <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <__gedf2>:
 8000914:	f04f 3cff 	mov.w	ip, #4294967295
 8000918:	e006      	b.n	8000928 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__ledf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	e002      	b.n	8000928 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__cmpdf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	f84d cd04 	str.w	ip, [sp, #-4]!
 800092c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000930:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000934:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000938:	bf18      	it	ne
 800093a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093e:	d01b      	beq.n	8000978 <__cmpdf2+0x54>
 8000940:	b001      	add	sp, #4
 8000942:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000946:	bf0c      	ite	eq
 8000948:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800094c:	ea91 0f03 	teqne	r1, r3
 8000950:	bf02      	ittt	eq
 8000952:	ea90 0f02 	teqeq	r0, r2
 8000956:	2000      	moveq	r0, #0
 8000958:	4770      	bxeq	lr
 800095a:	f110 0f00 	cmn.w	r0, #0
 800095e:	ea91 0f03 	teq	r1, r3
 8000962:	bf58      	it	pl
 8000964:	4299      	cmppl	r1, r3
 8000966:	bf08      	it	eq
 8000968:	4290      	cmpeq	r0, r2
 800096a:	bf2c      	ite	cs
 800096c:	17d8      	asrcs	r0, r3, #31
 800096e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000972:	f040 0001 	orr.w	r0, r0, #1
 8000976:	4770      	bx	lr
 8000978:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800097c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000980:	d102      	bne.n	8000988 <__cmpdf2+0x64>
 8000982:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000986:	d107      	bne.n	8000998 <__cmpdf2+0x74>
 8000988:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d1d6      	bne.n	8000940 <__cmpdf2+0x1c>
 8000992:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000996:	d0d3      	beq.n	8000940 <__cmpdf2+0x1c>
 8000998:	f85d 0b04 	ldr.w	r0, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <__aeabi_cdrcmple>:
 80009a0:	4684      	mov	ip, r0
 80009a2:	4610      	mov	r0, r2
 80009a4:	4662      	mov	r2, ip
 80009a6:	468c      	mov	ip, r1
 80009a8:	4619      	mov	r1, r3
 80009aa:	4663      	mov	r3, ip
 80009ac:	e000      	b.n	80009b0 <__aeabi_cdcmpeq>
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdcmpeq>:
 80009b0:	b501      	push	{r0, lr}
 80009b2:	f7ff ffb7 	bl	8000924 <__cmpdf2>
 80009b6:	2800      	cmp	r0, #0
 80009b8:	bf48      	it	mi
 80009ba:	f110 0f00 	cmnmi.w	r0, #0
 80009be:	bd01      	pop	{r0, pc}

080009c0 <__aeabi_dcmpeq>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff fff4 	bl	80009b0 <__aeabi_cdcmpeq>
 80009c8:	bf0c      	ite	eq
 80009ca:	2001      	moveq	r0, #1
 80009cc:	2000      	movne	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmplt>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffea 	bl	80009b0 <__aeabi_cdcmpeq>
 80009dc:	bf34      	ite	cc
 80009de:	2001      	movcc	r0, #1
 80009e0:	2000      	movcs	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmple>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffe0 	bl	80009b0 <__aeabi_cdcmpeq>
 80009f0:	bf94      	ite	ls
 80009f2:	2001      	movls	r0, #1
 80009f4:	2000      	movhi	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpge>:
 80009fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a00:	f7ff ffce 	bl	80009a0 <__aeabi_cdrcmple>
 8000a04:	bf94      	ite	ls
 8000a06:	2001      	movls	r0, #1
 8000a08:	2000      	movhi	r0, #0
 8000a0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dcmpgt>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff ffc4 	bl	80009a0 <__aeabi_cdrcmple>
 8000a18:	bf34      	ite	cc
 8000a1a:	2001      	movcc	r0, #1
 8000a1c:	2000      	movcs	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_d2iz>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d215      	bcs.n	8000a5a <__aeabi_d2iz+0x36>
 8000a2e:	d511      	bpl.n	8000a54 <__aeabi_d2iz+0x30>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d912      	bls.n	8000a60 <__aeabi_d2iz+0x3c>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d105      	bne.n	8000a6c <__aeabi_d2iz+0x48>
 8000a60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a64:	bf08      	it	eq
 8000a66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000abc:	2300      	movs	r3, #0
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73bb      	strb	r3, [r7, #14]
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	78db      	ldrb	r3, [r3, #3]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d038      	beq.n	8000b42 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000ad0:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <NVIC_Init+0xb8>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	f1c3 0304 	rsb	r3, r3, #4
 8000ae4:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000ae6:	7b7a      	ldrb	r2, [r7, #13]
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	fa42 f303 	asr.w	r3, r2, r3
 8000aee:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	785b      	ldrb	r3, [r3, #1]
 8000af4:	461a      	mov	r2, r3
 8000af6:	7bbb      	ldrb	r3, [r7, #14]
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	789a      	ldrb	r2, [r3, #2]
 8000b02:	7b7b      	ldrb	r3, [r7, #13]
 8000b04:	4013      	ands	r3, r2
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	011b      	lsls	r3, r3, #4
 8000b12:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000b14:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <NVIC_Init+0xbc>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	7bfa      	ldrb	r2, [r7, #15]
 8000b1e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b22:	4a13      	ldr	r2, [pc, #76]	; (8000b70 <NVIC_Init+0xbc>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	095b      	lsrs	r3, r3, #5
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	f003 031f 	and.w	r3, r3, #31
 8000b36:	2101      	movs	r1, #1
 8000b38:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b3c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000b40:	e00f      	b.n	8000b62 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b42:	490b      	ldr	r1, [pc, #44]	; (8000b70 <NVIC_Init+0xbc>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	095b      	lsrs	r3, r3, #5
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	f003 031f 	and.w	r3, r3, #31
 8000b56:	2201      	movs	r2, #1
 8000b58:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b5a:	f100 0320 	add.w	r3, r0, #32
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000b62:	bf00      	nop
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00
 8000b70:	e000e100 	.word	0xe000e100

08000b74 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b087      	sub	sp, #28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	e07e      	b.n	8000c8e <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000b90:	2201      	movs	r2, #1
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d16d      	bne.n	8000c88 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	2103      	movs	r1, #3
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	401a      	ands	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	791b      	ldrb	r3, [r3, #4]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	791b      	ldrb	r3, [r3, #4]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d003      	beq.n	8000bea <GPIO_Init+0x76>
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	791b      	ldrb	r3, [r3, #4]
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d136      	bne.n	8000c58 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	2103      	movs	r1, #3
 8000bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689a      	ldr	r2, [r3, #8]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	795b      	ldrb	r3, [r3, #5]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	431a      	orrs	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	889b      	ldrh	r3, [r3, #4]
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	2101      	movs	r1, #1
 8000c24:	fa01 f303 	lsl.w	r3, r1, r3
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	4013      	ands	r3, r2
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	889b      	ldrh	r3, [r3, #4]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	b21a      	sxth	r2, r3
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	799b      	ldrb	r3, [r3, #6]
 8000c42:	4619      	mov	r1, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2103      	movs	r1, #3
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	79db      	ldrb	r3, [r3, #7]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	431a      	orrs	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	f67f af7d 	bls.w	8000b90 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000c96:	bf00      	nop
 8000c98:	371c      	adds	r7, #28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: Specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	8a9b      	ldrh	r3, [r3, #20]
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d002      	beq.n	8000cc6 <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	e001      	b.n	8000cca <GPIO_ReadOutputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	807b      	strh	r3, [r7, #2]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8000ce8:	787b      	ldrb	r3, [r7, #1]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	887a      	ldrh	r2, [r7, #2]
 8000cf2:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000cf4:	e002      	b.n	8000cfc <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	887a      	ldrh	r2, [r7, #2]
 8000cfa:	835a      	strh	r2, [r3, #26]
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..H) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	8a9b      	ldrh	r3, [r3, #20]
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	887b      	ldrh	r3, [r7, #2]
 8000d1c:	4053      	eors	r3, r2
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	829a      	strh	r2, [r3, #20]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	807b      	strh	r3, [r7, #2]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d48:	787a      	ldrb	r2, [r7, #1]
 8000d4a:	887b      	ldrh	r3, [r7, #2]
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d58:	887b      	ldrh	r3, [r7, #2]
 8000d5a:	08db      	lsrs	r3, r3, #3
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	887b      	ldrh	r3, [r7, #2]
 8000d62:	08db      	lsrs	r3, r3, #3
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3208      	adds	r2, #8
 8000d6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d70:	887b      	ldrh	r3, [r7, #2]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	210f      	movs	r1, #15
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	ea02 0103 	and.w	r1, r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f100 0208 	add.w	r2, r0, #8
 8000d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	08db      	lsrs	r3, r3, #3
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	461a      	mov	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3208      	adds	r2, #8
 8000d9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000da4:	887b      	ldrh	r3, [r7, #2]
 8000da6:	08db      	lsrs	r3, r3, #3
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	461a      	mov	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3208      	adds	r2, #8
 8000db0:	68b9      	ldr	r1, [r7, #8]
 8000db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <I2C_DeInit+0x44>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d10a      	bne.n	8000de6 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000dd6:	f000 fa6d 	bl	80012b4 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 8000dda:	2100      	movs	r1, #0
 8000ddc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000de0:	f000 fa68 	bl	80012b4 <RCC_APB1PeriphResetCmd>
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
  }
}
 8000de4:	e009      	b.n	8000dfa <I2C_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8000de6:	2101      	movs	r1, #1
 8000de8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000dec:	f000 fa62 	bl	80012b4 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8000df0:	2100      	movs	r1, #0
 8000df2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000df6:	f000 fa5d 	bl	80012b4 <RCC_APB1PeriphResetCmd>
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40005400 	.word	0x40005400

08000e08 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000e16:	2300      	movs	r3, #0
 8000e18:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000e1e:	4b57      	ldr	r3, [pc, #348]	; (8000f7c <I2C_Init+0x174>)
 8000e20:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	889b      	ldrh	r3, [r3, #4]
 8000e26:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000e28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e2a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e2e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 f909 	bl	800104c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	4a4f      	ldr	r2, [pc, #316]	; (8000f80 <I2C_Init+0x178>)
 8000e42:	fba2 2303 	umull	r2, r3, r2, r3
 8000e46:	0c9b      	lsrs	r3, r3, #18
 8000e48:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000e4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e56:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	f023 0301 	bic.w	r3, r3, #1
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a44      	ldr	r2, [pc, #272]	; (8000f84 <I2C_Init+0x17c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d815      	bhi.n	8000ea2 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	69fa      	ldr	r2, [r7, #28]
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000e84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d801      	bhi.n	8000e8e <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000e8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e92:	4313      	orrs	r3, r2
 8000e94:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000e96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e98:	3301      	adds	r3, #1
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	841a      	strh	r2, [r3, #32]
 8000ea0:	e040      	b.n	8000f24 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	88db      	ldrh	r3, [r3, #6]
 8000ea6:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d109      	bne.n	8000ec2 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	4413      	add	r3, r2
 8000eb8:	69fa      	ldr	r2, [r7, #28]
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000ec0:	e00e      	b.n	8000ee0 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	009a      	lsls	r2, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	69fa      	ldr	r2, [r7, #28]
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000ed8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000eda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ede:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000ee0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d103      	bne.n	8000ef2 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000eea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000ef2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000ef4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000f02:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000f04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f0a:	fb02 f303 	mul.w	r3, r2, r3
 8000f0e:	4a1e      	ldr	r2, [pc, #120]	; (8000f88 <I2C_Init+0x180>)
 8000f10:	fb82 1203 	smull	r1, r2, r2, r3
 8000f14:	1192      	asrs	r2, r2, #6
 8000f16:	17db      	asrs	r3, r3, #31
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f28:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000f40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f42:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8000f46:	f023 0302 	bic.w	r3, r3, #2
 8000f4a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	889a      	ldrh	r2, [r3, #4]
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	895b      	ldrh	r3, [r3, #10]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f62:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	899a      	ldrh	r2, [r3, #12]
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	891b      	ldrh	r3, [r3, #8]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	811a      	strh	r2, [r3, #8]
}
 8000f74:	bf00      	nop
 8000f76:	3728      	adds	r7, #40	; 0x28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	007a1200 	.word	0x007a1200
 8000f80:	431bde83 	.word	0x431bde83
 8000f84:	000186a0 	.word	0x000186a0
 8000f88:	10624dd3 	.word	0x10624dd3

08000f8c <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f98:	78fb      	ldrb	r3, [r7, #3]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d008      	beq.n	8000fb0 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8000fae:	e007      	b.n	8000fc0 <I2C_Cmd+0x34>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	f023 0301 	bic.w	r3, r3, #1
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	801a      	strh	r2, [r3, #0]
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d008      	beq.n	8000ff0 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8000fee:	e007      	b.n	8001000 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	801a      	strh	r2, [r3, #0]
  }
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d008      	beq.n	8001030 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	b29b      	uxth	r3, r3
 8001024:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001028:	b29a      	uxth	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 800102e:	e007      	b.n	8001040 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	b29b      	uxth	r3, r3
 8001036:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800103a:	b29a      	uxth	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	801a      	strh	r2, [r3, #0]
  }
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800106c:	4b5f      	ldr	r3, [pc, #380]	; (80011ec <RCC_GetClocksFreq+0x1a0>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 030c 	and.w	r3, r3, #12
 8001074:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	2b0c      	cmp	r3, #12
 800107a:	d865      	bhi.n	8001148 <RCC_GetClocksFreq+0xfc>
 800107c:	a201      	add	r2, pc, #4	; (adr r2, 8001084 <RCC_GetClocksFreq+0x38>)
 800107e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001082:	bf00      	nop
 8001084:	080010b9 	.word	0x080010b9
 8001088:	08001149 	.word	0x08001149
 800108c:	08001149 	.word	0x08001149
 8001090:	08001149 	.word	0x08001149
 8001094:	080010d9 	.word	0x080010d9
 8001098:	08001149 	.word	0x08001149
 800109c:	08001149 	.word	0x08001149
 80010a0:	08001149 	.word	0x08001149
 80010a4:	080010e1 	.word	0x080010e1
 80010a8:	08001149 	.word	0x08001149
 80010ac:	08001149 	.word	0x08001149
 80010b0:	08001149 	.word	0x08001149
 80010b4:	080010e9 	.word	0x080010e9
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 80010b8:	4b4c      	ldr	r3, [pc, #304]	; (80011ec <RCC_GetClocksFreq+0x1a0>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80010c0:	0b5b      	lsrs	r3, r3, #13
 80010c2:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	3301      	adds	r3, #1
 80010c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	601a      	str	r2, [r3, #0]
      break;
 80010d6:	e047      	b.n	8001168 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a45      	ldr	r2, [pc, #276]	; (80011f0 <RCC_GetClocksFreq+0x1a4>)
 80010dc:	601a      	str	r2, [r3, #0]
      break;
 80010de:	e043      	b.n	8001168 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a44      	ldr	r2, [pc, #272]	; (80011f4 <RCC_GetClocksFreq+0x1a8>)
 80010e4:	601a      	str	r2, [r3, #0]
      break;
 80010e6:	e03f      	b.n	8001168 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80010e8:	4b40      	ldr	r3, [pc, #256]	; (80011ec <RCC_GetClocksFreq+0x1a0>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80010f0:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80010f2:	4b3e      	ldr	r3, [pc, #248]	; (80011ec <RCC_GetClocksFreq+0x1a0>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80010fa:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	0c9b      	lsrs	r3, r3, #18
 8001100:	4a3d      	ldr	r2, [pc, #244]	; (80011f8 <RCC_GetClocksFreq+0x1ac>)
 8001102:	5cd3      	ldrb	r3, [r2, r3]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	0d9b      	lsrs	r3, r3, #22
 800110c:	3301      	adds	r3, #1
 800110e:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001110:	4b36      	ldr	r3, [pc, #216]	; (80011ec <RCC_GetClocksFreq+0x1a0>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001118:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d109      	bne.n	8001134 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	4a33      	ldr	r2, [pc, #204]	; (80011f0 <RCC_GetClocksFreq+0x1a4>)
 8001124:	fb02 f203 	mul.w	r2, r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fbb2 f2f3 	udiv	r2, r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8001132:	e019      	b.n	8001168 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	4a2f      	ldr	r2, [pc, #188]	; (80011f4 <RCC_GetClocksFreq+0x1a8>)
 8001138:	fb02 f203 	mul.w	r2, r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
      }
      break;
 8001146:	e00f      	b.n	8001168 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8001148:	4b28      	ldr	r3, [pc, #160]	; (80011ec <RCC_GetClocksFreq+0x1a0>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001150:	0b5b      	lsrs	r3, r3, #13
 8001152:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	3301      	adds	r3, #1
 8001158:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	461a      	mov	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	601a      	str	r2, [r3, #0]
      break;
 8001166:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001168:	4b20      	ldr	r3, [pc, #128]	; (80011ec <RCC_GetClocksFreq+0x1a0>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001170:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	091b      	lsrs	r3, r3, #4
 8001176:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 8001178:	4a20      	ldr	r2, [pc, #128]	; (80011fc <RCC_GetClocksFreq+0x1b0>)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	4413      	add	r3, r2
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	40da      	lsrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <RCC_GetClocksFreq+0x1a0>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001198:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80011a0:	4a16      	ldr	r2, [pc, #88]	; (80011fc <RCC_GetClocksFreq+0x1b0>)
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	4413      	add	r3, r2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	40da      	lsrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <RCC_GetClocksFreq+0x1a0>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80011c0:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	0adb      	lsrs	r3, r3, #11
 80011c6:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80011c8:	4a0c      	ldr	r2, [pc, #48]	; (80011fc <RCC_GetClocksFreq+0x1b0>)
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	40da      	lsrs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	60da      	str	r2, [r3, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3724      	adds	r7, #36	; 0x24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	00f42400 	.word	0x00f42400
 80011f4:	007a1200 	.word	0x007a1200
 80011f8:	20000000 	.word	0x20000000
 80011fc:	2000000c 	.word	0x2000000c

08001200 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d006      	beq.n	8001220 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001212:	4909      	ldr	r1, [pc, #36]	; (8001238 <RCC_AHBPeriphClockCmd+0x38>)
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <RCC_AHBPeriphClockCmd+0x38>)
 8001216:	69da      	ldr	r2, [r3, #28]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4313      	orrs	r3, r2
 800121c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800121e:	e006      	b.n	800122e <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001220:	4905      	ldr	r1, [pc, #20]	; (8001238 <RCC_AHBPeriphClockCmd+0x38>)
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <RCC_AHBPeriphClockCmd+0x38>)
 8001224:	69da      	ldr	r2, [r3, #28]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	43db      	mvns	r3, r3
 800122a:	4013      	ands	r3, r2
 800122c:	61cb      	str	r3, [r1, #28]
  }
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	40023800 	.word	0x40023800

0800123c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d006      	beq.n	800125c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800124e:	4909      	ldr	r1, [pc, #36]	; (8001274 <RCC_APB2PeriphClockCmd+0x38>)
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <RCC_APB2PeriphClockCmd+0x38>)
 8001252:	6a1a      	ldr	r2, [r3, #32]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4313      	orrs	r3, r2
 8001258:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800125a:	e006      	b.n	800126a <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800125c:	4905      	ldr	r1, [pc, #20]	; (8001274 <RCC_APB2PeriphClockCmd+0x38>)
 800125e:	4b05      	ldr	r3, [pc, #20]	; (8001274 <RCC_APB2PeriphClockCmd+0x38>)
 8001260:	6a1a      	ldr	r2, [r3, #32]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	43db      	mvns	r3, r3
 8001266:	4013      	ands	r3, r2
 8001268:	620b      	str	r3, [r1, #32]
  }
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	40023800 	.word	0x40023800

08001278 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d006      	beq.n	8001298 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800128a:	4909      	ldr	r1, [pc, #36]	; (80012b0 <RCC_APB1PeriphClockCmd+0x38>)
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <RCC_APB1PeriphClockCmd+0x38>)
 800128e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4313      	orrs	r3, r2
 8001294:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001296:	e006      	b.n	80012a6 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001298:	4905      	ldr	r1, [pc, #20]	; (80012b0 <RCC_APB1PeriphClockCmd+0x38>)
 800129a:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <RCC_APB1PeriphClockCmd+0x38>)
 800129c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	4013      	ands	r3, r2
 80012a4:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	40023800 	.word	0x40023800

080012b4 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d006      	beq.n	80012d4 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80012c6:	4909      	ldr	r1, [pc, #36]	; (80012ec <RCC_APB1PeriphResetCmd+0x38>)
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <RCC_APB1PeriphResetCmd+0x38>)
 80012ca:	699a      	ldr	r2, [r3, #24]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 80012d2:	e006      	b.n	80012e2 <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80012d4:	4905      	ldr	r1, [pc, #20]	; (80012ec <RCC_APB1PeriphResetCmd+0x38>)
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <RCC_APB1PeriphResetCmd+0x38>)
 80012d8:	699a      	ldr	r2, [r3, #24]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	43db      	mvns	r3, r3
 80012de:	4013      	ands	r3, r2
 80012e0:	618b      	str	r3, [r1, #24]
  }
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	40023800 	.word	0x40023800

080012f0 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800130a:	d00b      	beq.n	8001324 <TIM_TimeBaseInit+0x34>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <TIM_TimeBaseInit+0x90>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d007      	beq.n	8001324 <TIM_TimeBaseInit+0x34>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <TIM_TimeBaseInit+0x94>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d003      	beq.n	8001324 <TIM_TimeBaseInit+0x34>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a1a      	ldr	r2, [pc, #104]	; (8001388 <TIM_TimeBaseInit+0x98>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d108      	bne.n	8001336 <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001324:	89fb      	ldrh	r3, [r7, #14]
 8001326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800132a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	885a      	ldrh	r2, [r3, #2]
 8001330:	89fb      	ldrh	r3, [r7, #14]
 8001332:	4313      	orrs	r3, r2
 8001334:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a14      	ldr	r2, [pc, #80]	; (800138c <TIM_TimeBaseInit+0x9c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d00c      	beq.n	8001358 <TIM_TimeBaseInit+0x68>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a13      	ldr	r2, [pc, #76]	; (8001390 <TIM_TimeBaseInit+0xa0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d008      	beq.n	8001358 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001346:	89fb      	ldrh	r3, [r7, #14]
 8001348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800134c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	891a      	ldrh	r2, [r3, #8]
 8001352:	89fb      	ldrh	r3, [r7, #14]
 8001354:	4313      	orrs	r3, r2
 8001356:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	89fa      	ldrh	r2, [r7, #14]
 800135c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	881a      	ldrh	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	829a      	strh	r2, [r3, #20]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40000400 	.word	0x40000400
 8001384:	40000800 	.word	0x40000800
 8001388:	40000c00 	.word	0x40000c00
 800138c:	40001000 	.word	0x40001000
 8001390:	40001400 	.word	0x40001400

08001394 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d008      	beq.n	80013b8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 80013b6:	e007      	b.n	80013c8 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	f023 0301 	bic.w	r3, r3, #1
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	801a      	strh	r2, [r3, #0]
  }
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop

080013d4 <TIM_OC3Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	81fb      	strh	r3, [r7, #14]
 80013e2:	2300      	movs	r3, #0
 80013e4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	8c1b      	ldrh	r3, [r3, #32]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	8c1b      	ldrh	r3, [r3, #32]
 80013fa:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	8b9b      	ldrh	r3, [r3, #28]
 8001400:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 8001402:	89fb      	ldrh	r3, [r7, #14]
 8001404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001408:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	881a      	ldrh	r2, [r3, #0]
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	4313      	orrs	r3, r2
 8001412:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8001414:	89bb      	ldrh	r3, [r7, #12]
 8001416:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800141a:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	891b      	ldrh	r3, [r3, #8]
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	b29a      	uxth	r2, r3
 8001424:	89bb      	ldrh	r3, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	885b      	ldrh	r3, [r3, #2]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	b29a      	uxth	r2, r3
 8001432:	89bb      	ldrh	r3, [r7, #12]
 8001434:	4313      	orrs	r3, r2
 8001436:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	89fa      	ldrh	r2, [r7, #14]
 8001444:	839a      	strh	r2, [r3, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	89ba      	ldrh	r2, [r7, #12]
 800144a:	841a      	strh	r2, [r3, #32]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop

08001458 <TIM_OC4Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	81fb      	strh	r3, [r7, #14]
 8001466:	2300      	movs	r3, #0
 8001468:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	8c1b      	ldrh	r3, [r3, #32]
 800146e:	b29b      	uxth	r3, r3
 8001470:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001474:	b29a      	uxth	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	8c1b      	ldrh	r3, [r3, #32]
 800147e:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	8b9b      	ldrh	r3, [r3, #28]
 8001484:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 8001486:	89fb      	ldrh	r3, [r7, #14]
 8001488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800148c:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	b29a      	uxth	r2, r3
 8001496:	89fb      	ldrh	r3, [r7, #14]
 8001498:	4313      	orrs	r3, r2
 800149a:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 800149c:	89bb      	ldrh	r3, [r7, #12]
 800149e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014a2:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	891b      	ldrh	r3, [r3, #8]
 80014a8:	031b      	lsls	r3, r3, #12
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	89bb      	ldrh	r3, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	885b      	ldrh	r3, [r3, #2]
 80014b6:	031b      	lsls	r3, r3, #12
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	89bb      	ldrh	r3, [r7, #12]
 80014bc:	4313      	orrs	r3, r2
 80014be:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	89fa      	ldrh	r2, [r7, #14]
 80014cc:	839a      	strh	r2, [r3, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	89ba      	ldrh	r2, [r7, #12]
 80014d2:	841a      	strh	r2, [r3, #32]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop

080014e0 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	8b9b      	ldrh	r3, [r3, #28]
 80014f4:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 80014f6:	89fb      	ldrh	r3, [r7, #14]
 80014f8:	f023 0308 	bic.w	r3, r3, #8
 80014fc:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80014fe:	89fa      	ldrh	r2, [r7, #14]
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	4313      	orrs	r3, r2
 8001504:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	89fa      	ldrh	r2, [r7, #14]
 800150a:	839a      	strh	r2, [r3, #28]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop

08001518 <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	8b9b      	ldrh	r3, [r3, #28]
 800152c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001534:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8001536:	887b      	ldrh	r3, [r7, #2]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b29a      	uxth	r2, r3
 800153c:	89fb      	ldrh	r3, [r7, #14]
 800153e:	4313      	orrs	r3, r2
 8001540:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	89fa      	ldrh	r2, [r7, #14]
 8001546:	839a      	strh	r2, [r3, #28]
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop

08001554 <TIM_ICInit>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10f      	bne.n	8001586 <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	8859      	ldrh	r1, [r3, #2]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	889a      	ldrh	r2, [r3, #4]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	891b      	ldrh	r3, [r3, #8]
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f938 	bl	80017e8 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	88db      	ldrh	r3, [r3, #6]
 800157c:	4619      	mov	r1, r3
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f860 	bl	8001644 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001584:	e036      	b.n	80015f4 <TIM_ICInit+0xa0>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	2b04      	cmp	r3, #4
 800158c:	d10f      	bne.n	80015ae <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	8859      	ldrh	r1, [r3, #2]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	889a      	ldrh	r2, [r3, #4]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	891b      	ldrh	r3, [r3, #8]
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f966 	bl	800186c <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	88db      	ldrh	r3, [r3, #6]
 80015a4:	4619      	mov	r1, r3
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f868 	bl	800167c <TIM_SetIC2Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80015ac:	e022      	b.n	80015f4 <TIM_ICInit+0xa0>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d10f      	bne.n	80015d6 <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	8859      	ldrh	r1, [r3, #2]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	889a      	ldrh	r2, [r3, #4]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	891b      	ldrh	r3, [r3, #8]
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 f99e 	bl	8001904 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	88db      	ldrh	r3, [r3, #6]
 80015cc:	4619      	mov	r1, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f872 	bl	80016b8 <TIM_SetIC3Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80015d4:	e00e      	b.n	80015f4 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	8859      	ldrh	r1, [r3, #2]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	889a      	ldrh	r2, [r3, #4]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	891b      	ldrh	r3, [r3, #8]
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f9d6 	bl	8001994 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	88db      	ldrh	r3, [r3, #6]
 80015ec:	4619      	mov	r1, r3
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f87e 	bl	80016f0 <TIM_SetIC4Prescaler>
  }
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 2, 3, 4, 5, 9, 10 or 11 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop

08001614 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 2, 3, 4 or 5 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop

0800162c <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 2, 3, 4 or 5 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop

08001644 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	8b1b      	ldrh	r3, [r3, #24]
 8001654:	b29b      	uxth	r3, r3
 8001656:	f023 030c 	bic.w	r3, r3, #12
 800165a:	b29a      	uxth	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	8b1b      	ldrh	r3, [r3, #24]
 8001664:	b29a      	uxth	r2, r3
 8001666:	887b      	ldrh	r3, [r7, #2]
 8001668:	4313      	orrs	r3, r2
 800166a:	b29a      	uxth	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	831a      	strh	r2, [r3, #24]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop

0800167c <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	8b1b      	ldrh	r3, [r3, #24]
 800168c:	b29b      	uxth	r3, r3
 800168e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001692:	b29a      	uxth	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	8b1b      	ldrh	r3, [r3, #24]
 800169c:	b29a      	uxth	r2, r3
 800169e:	887b      	ldrh	r3, [r7, #2]
 80016a0:	021b      	lsls	r3, r3, #8
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	831a      	strh	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop

080016b8 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	8b9b      	ldrh	r3, [r3, #28]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	f023 030c 	bic.w	r3, r3, #12
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	8b9b      	ldrh	r3, [r3, #28]
 80016d8:	b29a      	uxth	r2, r3
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	4313      	orrs	r3, r2
 80016de:	b29a      	uxth	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	839a      	strh	r2, [r3, #28]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop

080016f0 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	8b9b      	ldrh	r3, [r3, #28]
 8001700:	b29b      	uxth	r3, r3
 8001702:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001706:	b29a      	uxth	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	8b9b      	ldrh	r3, [r3, #28]
 8001710:	b29a      	uxth	r2, r3
 8001712:	887b      	ldrh	r3, [r7, #2]
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	b29b      	uxth	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b29a      	uxth	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	839a      	strh	r2, [r3, #28]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop

0800172c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	807b      	strh	r3, [r7, #2]
 8001738:	4613      	mov	r3, r2
 800173a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800173c:	787b      	ldrb	r3, [r7, #1]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d008      	beq.n	8001754 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	899b      	ldrh	r3, [r3, #12]
 8001746:	b29a      	uxth	r2, r3
 8001748:	887b      	ldrh	r3, [r7, #2]
 800174a:	4313      	orrs	r3, r2
 800174c:	b29a      	uxth	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001752:	e009      	b.n	8001768 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	899b      	ldrh	r3, [r3, #12]
 8001758:	b29a      	uxth	r2, r3
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	43db      	mvns	r3, r3
 800175e:	b29b      	uxth	r3, r3
 8001760:	4013      	ands	r3, r2
 8001762:	b29a      	uxth	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	819a      	strh	r2, [r3, #12]
  }
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop

08001774 <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001780:	2300      	movs	r3, #0
 8001782:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001784:	2300      	movs	r3, #0
 8001786:	81bb      	strh	r3, [r7, #12]
 8001788:	2300      	movs	r3, #0
 800178a:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	8a1b      	ldrh	r3, [r3, #16]
 8001790:	b29a      	uxth	r2, r3
 8001792:	887b      	ldrh	r3, [r7, #2]
 8001794:	4013      	ands	r3, r2
 8001796:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	899b      	ldrh	r3, [r3, #12]
 800179c:	b29a      	uxth	r2, r3
 800179e:	887b      	ldrh	r3, [r7, #2]
 80017a0:	4013      	ands	r3, r2
 80017a2:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80017a4:	89bb      	ldrh	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d005      	beq.n	80017b6 <TIM_GetITStatus+0x42>
 80017aa:	897b      	ldrh	r3, [r7, #10]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d002      	beq.n	80017b6 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	e001      	b.n	80017ba <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop

080017c8 <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80017d4:	887b      	ldrh	r3, [r7, #2]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	b29a      	uxth	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	821a      	strh	r2, [r3, #16]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	4608      	mov	r0, r1
 80017f2:	4611      	mov	r1, r2
 80017f4:	461a      	mov	r2, r3
 80017f6:	4603      	mov	r3, r0
 80017f8:	817b      	strh	r3, [r7, #10]
 80017fa:	460b      	mov	r3, r1
 80017fc:	813b      	strh	r3, [r7, #8]
 80017fe:	4613      	mov	r3, r2
 8001800:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	82fb      	strh	r3, [r7, #22]
 8001806:	2300      	movs	r3, #0
 8001808:	82bb      	strh	r3, [r7, #20]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8c1b      	ldrh	r3, [r3, #32]
 800180e:	b29b      	uxth	r3, r3
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8b1b      	ldrh	r3, [r3, #24]
 800181e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8c1b      	ldrh	r3, [r3, #32]
 8001824:	82bb      	strh	r3, [r7, #20]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8001826:	8afb      	ldrh	r3, [r7, #22]
 8001828:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800182c:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	b29a      	uxth	r2, r3
 8001834:	893b      	ldrh	r3, [r7, #8]
 8001836:	4313      	orrs	r3, r2
 8001838:	b29a      	uxth	r2, r3
 800183a:	8afb      	ldrh	r3, [r7, #22]
 800183c:	4313      	orrs	r3, r2
 800183e:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001840:	8abb      	ldrh	r3, [r7, #20]
 8001842:	f023 030a 	bic.w	r3, r3, #10
 8001846:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001848:	897a      	ldrh	r2, [r7, #10]
 800184a:	8abb      	ldrh	r3, [r7, #20]
 800184c:	4313      	orrs	r3, r2
 800184e:	b29b      	uxth	r3, r3
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8afa      	ldrh	r2, [r7, #22]
 800185a:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8aba      	ldrh	r2, [r7, #20]
 8001860:	841a      	strh	r2, [r3, #32]
}
 8001862:	bf00      	nop
 8001864:	371c      	adds	r7, #28
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	4608      	mov	r0, r1
 8001876:	4611      	mov	r1, r2
 8001878:	461a      	mov	r2, r3
 800187a:	4603      	mov	r3, r0
 800187c:	817b      	strh	r3, [r7, #10]
 800187e:	460b      	mov	r3, r1
 8001880:	813b      	strh	r3, [r7, #8]
 8001882:	4613      	mov	r3, r2
 8001884:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	82fb      	strh	r3, [r7, #22]
 800188a:	2300      	movs	r3, #0
 800188c:	82bb      	strh	r3, [r7, #20]
 800188e:	2300      	movs	r3, #0
 8001890:	827b      	strh	r3, [r7, #18]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8c1b      	ldrh	r3, [r3, #32]
 8001896:	b29b      	uxth	r3, r3
 8001898:	f023 0310 	bic.w	r3, r3, #16
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8b1b      	ldrh	r3, [r3, #24]
 80018a6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8c1b      	ldrh	r3, [r3, #32]
 80018ac:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80018ae:	897b      	ldrh	r3, [r7, #10]
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80018b4:	8afb      	ldrh	r3, [r7, #22]
 80018b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018ba:	051b      	lsls	r3, r3, #20
 80018bc:	0d1b      	lsrs	r3, r3, #20
 80018be:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	031b      	lsls	r3, r3, #12
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	8afb      	ldrh	r3, [r7, #22]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80018cc:	893b      	ldrh	r3, [r7, #8]
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	8afb      	ldrh	r3, [r7, #22]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80018d8:	8abb      	ldrh	r3, [r7, #20]
 80018da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80018de:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80018e0:	8a7a      	ldrh	r2, [r7, #18]
 80018e2:	8abb      	ldrh	r3, [r7, #20]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	f043 0310 	orr.w	r3, r3, #16
 80018ec:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8afa      	ldrh	r2, [r7, #22]
 80018f2:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8aba      	ldrh	r2, [r7, #20]
 80018f8:	841a      	strh	r2, [r3, #32]
}
 80018fa:	bf00      	nop
 80018fc:	371c      	adds	r7, #28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001904:	b480      	push	{r7}
 8001906:	b087      	sub	sp, #28
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	4608      	mov	r0, r1
 800190e:	4611      	mov	r1, r2
 8001910:	461a      	mov	r2, r3
 8001912:	4603      	mov	r3, r0
 8001914:	817b      	strh	r3, [r7, #10]
 8001916:	460b      	mov	r3, r1
 8001918:	813b      	strh	r3, [r7, #8]
 800191a:	4613      	mov	r3, r2
 800191c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	82fb      	strh	r3, [r7, #22]
 8001922:	2300      	movs	r3, #0
 8001924:	82bb      	strh	r3, [r7, #20]
 8001926:	2300      	movs	r3, #0
 8001928:	827b      	strh	r3, [r7, #18]
  
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8c1b      	ldrh	r3, [r3, #32]
 800192e:	b29b      	uxth	r3, r3
 8001930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001934:	b29a      	uxth	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8b9b      	ldrh	r3, [r3, #28]
 800193e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8c1b      	ldrh	r3, [r3, #32]
 8001944:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8001946:	897b      	ldrh	r3, [r7, #10]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 800194c:	8afb      	ldrh	r3, [r7, #22]
 800194e:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8001952:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	b29a      	uxth	r2, r3
 800195a:	893b      	ldrh	r3, [r7, #8]
 800195c:	4313      	orrs	r3, r2
 800195e:	b29a      	uxth	r2, r3
 8001960:	8afb      	ldrh	r3, [r7, #22]
 8001962:	4313      	orrs	r3, r2
 8001964:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001966:	8abb      	ldrh	r3, [r7, #20]
 8001968:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800196c:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800196e:	8a7a      	ldrh	r2, [r7, #18]
 8001970:	8abb      	ldrh	r3, [r7, #20]
 8001972:	4313      	orrs	r3, r2
 8001974:	b29b      	uxth	r3, r3
 8001976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197a:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8afa      	ldrh	r2, [r7, #22]
 8001980:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8aba      	ldrh	r2, [r7, #20]
 8001986:	841a      	strh	r2, [r3, #32]
}
 8001988:	bf00      	nop
 800198a:	371c      	adds	r7, #28
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop

08001994 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	4608      	mov	r0, r1
 800199e:	4611      	mov	r1, r2
 80019a0:	461a      	mov	r2, r3
 80019a2:	4603      	mov	r3, r0
 80019a4:	817b      	strh	r3, [r7, #10]
 80019a6:	460b      	mov	r3, r1
 80019a8:	813b      	strh	r3, [r7, #8]
 80019aa:	4613      	mov	r3, r2
 80019ac:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	82fb      	strh	r3, [r7, #22]
 80019b2:	2300      	movs	r3, #0
 80019b4:	82bb      	strh	r3, [r7, #20]
 80019b6:	2300      	movs	r3, #0
 80019b8:	827b      	strh	r3, [r7, #18]
  
  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8c1b      	ldrh	r3, [r3, #32]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8b9b      	ldrh	r3, [r3, #28]
 80019ce:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8c1b      	ldrh	r3, [r3, #32]
 80019d4:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 80019d6:	897b      	ldrh	r3, [r7, #10]
 80019d8:	031b      	lsls	r3, r3, #12
 80019da:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 80019dc:	8afb      	ldrh	r3, [r7, #22]
 80019de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019e2:	051b      	lsls	r3, r3, #20
 80019e4:	0d1b      	lsrs	r3, r3, #20
 80019e6:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 80019e8:	893b      	ldrh	r3, [r7, #8]
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	8afb      	ldrh	r3, [r7, #22]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	031b      	lsls	r3, r3, #12
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	8afb      	ldrh	r3, [r7, #22]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001a00:	8abb      	ldrh	r3, [r7, #20]
 8001a02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a06:	045b      	lsls	r3, r3, #17
 8001a08:	0c5b      	lsrs	r3, r3, #17
 8001a0a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8001a0c:	8a7a      	ldrh	r2, [r7, #18]
 8001a0e:	8abb      	ldrh	r3, [r7, #20]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a18:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8afa      	ldrh	r2, [r7, #22]
 8001a1e:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8aba      	ldrh	r2, [r7, #20]
 8001a24:	841a      	strh	r2, [r3, #32]
}
 8001a26:	bf00      	nop
 8001a28:	371c      	adds	r7, #28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that 
  *        contains the configuration information for the specified USART peripheral.
  * @retval None.
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }
   
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	8a1b      	ldrh	r3, [r3, #16]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	88db      	ldrh	r3, [r3, #6]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	4313      	orrs	r3, r2
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	899b      	ldrh	r3, [r3, #12]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001a7c:	f023 030c 	bic.w	r3, r3, #12
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	889a      	ldrh	r2, [r3, #4]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	891b      	ldrh	r3, [r3, #8]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001a92:	4313      	orrs	r3, r2
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	461a      	mov	r2, r3
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	8a9b      	ldrh	r3, [r3, #20]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	899b      	ldrh	r3, [r3, #12]
 8001aba:	461a      	mov	r2, r3
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fabc 	bl	800104c <RCC_GetClocksFreq>
  if (USARTx == USART1) 
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a2e      	ldr	r2, [pc, #184]	; (8001b90 <USART_Init+0x160>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d102      	bne.n	8001ae2 <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	623b      	str	r3, [r7, #32]
 8001ae0:	e001      	b.n	8001ae6 <USART_Init+0xb6>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	623b      	str	r3, [r7, #32]
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	899b      	ldrh	r3, [r3, #12]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	da0c      	bge.n	8001b0c <USART_Init+0xdc>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001af2:	6a3a      	ldr	r2, [r7, #32]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	009a      	lsls	r2, r3, #2
 8001afc:	441a      	add	r2, r3
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	e00b      	b.n	8001b24 <USART_Init+0xf4>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001b0c:	6a3a      	ldr	r2, [r7, #32]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	009a      	lsls	r2, r3, #2
 8001b16:	441a      	add	r2, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b22:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <USART_Init+0x164>)
 8001b28:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2c:	095b      	lsrs	r3, r3, #5
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	2264      	movs	r2, #100	; 0x64
 8001b38:	fb02 f303 	mul.w	r3, r2, r3
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	899b      	ldrh	r3, [r3, #12]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	da0c      	bge.n	8001b68 <USART_Init+0x138>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	3332      	adds	r3, #50	; 0x32
 8001b54:	4a0f      	ldr	r2, [pc, #60]	; (8001b94 <USART_Init+0x164>)
 8001b56:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b62:	4313      	orrs	r3, r2
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
 8001b66:	e00b      	b.n	8001b80 <USART_Init+0x150>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	3332      	adds	r3, #50	; 0x32
 8001b6e:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <USART_Init+0x164>)
 8001b70:	fba2 2303 	umull	r2, r3, r2, r3
 8001b74:	095b      	lsrs	r3, r3, #5
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  }
 
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	811a      	strh	r2, [r3, #8]
}
 8001b88:	bf00      	nop
 8001b8a:	3728      	adds	r7, #40	; 0x28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40013800 	.word	0x40013800
 8001b94:	51eb851f 	.word	0x51eb851f

08001b98 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d008      	beq.n	8001bbc <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	899b      	ldrh	r3, [r3, #12]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8001bba:	e007      	b.n	8001bcc <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	899b      	ldrh	r3, [r3, #12]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	819a      	strh	r2, [r3, #12]
  }
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop

08001bd8 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None.
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001be4:	887b      	ldrh	r3, [r7, #2]
 8001be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	809a      	strh	r2, [r3, #4]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop

08001bfc <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	889b      	ldrh	r3, [r3, #4]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c0e:	b29b      	uxth	r3, r3
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop

08001c1c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001c40:	887b      	ldrh	r3, [r7, #2]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	095b      	lsrs	r3, r3, #5
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001c4a:	887b      	ldrh	r3, [r7, #2]
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001c52:	2201      	movs	r2, #1
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d103      	bne.n	8001c6a <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	330c      	adds	r3, #12
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	e009      	b.n	8001c7e <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d103      	bne.n	8001c78 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	3310      	adds	r3, #16
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e002      	b.n	8001c7e <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3314      	adds	r3, #20
 8001c7c:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001c7e:	787b      	ldrb	r3, [r7, #1]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	6811      	ldr	r1, [r2, #0]
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001c90:	e006      	b.n	8001ca0 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	6811      	ldr	r1, [r2, #0]
 8001c98:	68ba      	ldr	r2, [r7, #8]
 8001c9a:	43d2      	mvns	r2, r2
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	371c      	adds	r7, #28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop

08001cac <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001cc8:	887b      	ldrh	r3, [r7, #2]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	095b      	lsrs	r3, r3, #5
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001cd2:	887b      	ldrh	r3, [r7, #2]
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001cda:	2201      	movs	r2, #1
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d107      	bne.n	8001cfa <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	899b      	ldrh	r3, [r3, #12]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	e011      	b.n	8001d1e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d107      	bne.n	8001d10 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	8a1b      	ldrh	r3, [r3, #16]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	e006      	b.n	8001d1e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	8a9b      	ldrh	r3, [r3, #20]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001d1e:	887b      	ldrh	r3, [r7, #2]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001d26:	2201      	movs	r2, #1
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	461a      	mov	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <USART_GetITStatus+0xa4>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	74fb      	strb	r3, [r7, #19]
 8001d4e:	e001      	b.n	8001d54 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001d50:	2300      	movs	r3, #0
 8001d52:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001d54:	7cfb      	ldrb	r3, [r7, #19]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	371c      	adds	r7, #28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <USART_ClearITPendingBit>:
  * @note TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	81fb      	strh	r3, [r7, #14]
 8001d70:	2300      	movs	r3, #0
 8001d72:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8001d74:	887b      	ldrh	r3, [r7, #2]
 8001d76:	0a1b      	lsrs	r3, r3, #8
 8001d78:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001d7a:	89fb      	ldrh	r3, [r7, #14]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8001d84:	89bb      	ldrh	r3, [r7, #12]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	801a      	strh	r2, [r3, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <readDataHMC5883L>:

//global variables
volatile int compassHeading = 0;

Status readDataHMC5883L(unsigned int*data, unsigned char registerAddress)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	70fb      	strb	r3, [r7, #3]
	unsigned char buffer;
	buffer = 255;
 8001da4:	23ff      	movs	r3, #255	; 0xff
 8001da6:	73bb      	strb	r3, [r7, #14]

	//Status error = I2C_Master_BufferReadWithoutRegisterAddress(buffer, 1, HMC5883L_ADDRESS_R);
	Status error = readByteI2C1(HMC5883L_ADDRESS_R, registerAddress, &buffer);
 8001da8:	f107 020e 	add.w	r2, r7, #14
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	4619      	mov	r1, r3
 8001db0:	203d      	movs	r0, #61	; 0x3d
 8001db2:	f000 fbe5 	bl	8002580 <readByteI2C1>
 8001db6:	4603      	mov	r3, r0
 8001db8:	73fb      	strb	r3, [r7, #15]
	//readByteI2C1()
	*data = buffer;
 8001dba:	7bbb      	ldrb	r3, [r7, #14]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	601a      	str	r2, [r3, #0]

	return error;
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <writeBytesToCompass>:

Status writeBytesToCompass(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0

	Status errStat1 = writeByteI2C1(HMC5883L_ADDRESS_W, 0x00, 0x70); // Configuration Register A
 8001dd2:	2270      	movs	r2, #112	; 0x70
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	203c      	movs	r0, #60	; 0x3c
 8001dd8:	f000 fbbc 	bl	8002554 <writeByteI2C1>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
	Status errStat2 = writeByteI2C1(HMC5883L_ADDRESS_W, 0x01, 0x0A); // Configuration Register B
 8001de0:	220a      	movs	r2, #10
 8001de2:	2101      	movs	r1, #1
 8001de4:	203c      	movs	r0, #60	; 0x3c
 8001de6:	f000 fbb5 	bl	8002554 <writeByteI2C1>
 8001dea:	4603      	mov	r3, r0
 8001dec:	71bb      	strb	r3, [r7, #6]
	Status errStat3 = writeByteI2C1(HMC5883L_ADDRESS_W, 0x02, 0x00);	// Mode Register - Set Continuous-measurement mode
 8001dee:	2200      	movs	r2, #0
 8001df0:	2102      	movs	r1, #2
 8001df2:	203c      	movs	r0, #60	; 0x3c
 8001df4:	f000 fbae 	bl	8002554 <writeByteI2C1>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	717b      	strb	r3, [r7, #5]

	initTimerMagnetometer();
 8001dfc:	f000 f806 	bl	8001e0c <initTimerMagnetometer>

	return errStat3;
 8001e00:	797b      	ldrb	r3, [r7, #5]
//	}
//	else{
//		return 'Config error';
//	}

}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop

08001e0c <initTimerMagnetometer>:

//casovac pravidelne spustajuci meranie magnetometra
void initTimerMagnetometer(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
	unsigned short prescalerValue = (unsigned short) (16000000/1000) - 1;//TIM_CLC_PRESCALER;
 8001e12:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8001e16:	82fb      	strh	r3, [r7, #22]

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM11, ENABLE);
 8001e18:	2101      	movs	r1, #1
 8001e1a:	2010      	movs	r0, #16
 8001e1c:	f7ff fa0e 	bl	800123c <RCC_APB2PeriphClockCmd>

	TIM_TimeBaseStructure.TIM_Period = 50 - 1;//TIM_PERIOD;
 8001e20:	2331      	movs	r3, #49	; 0x31
 8001e22:	60fb      	str	r3, [r7, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;//TIM_CLC_DIV;
 8001e24:	2300      	movs	r3, #0
 8001e26:	823b      	strh	r3, [r7, #16]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	817b      	strh	r3, [r7, #10]
	TIM_TimeBaseStructure.TIM_Prescaler = prescalerValue;
 8001e2c:	8afb      	ldrh	r3, [r7, #22]
 8001e2e:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInit(TIM11, &TIM_TimeBaseStructure);
 8001e30:	f107 0308 	add.w	r3, r7, #8
 8001e34:	4619      	mov	r1, r3
 8001e36:	480e      	ldr	r0, [pc, #56]	; (8001e70 <initTimerMagnetometer+0x64>)
 8001e38:	f7ff fa5a 	bl	80012f0 <TIM_TimeBaseInit>
	TIM_ITConfig(TIM11, TIM_IT_Update, ENABLE);
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	2101      	movs	r1, #1
 8001e40:	480b      	ldr	r0, [pc, #44]	; (8001e70 <initTimerMagnetometer+0x64>)
 8001e42:	f7ff fc73 	bl	800172c <TIM_ITConfig>
	TIM_Cmd(TIM11, ENABLE);
 8001e46:	2101      	movs	r1, #1
 8001e48:	4809      	ldr	r0, [pc, #36]	; (8001e70 <initTimerMagnetometer+0x64>)
 8001e4a:	f7ff faa3 	bl	8001394 <TIM_Cmd>

	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_InitStructure.NVIC_IRQChannel = TIM11_IRQn;
 8001e4e:	231b      	movs	r3, #27
 8001e50:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;//TIM_INTERRUPT_PREEMP;
 8001e52:	2301      	movs	r3, #1
 8001e54:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;//TIM_INTERRUPT_SUB;
 8001e56:	2300      	movs	r3, #0
 8001e58:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fe27 	bl	8000ab4 <NVIC_Init>
}
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40011000 	.word	0x40011000

08001e74 <TIM11_IRQHandler>:

//spracovanie prerusenia z TIM6, casovaca pre kontrolku
void TIM11_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM11, TIM_IT_Update) == SET)
 8001e78:	2101      	movs	r1, #1
 8001e7a:	4808      	ldr	r0, [pc, #32]	; (8001e9c <TIM11_IRQHandler+0x28>)
 8001e7c:	f7ff fc7a 	bl	8001774 <TIM_GetITStatus>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d108      	bne.n	8001e98 <TIM11_IRQHandler+0x24>
	{
		compassHeading = readDataCompass();
 8001e86:	f000 fe9f 	bl	8002bc8 <readDataCompass>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <TIM11_IRQHandler+0x2c>)
 8001e8e:	601a      	str	r2, [r3, #0]
		TIM_ClearITPendingBit(TIM11, TIM_IT_Update);
 8001e90:	2101      	movs	r1, #1
 8001e92:	4802      	ldr	r0, [pc, #8]	; (8001e9c <TIM11_IRQHandler+0x28>)
 8001e94:	f7ff fc98 	bl	80017c8 <TIM_ClearITPendingBit>
	}
}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40011000 	.word	0x40011000
 8001ea0:	2000003c 	.word	0x2000003c

08001ea4 <compass_get_heading>:

//vycitanie hodnoty smerovania
int compass_get_heading(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
	return compassHeading;
 8001ea8:	4b02      	ldr	r3, [pc, #8]	; (8001eb4 <compass_get_heading+0x10>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	2000003c 	.word	0x2000003c

08001eb8 <initUSART3>:
 */


#include <bluetooth.h>

void initUSART3(){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0

	running = 0;
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <initUSART3+0xbc>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
	change_goal_request = 0;
 8001ec4:	4b2c      	ldr	r3, [pc, #176]	; (8001f78 <initUSART3+0xc0>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
	goal_bearing = 0;
 8001eca:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <initUSART3+0xc4>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	2004      	movs	r0, #4
 8001ed4:	f7ff f994 	bl	8001200 <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8001ed8:	2101      	movs	r1, #1
 8001eda:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001ede:	f7ff f9cb 	bl	8001278 <RCC_APB1PeriphClockCmd>


	GPIO_InitTypeDef GPIO_usrt;

	GPIO_usrt.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 8001ee2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ee6:	61bb      	str	r3, [r7, #24]
	GPIO_usrt.GPIO_Mode = GPIO_Mode_AF;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	773b      	strb	r3, [r7, #28]
	GPIO_usrt.GPIO_OType = GPIO_OType_PP;
 8001eec:	2300      	movs	r3, #0
 8001eee:	77bb      	strb	r3, [r7, #30]
	GPIO_usrt.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	77fb      	strb	r3, [r7, #31]
	GPIO_usrt.GPIO_Speed = GPIO_Speed_40MHz;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	777b      	strb	r3, [r7, #29]

	GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_USART3);
 8001ef8:	2207      	movs	r2, #7
 8001efa:	210a      	movs	r1, #10
 8001efc:	4820      	ldr	r0, [pc, #128]	; (8001f80 <initUSART3+0xc8>)
 8001efe:	f7fe ff17 	bl	8000d30 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_USART3);
 8001f02:	2207      	movs	r2, #7
 8001f04:	210b      	movs	r1, #11
 8001f06:	481e      	ldr	r0, [pc, #120]	; (8001f80 <initUSART3+0xc8>)
 8001f08:	f7fe ff12 	bl	8000d30 <GPIO_PinAFConfig>

	GPIO_Init(GPIOC, &GPIO_usrt);
 8001f0c:	f107 0318 	add.w	r3, r7, #24
 8001f10:	4619      	mov	r1, r3
 8001f12:	481b      	ldr	r0, [pc, #108]	; (8001f80 <initUSART3+0xc8>)
 8001f14:	f7fe fe2e 	bl	8000b74 <GPIO_Init>

//	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
	//GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);

	USART_InitTypeDef USART_InitStructure;
	USART_InitStructure.USART_BaudRate = 19200;
 8001f18:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8001f1c:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001f22:	2300      	movs	r3, #0
 8001f24:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8001f26:	2300      	movs	r3, #0
 8001f28:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001f2e:	230c      	movs	r3, #12
 8001f30:	827b      	strh	r3, [r7, #18]
	USART_Init(USART3, &USART_InitStructure);
 8001f32:	f107 0308 	add.w	r3, r7, #8
 8001f36:	4619      	mov	r1, r3
 8001f38:	4812      	ldr	r0, [pc, #72]	; (8001f84 <initUSART3+0xcc>)
 8001f3a:	f7ff fd79 	bl	8001a30 <USART_Init>
	USART_Cmd(USART3, ENABLE);
 8001f3e:	2101      	movs	r1, #1
 8001f40:	4810      	ldr	r0, [pc, #64]	; (8001f84 <initUSART3+0xcc>)
 8001f42:	f7ff fe29 	bl	8001b98 <USART_Cmd>

	//interrupt
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 8001f46:	2201      	movs	r2, #1
 8001f48:	f240 5125 	movw	r1, #1317	; 0x525
 8001f4c:	480d      	ldr	r0, [pc, #52]	; (8001f84 <initUSART3+0xcc>)
 8001f4e:	f7ff fe65 	bl	8001c1c <USART_ITConfig>

	//NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);

	  /* Enable the USARTx Interrupt */
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 8001f52:	2327      	movs	r3, #39	; 0x27
 8001f54:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
 8001f56:	2303      	movs	r3, #3
 8001f58:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe fda5 	bl	8000ab4 <NVIC_Init>

	//USART_Cmd(USART1, ENABLE);
}
 8001f6a:	bf00      	nop
 8001f6c:	3720      	adds	r7, #32
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000050 	.word	0x20000050
 8001f78:	20000054 	.word	0x20000054
 8001f7c:	2000004c 	.word	0x2000004c
 8001f80:	40020800 	.word	0x40020800
 8001f84:	40004800 	.word	0x40004800

08001f88 <PutcUART3>:

void PutcUART3(char ch){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
	USART_SendData(USART3, (uint8_t) ch);
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	4619      	mov	r1, r3
 8001f98:	4803      	ldr	r0, [pc, #12]	; (8001fa8 <PutcUART3+0x20>)
 8001f9a:	f7ff fe1d 	bl	8001bd8 <USART_SendData>

}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40004800 	.word	0x40004800

08001fac <USART3_IRQHandler>:

void USART3_IRQHandler(void){
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0

	if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)
 8001fb2:	f240 5125 	movw	r1, #1317	; 0x525
 8001fb6:	4822      	ldr	r0, [pc, #136]	; (8002040 <USART3_IRQHandler+0x94>)
 8001fb8:	f7ff fe78 	bl	8001cac <USART_GetITStatus>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d039      	beq.n	8002036 <USART3_IRQHandler+0x8a>
	{
		USART_ClearITPendingBit(USART3, USART_IT_RXNE);
 8001fc2:	f240 5125 	movw	r1, #1317	; 0x525
 8001fc6:	481e      	ldr	r0, [pc, #120]	; (8002040 <USART3_IRQHandler+0x94>)
 8001fc8:	f7ff feca 	bl	8001d60 <USART_ClearITPendingBit>
		char znak = USART_ReceiveData(USART3);
 8001fcc:	481c      	ldr	r0, [pc, #112]	; (8002040 <USART3_IRQHandler+0x94>)
 8001fce:	f7ff fe15 	bl	8001bfc <USART_ReceiveData>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]

		//ak v predoslom byte bola poziadavka na zmenu ziadaneho uhla,
		//tak ciel zmeni ak dalsi byte je v zadanom rozsahu
		if (change_goal_request){
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <USART3_IRQHandler+0x98>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d012      	beq.n	8002004 <USART3_IRQHandler+0x58>

			if (znak >= '0' && znak <= '7')
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	2b2f      	cmp	r3, #47	; 0x2f
 8001fe2:	d90c      	bls.n	8001ffe <USART3_IRQHandler+0x52>
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	2b37      	cmp	r3, #55	; 0x37
 8001fe8:	d809      	bhi.n	8001ffe <USART3_IRQHandler+0x52>
			goal_bearing = (znak - 48) * 45; //ASCII 0 = 48
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	011a      	lsls	r2, r3, #4
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	4a13      	ldr	r2, [pc, #76]	; (8002048 <USART3_IRQHandler+0x9c>)
 8001ffc:	6013      	str	r3, [r2, #0]
											//rozsah ziadanych hodnot 0-7, cize 360/8 = 45 stupnov
			change_goal_request = 0;
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <USART3_IRQHandler+0x98>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
		}

		switch (znak){
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	2b63      	cmp	r3, #99	; 0x63
 8002008:	d00d      	beq.n	8002026 <USART3_IRQHandler+0x7a>
 800200a:	2b78      	cmp	r3, #120	; 0x78
 800200c:	d10f      	bne.n	800202e <USART3_IRQHandler+0x82>
		case 'x':   // vypinanie/zapinanie pohybu
			if (running)
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <USART3_IRQHandler+0xa0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <USART3_IRQHandler+0x72>
					running = 0;
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <USART3_IRQHandler+0xa0>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
				else running = 1;
			break;
 800201c:	e00b      	b.n	8002036 <USART3_IRQHandler+0x8a>

		switch (znak){
		case 'x':   // vypinanie/zapinanie pohybu
			if (running)
					running = 0;
				else running = 1;
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <USART3_IRQHandler+0xa0>)
 8002020:	2201      	movs	r2, #1
 8002022:	601a      	str	r2, [r3, #0]
			break;
 8002024:	e007      	b.n	8002036 <USART3_IRQHandler+0x8a>
		case 'c': //poziadavka na zmenu ciela, v dalsom byte sa precita, aky bude novy ciel
			change_goal_request = 1;
 8002026:	4b07      	ldr	r3, [pc, #28]	; (8002044 <USART3_IRQHandler+0x98>)
 8002028:	2201      	movs	r2, #1
 800202a:	601a      	str	r2, [r3, #0]
			break;
 800202c:	e003      	b.n	8002036 <USART3_IRQHandler+0x8a>
		default:
			change_goal_request = 0;
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <USART3_IRQHandler+0x98>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
		if (retazec[counter] != '\0'){
			PutcUART2(retazec[counter]);
			counter++;
		}*/
    }
}
 8002034:	e7ff      	b.n	8002036 <USART3_IRQHandler+0x8a>
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40004800 	.word	0x40004800
 8002044:	20000054 	.word	0x20000054
 8002048:	2000004c 	.word	0x2000004c
 800204c:	20000050 	.word	0x20000050

08002050 <sendValue>:

void sendValue(double prekazka){
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	e9c7 0100 	strd	r0, r1, [r7]
	//PutcUART3('m');



	if (running)
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <sendValue+0x48>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d009      	beq.n	8002076 <sendValue+0x26>
		PutcUART3((char)prekazka);
 8002062:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002066:	f7fe fd05 	bl	8000a74 <__aeabi_d2uiz>
 800206a:	4603      	mov	r3, r0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff ff8a 	bl	8001f88 <PutcUART3>
 8002074:	e002      	b.n	800207c <sendValue+0x2c>
	else
		PutcUART3(0xFF);
 8002076:	20ff      	movs	r0, #255	; 0xff
 8002078:	f7ff ff86 	bl	8001f88 <PutcUART3>

	//sleep
	for (int i = 0; i < 250000; i++);
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	e002      	b.n	8002088 <sendValue+0x38>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3301      	adds	r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4a04      	ldr	r2, [pc, #16]	; (800209c <sendValue+0x4c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	ddf8      	ble.n	8002082 <sendValue+0x32>
}
 8002090:	bf00      	nop
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000050 	.word	0x20000050
 800209c:	0003d08f 	.word	0x0003d08f

080020a0 <init>:

#include <bug_0.h>
#include <sensor.h>


int init(){
 80020a0:	b598      	push	{r3, r4, r7, lr}
 80020a2:	af00      	add	r7, sp, #0

	//inicializacia premennych
	obstacle_forward = 0;
 80020a4:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <init+0x58>)
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	f04f 0400 	mov.w	r4, #0
 80020ae:	e882 0018 	stmia.w	r2, {r3, r4}
	obstacle_right = 0;
 80020b2:	4a12      	ldr	r2, [pc, #72]	; (80020fc <init+0x5c>)
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	f04f 0400 	mov.w	r4, #0
 80020bc:	e882 0018 	stmia.w	r2, {r3, r4}
	obstacle_left = 0;
 80020c0:	4a0f      	ldr	r2, [pc, #60]	; (8002100 <init+0x60>)
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	f04f 0400 	mov.w	r4, #0
 80020ca:	e882 0018 	stmia.w	r2, {r3, r4}
	bearing = 0;
 80020ce:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <init+0x64>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
	bearing_error = 0;
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <init+0x68>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
	avoidance_aktiv = 0;
 80020da:	4b0c      	ldr	r3, [pc, #48]	; (800210c <init+0x6c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]

	  initUSART3();
 80020e0:	f7ff feea 	bl	8001eb8 <initUSART3>
	  //inicializacia motorov
	  Motor_init();
 80020e4:	f000 fe7e 	bl	8002de4 <Motor_init>
	  //inicializacia i2c a kompasu
	initI2C1();
 80020e8:	f000 f9d0 	bl	800248c <initI2C1>
	//Status errStat1 =writeBytesToCompass();

	writeBytesToCompass();
 80020ec:	f7ff fe6e 	bl	8001dcc <writeBytesToCompass>
	return 1;
 80020f0:	2301      	movs	r3, #1
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	bd98      	pop	{r3, r4, r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000058 	.word	0x20000058
 80020fc:	20000070 	.word	0x20000070
 8002100:	20000068 	.word	0x20000068
 8002104:	20000078 	.word	0x20000078
 8002108:	20000060 	.word	0x20000060
 800210c:	20000064 	.word	0x20000064

08002110 <run>:


void run(){
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0

	obstacle_forward = forwardSensorGetDistance();
 8002116:	f001 fadb 	bl	80036d0 <forwardSensorGetDistance>
 800211a:	4603      	mov	r3, r0
 800211c:	460c      	mov	r4, r1
 800211e:	4a5b      	ldr	r2, [pc, #364]	; (800228c <run+0x17c>)
 8002120:	e882 0018 	stmia.w	r2, {r3, r4}
	obstacle_right = rightSensorGetDistance();
 8002124:	f001 fa88 	bl	8003638 <rightSensorGetDistance>
 8002128:	4603      	mov	r3, r0
 800212a:	460c      	mov	r4, r1
 800212c:	4a58      	ldr	r2, [pc, #352]	; (8002290 <run+0x180>)
 800212e:	e882 0018 	stmia.w	r2, {r3, r4}
	obstacle_left = leftSensorGetDistance();
 8002132:	f001 fa35 	bl	80035a0 <leftSensorGetDistance>
 8002136:	4603      	mov	r3, r0
 8002138:	460c      	mov	r4, r1
 800213a:	4a56      	ldr	r2, [pc, #344]	; (8002294 <run+0x184>)
 800213c:	e882 0018 	stmia.w	r2, {r3, r4}



	if (obstacle_right < MIN_SIDE_CRASH_DISTANCE){
 8002140:	4b53      	ldr	r3, [pc, #332]	; (8002290 <run+0x180>)
 8002142:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	4b53      	ldr	r3, [pc, #332]	; (8002298 <run+0x188>)
 800214c:	f7fe fc42 	bl	80009d4 <__aeabi_dcmplt>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d008      	beq.n	8002168 <run+0x58>
		 turn_left_one_wheel(15);
 8002156:	200f      	movs	r0, #15
 8002158:	f000 f8d2 	bl	8002300 <turn_left_one_wheel>
		 sendValue(5);
 800215c:	f04f 0000 	mov.w	r0, #0
 8002160:	494e      	ldr	r1, [pc, #312]	; (800229c <run+0x18c>)
 8002162:	f7ff ff75 	bl	8002050 <sendValue>
		 return;
 8002166:	e08e      	b.n	8002286 <run+0x176>
	}

	if (obstacle_left < MIN_SIDE_CRASH_DISTANCE){
 8002168:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <run+0x184>)
 800216a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	4b49      	ldr	r3, [pc, #292]	; (8002298 <run+0x188>)
 8002174:	f7fe fc2e 	bl	80009d4 <__aeabi_dcmplt>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d008      	beq.n	8002190 <run+0x80>
		 turn_right_one_wheel(15);
 800217e:	200f      	movs	r0, #15
 8002180:	f000 f8de 	bl	8002340 <turn_right_one_wheel>
		 sendValue(5);
 8002184:	f04f 0000 	mov.w	r0, #0
 8002188:	4944      	ldr	r1, [pc, #272]	; (800229c <run+0x18c>)
 800218a:	f7ff ff61 	bl	8002050 <sendValue>
		 return;
 800218e:	e07a      	b.n	8002286 <run+0x176>
	}


	if (avoidance_aktiv){
 8002190:	4b43      	ldr	r3, [pc, #268]	; (80022a0 <run+0x190>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d046      	beq.n	8002226 <run+0x116>

		 if (obstacle_forward < MIN_FRONT_DISTANCE){
 8002198:	4b3c      	ldr	r3, [pc, #240]	; (800228c <run+0x17c>)
 800219a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	4b3d      	ldr	r3, [pc, #244]	; (8002298 <run+0x188>)
 80021a4:	f7fe fc16 	bl	80009d4 <__aeabi_dcmplt>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d008      	beq.n	80021c0 <run+0xb0>
			 turn_left(12);
 80021ae:	200c      	movs	r0, #12
 80021b0:	f000 f894 	bl	80022dc <turn_left>
			 sendValue(4);
 80021b4:	f04f 0000 	mov.w	r0, #0
 80021b8:	493a      	ldr	r1, [pc, #232]	; (80022a4 <run+0x194>)
 80021ba:	f7ff ff49 	bl	8002050 <sendValue>
 80021be:	e062      	b.n	8002286 <run+0x176>

		 }
		 else if (obstacle_right > MIN_SIDE_DISTANCE + 30){
 80021c0:	4b33      	ldr	r3, [pc, #204]	; (8002290 <run+0x180>)
 80021c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	4b37      	ldr	r3, [pc, #220]	; (80022a8 <run+0x198>)
 80021cc:	f7fe fc20 	bl	8000a10 <__aeabi_dcmpgt>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d009      	beq.n	80021ea <run+0xda>

			// stop();
			 avoidance_aktiv = 0;
 80021d6:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <run+0x190>)
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
			 sendValue(2);
 80021dc:	f04f 0000 	mov.w	r0, #0
 80021e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80021e4:	f7ff ff34 	bl	8002050 <sendValue>
 80021e8:	e04d      	b.n	8002286 <run+0x176>
			 }

		 else if (obstacle_right > MIN_SIDE_CRASH_DISTANCE && obstacle_left > MIN_SIDE_CRASH_DISTANCE){
 80021ea:	4b29      	ldr	r3, [pc, #164]	; (8002290 <run+0x180>)
 80021ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	4b28      	ldr	r3, [pc, #160]	; (8002298 <run+0x188>)
 80021f6:	f7fe fc0b 	bl	8000a10 <__aeabi_dcmpgt>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d042      	beq.n	8002286 <run+0x176>
 8002200:	4b24      	ldr	r3, [pc, #144]	; (8002294 <run+0x184>)
 8002202:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	4b23      	ldr	r3, [pc, #140]	; (8002298 <run+0x188>)
 800220c:	f7fe fc00 	bl	8000a10 <__aeabi_dcmpgt>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d037      	beq.n	8002286 <run+0x176>
		// else{
		 go_forward();
 8002216:	f000 f857 	bl	80022c8 <go_forward>
		 sendValue(3);
 800221a:	f04f 0000 	mov.w	r0, #0
 800221e:	4923      	ldr	r1, [pc, #140]	; (80022ac <run+0x19c>)
 8002220:	f7ff ff16 	bl	8002050 <sendValue>
		 return;
 8002224:	e02f      	b.n	8002286 <run+0x176>
		}
	} else {

		 if (obstacle_forward > MIN_FRONT_DISTANCE){
 8002226:	4b19      	ldr	r3, [pc, #100]	; (800228c <run+0x17c>)
 8002228:	e9d3 0100 	ldrd	r0, r1, [r3]
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	4b19      	ldr	r3, [pc, #100]	; (8002298 <run+0x188>)
 8002232:	f7fe fbed 	bl	8000a10 <__aeabi_dcmpgt>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01d      	beq.n	8002278 <run+0x168>
			int ret = turn(290, 7); //pokus o vratenie sa na ziadany smer
 800223c:	2107      	movs	r1, #7
 800223e:	f44f 7091 	mov.w	r0, #290	; 0x122
 8002242:	f000 f88d 	bl	8002360 <turn>
 8002246:	6078      	str	r0, [r7, #4]


			 if (ret > 0){
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	dd08      	ble.n	8002260 <run+0x150>
				go_forward();
 800224e:	f000 f83b 	bl	80022c8 <go_forward>
				sendValue(0);
 8002252:	f04f 0000 	mov.w	r0, #0
 8002256:	f04f 0100 	mov.w	r1, #0
 800225a:	f7ff fef9 	bl	8002050 <sendValue>
 800225e:	e012      	b.n	8002286 <run+0x176>
			 }
			else if (ret == 0){     // pri otacani zdetekoval prekazku, cize musi prejst
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10e      	bne.n	8002284 <run+0x174>
				avoidance_aktiv = 1; //cize musi prejst do modu avoidance
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <run+0x190>)
 8002268:	2201      	movs	r2, #1
 800226a:	601a      	str	r2, [r3, #0]
				sendValue(1);
 800226c:	f04f 0000 	mov.w	r0, #0
 8002270:	490f      	ldr	r1, [pc, #60]	; (80022b0 <run+0x1a0>)
 8002272:	f7ff feed 	bl	8002050 <sendValue>
 8002276:	e006      	b.n	8002286 <run+0x176>

				return;
			}
		 }
		 else{
			 stop();
 8002278:	f000 f81c 	bl	80022b4 <stop>
			 avoidance_aktiv = 1;
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <run+0x190>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	e000      	b.n	8002286 <run+0x176>
			else if (ret == 0){     // pri otacani zdetekoval prekazku, cize musi prejst
				avoidance_aktiv = 1; //cize musi prejst do modu avoidance
				sendValue(1);
			}else{

				return;
 8002284:	bf00      	nop
			bearing = readDataCompass();
			turn(bearing + 90, 7); //otocenie vlavo o 90 stupnov
			bearing_error++;
		}*/

}
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	bd90      	pop	{r4, r7, pc}
 800228c:	20000058 	.word	0x20000058
 8002290:	20000070 	.word	0x20000070
 8002294:	20000068 	.word	0x20000068
 8002298:	40240000 	.word	0x40240000
 800229c:	40140000 	.word	0x40140000
 80022a0:	20000064 	.word	0x20000064
 80022a4:	40100000 	.word	0x40100000
 80022a8:	404b8000 	.word	0x404b8000
 80022ac:	40080000 	.word	0x40080000
 80022b0:	3ff00000 	.word	0x3ff00000

080022b4 <stop>:

void stop(){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0

	left_motor_set_speed(0);
 80022b8:	2000      	movs	r0, #0
 80022ba:	f000 fdcb 	bl	8002e54 <left_motor_set_speed>
	right_motor_set_speed(0);
 80022be:	2000      	movs	r0, #0
 80022c0:	f000 fd98 	bl	8002df4 <right_motor_set_speed>
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <go_forward>:

void go_forward(){
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
	left_motor_set_speed(10);
 80022cc:	200a      	movs	r0, #10
 80022ce:	f000 fdc1 	bl	8002e54 <left_motor_set_speed>
	right_motor_set_speed(10);
 80022d2:	200a      	movs	r0, #10
 80022d4:	f000 fd8e 	bl	8002df4 <right_motor_set_speed>
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}

080022dc <turn_left>:

void turn_left(int speed){
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	left_motor_set_speed(-speed + 1);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f1c3 0301 	rsb	r3, r3, #1
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fdb2 	bl	8002e54 <left_motor_set_speed>
	right_motor_set_speed(speed);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 fd7f 	bl	8002df4 <right_motor_set_speed>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop

08002300 <turn_left_one_wheel>:

void turn_left_one_wheel(int speed){
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
	right_motor_set_speed(speed);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 fd73 	bl	8002df4 <right_motor_set_speed>
	left_motor_set_speed(0);
 800230e:	2000      	movs	r0, #0
 8002310:	f000 fda0 	bl	8002e54 <left_motor_set_speed>

}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <turn_right>:

void turn_right(int speed){
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	left_motor_set_speed(speed + 1);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3301      	adds	r3, #1
 8002328:	4618      	mov	r0, r3
 800232a:	f000 fd93 	bl	8002e54 <left_motor_set_speed>
	right_motor_set_speed(-speed);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	425b      	negs	r3, r3
 8002332:	4618      	mov	r0, r3
 8002334:	f000 fd5e 	bl	8002df4 <right_motor_set_speed>
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <turn_right_one_wheel>:

void turn_right_one_wheel(int speed){
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	left_motor_set_speed(speed + 1);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3301      	adds	r3, #1
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fd81 	bl	8002e54 <left_motor_set_speed>
	right_motor_set_speed(0);
 8002352:	2000      	movs	r0, #0
 8002354:	f000 fd4e 	bl	8002df4 <right_motor_set_speed>
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <turn>:


int turn(int request_angle, int speed){
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]

	//bearing = readDataCompass();
	bearing = compass_get_heading();
 800236a:	f7ff fd9b 	bl	8001ea4 <compass_get_heading>
 800236e:	4602      	mov	r2, r0
 8002370:	4b42      	ldr	r3, [pc, #264]	; (800247c <turn+0x11c>)
 8002372:	601a      	str	r2, [r3, #0]

	if (request_angle > 360)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800237a:	dd03      	ble.n	8002384 <turn+0x24>
		request_angle -= 360;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002382:	607b      	str	r3, [r7, #4]


	int angle_diff = bearing - request_angle;
 8002384:	4b3d      	ldr	r3, [pc, #244]	; (800247c <turn+0x11c>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	60bb      	str	r3, [r7, #8]

	int error;
	if (angle_diff > BEARING_ACCURACY || angle_diff < -BEARING_ACCURACY)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b14      	cmp	r3, #20
 8002392:	dc03      	bgt.n	800239c <turn+0x3c>
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f113 0f14 	cmn.w	r3, #20
 800239a:	da02      	bge.n	80023a2 <turn+0x42>
		error = 1;
 800239c:	2301      	movs	r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
		stop();
		return 1;
		error = 0;
	}

	while (error){
 80023a0:	e064      	b.n	800246c <turn+0x10c>

	int error;
	if (angle_diff > BEARING_ACCURACY || angle_diff < -BEARING_ACCURACY)
		error = 1;
	else {
		stop();
 80023a2:	f7ff ff87 	bl	80022b4 <stop>
		return 1;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e064      	b.n	8002474 <turn+0x114>
		error = 0;
	}

	while (error){

		if (!running){ //v pripade, ze pocas otacania pride poziadavka na zastavenie,
 80023aa:	4b35      	ldr	r3, [pc, #212]	; (8002480 <turn+0x120>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d104      	bne.n	80023bc <turn+0x5c>
			stop();     //tak treba ist von z cyklu
 80023b2:	f7ff ff7f 	bl	80022b4 <stop>
			return -1;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ba:	e05b      	b.n	8002474 <turn+0x114>
		}
		bearing = compass_get_heading();
 80023bc:	f7ff fd72 	bl	8001ea4 <compass_get_heading>
 80023c0:	4602      	mov	r2, r0
 80023c2:	4b2e      	ldr	r3, [pc, #184]	; (800247c <turn+0x11c>)
 80023c4:	601a      	str	r2, [r3, #0]
		angle_diff = bearing - request_angle;
 80023c6:	4b2d      	ldr	r3, [pc, #180]	; (800247c <turn+0x11c>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	60bb      	str	r3, [r7, #8]

	//	if (angle_diff < 0)
		//	PutcUART3('-');

		sendValue(abs((char)angle_diff));
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe f825 	bl	8000424 <__aeabi_i2d>
 80023da:	4603      	mov	r3, r0
 80023dc:	460c      	mov	r4, r1
 80023de:	4618      	mov	r0, r3
 80023e0:	4621      	mov	r1, r4
 80023e2:	f7ff fe35 	bl	8002050 <sendValue>

		if (angle_diff > BEARING_ACCURACY || angle_diff < -BEARING_ACCURACY){
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b14      	cmp	r3, #20
 80023ea:	dc03      	bgt.n	80023f4 <turn+0x94>
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f113 0f14 	cmn.w	r3, #20
 80023f2:	da14      	bge.n	800241e <turn+0xbe>
			error = 1;
 80023f4:	2301      	movs	r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
			error = 0;
			return 1;
		}

		//obstacle_forward = forwardSensorGetDistance();
		obstacle_right = rightSensorGetDistance();
 80023f8:	f001 f91e 	bl	8003638 <rightSensorGetDistance>
 80023fc:	4603      	mov	r3, r0
 80023fe:	460c      	mov	r4, r1
 8002400:	4a20      	ldr	r2, [pc, #128]	; (8002484 <turn+0x124>)
 8002402:	e882 0018 	stmia.w	r2, {r3, r4}
		// if (obstacle_forward < MIN_FRONT_DISTANCE + 10){
		if (obstacle_right < MIN_SIDE_DISTANCE){
 8002406:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <turn+0x124>)
 8002408:	e9d3 0100 	ldrd	r0, r1, [r3]
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <turn+0x128>)
 8002412:	f7fe fadf 	bl	80009d4 <__aeabi_dcmplt>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d104      	bne.n	8002426 <turn+0xc6>
 800241c:	e007      	b.n	800242e <turn+0xce>

		if (angle_diff > BEARING_ACCURACY || angle_diff < -BEARING_ACCURACY){
			error = 1;
		}
		else{
			error = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
			return 1;
 8002422:	2301      	movs	r3, #1
 8002424:	e026      	b.n	8002474 <turn+0x114>

		//obstacle_forward = forwardSensorGetDistance();
		obstacle_right = rightSensorGetDistance();
		// if (obstacle_forward < MIN_FRONT_DISTANCE + 10){
		if (obstacle_right < MIN_SIDE_DISTANCE){
			stop();
 8002426:	f7ff ff45 	bl	80022b4 <stop>
			return 0;
 800242a:	2300      	movs	r3, #0
 800242c:	e022      	b.n	8002474 <turn+0x114>

		 }
			if (angle_diff > 180)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2bb4      	cmp	r3, #180	; 0xb4
 8002432:	dd03      	ble.n	800243c <turn+0xdc>
				turn_left(speed);
 8002434:	6838      	ldr	r0, [r7, #0]
 8002436:	f7ff ff51 	bl	80022dc <turn_left>
 800243a:	e017      	b.n	800246c <turn+0x10c>
			else if (angle_diff <= 180 && angle_diff > 0)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2bb4      	cmp	r3, #180	; 0xb4
 8002440:	dc06      	bgt.n	8002450 <turn+0xf0>
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	dd03      	ble.n	8002450 <turn+0xf0>
				turn_right(speed);
 8002448:	6838      	ldr	r0, [r7, #0]
 800244a:	f7ff ff67 	bl	800231c <turn_right>
 800244e:	e00d      	b.n	800246c <turn+0x10c>
			else if (angle_diff <= 0 && angle_diff > - 180)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	dc07      	bgt.n	8002466 <turn+0x106>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	f113 0fb3 	cmn.w	r3, #179	; 0xb3
 800245c:	db03      	blt.n	8002466 <turn+0x106>
				turn_left(speed);
 800245e:	6838      	ldr	r0, [r7, #0]
 8002460:	f7ff ff3c 	bl	80022dc <turn_left>
 8002464:	e002      	b.n	800246c <turn+0x10c>
			else turn_right(speed);
 8002466:	6838      	ldr	r0, [r7, #0]
 8002468:	f7ff ff58 	bl	800231c <turn_right>
		stop();
		return 1;
		error = 0;
	}

	while (error){
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d19b      	bne.n	80023aa <turn+0x4a>
			else if (angle_diff <= 0 && angle_diff > - 180)
				turn_left(speed);
			else turn_right(speed);
		}

	return 1;
 8002472:	2301      	movs	r3, #1
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	bd90      	pop	{r4, r7, pc}
 800247c:	20000078 	.word	0x20000078
 8002480:	20000050 	.word	0x20000050
 8002484:	20000070 	.word	0x20000070
 8002488:	40390000 	.word	0x40390000

0800248c <initI2C1>:

unsigned short gI2C_Timeout;
unsigned char gDataBuffer[16];

void initI2C1(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8002492:	2101      	movs	r1, #1
 8002494:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002498:	f7fe feee 	bl	8001278 <RCC_APB1PeriphClockCmd>
	//RCC_AHBPeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);

	RCC_AHBPeriphClockCmd(I2C1_CONTROL_PINS_PORT_CLK, ENABLE);
 800249c:	2101      	movs	r1, #1
 800249e:	2002      	movs	r0, #2
 80024a0:	f7fe feae 	bl	8001200 <RCC_AHBPeriphClockCmd>

	//GPIO port, PIN, AF Function
	GPIO_PinAFConfig(I2C1_CONTROL_PINS_PORT, I2C1_SDA_PINSOURCE, GPIO_AF_I2C1);
 80024a4:	2204      	movs	r2, #4
 80024a6:	2109      	movs	r1, #9
 80024a8:	4827      	ldr	r0, [pc, #156]	; (8002548 <initI2C1+0xbc>)
 80024aa:	f7fe fc41 	bl	8000d30 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(I2C1_CONTROL_PINS_PORT, I2C1_SCL_PINSOURCE, GPIO_AF_I2C1);
 80024ae:	2204      	movs	r2, #4
 80024b0:	2108      	movs	r1, #8
 80024b2:	4825      	ldr	r0, [pc, #148]	; (8002548 <initI2C1+0xbc>)
 80024b4:	f7fe fc3c 	bl	8000d30 <GPIO_PinAFConfig>

	/*!< GPIO configuration */
	/*!< Configure sEE_I2C pins: SCL */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80024b8:	2302      	movs	r3, #2
 80024ba:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 80024bc:	2303      	movs	r3, #3
 80024be:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80024c0:	2301      	movs	r3, #1
 80024c2:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	75fb      	strb	r3, [r7, #23]


	GPIO_InitStructure.GPIO_Pin = I2C1_SCL_PIN;
 80024c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024cc:	613b      	str	r3, [r7, #16]
	GPIO_Init(I2C1_CONTROL_PINS_PORT, &GPIO_InitStructure);
 80024ce:	f107 0310 	add.w	r3, r7, #16
 80024d2:	4619      	mov	r1, r3
 80024d4:	481c      	ldr	r0, [pc, #112]	; (8002548 <initI2C1+0xbc>)
 80024d6:	f7fe fb4d 	bl	8000b74 <GPIO_Init>

	/*!< Configure sEE_I2C pins: SDA */
	GPIO_InitStructure.GPIO_Pin = I2C1_SDA_PIN;
 80024da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024de:	613b      	str	r3, [r7, #16]
	GPIO_Init(I2C1_CONTROL_PINS_PORT, &GPIO_InitStructure);
 80024e0:	f107 0310 	add.w	r3, r7, #16
 80024e4:	4619      	mov	r1, r3
 80024e6:	4818      	ldr	r0, [pc, #96]	; (8002548 <initI2C1+0xbc>)
 80024e8:	f7fe fb44 	bl	8000b74 <GPIO_Init>
	I2C_InitTypeDef  I2C_InitStructure;

	/*!< I2C configuration */
	/* sEE_I2C configuration */
	 // Enable I2CG reset state //toto pridat
	    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80024ec:	2101      	movs	r1, #1
 80024ee:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80024f2:	f7fe fedf 	bl	80012b4 <RCC_APB1PeriphResetCmd>
	       // Release I2CG from reset state
	       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 80024f6:	2100      	movs	r1, #0
 80024f8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80024fc:	f7fe feda 	bl	80012b4 <RCC_APB1PeriphResetCmd>
	I2C_DeInit(I2C1);//toto pridat
 8002500:	4812      	ldr	r0, [pc, #72]	; (800254c <initI2C1+0xc0>)
 8002502:	f7fe fc5d 	bl	8000dc0 <I2C_DeInit>
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8002506:	2300      	movs	r3, #0
 8002508:	80bb      	strh	r3, [r7, #4]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_16_9;
 800250a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800250e:	80fb      	strh	r3, [r7, #6]
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 8002510:	2300      	movs	r3, #0
 8002512:	813b      	strh	r3, [r7, #8]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8002514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002518:	817b      	strh	r3, [r7, #10]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800251a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800251e:	81bb      	strh	r3, [r7, #12]
	I2C_InitStructure.I2C_ClockSpeed = 400000;
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <initI2C1+0xc4>)
 8002522:	603b      	str	r3, [r7, #0]

	/* Apply sEE_I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 8002524:	463b      	mov	r3, r7
 8002526:	4619      	mov	r1, r3
 8002528:	4808      	ldr	r0, [pc, #32]	; (800254c <initI2C1+0xc0>)
 800252a:	f7fe fc6d 	bl	8000e08 <I2C_Init>

    I2C_Cmd(I2C1, ENABLE);
 800252e:	2101      	movs	r1, #1
 8002530:	4806      	ldr	r0, [pc, #24]	; (800254c <initI2C1+0xc0>)
 8002532:	f7fe fd2b 	bl	8000f8c <I2C_Cmd>
    I2C_AcknowledgeConfig(I2C1, ENABLE);//toto pridat
 8002536:	2101      	movs	r1, #1
 8002538:	4804      	ldr	r0, [pc, #16]	; (800254c <initI2C1+0xc0>)
 800253a:	f7fe fd67 	bl	800100c <I2C_AcknowledgeConfig>
}
 800253e:	bf00      	nop
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40020400 	.word	0x40020400
 800254c:	40005400 	.word	0x40005400
 8002550:	00061a80 	.word	0x00061a80

08002554 <writeByteI2C1>:

Status writeByteI2C1(unsigned char deviceAddress, unsigned char registerAddress, unsigned char data)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
 800255e:	460b      	mov	r3, r1
 8002560:	71bb      	strb	r3, [r7, #6]
 8002562:	4613      	mov	r3, r2
 8002564:	717b      	strb	r3, [r7, #5]
    Status error = I2C_Master_BufferWrite(&data, 1, deviceAddress, registerAddress);
 8002566:	79bb      	ldrb	r3, [r7, #6]
 8002568:	79fa      	ldrb	r2, [r7, #7]
 800256a:	1d78      	adds	r0, r7, #5
 800256c:	2101      	movs	r1, #1
 800256e:	f000 fa77 	bl	8002a60 <I2C_Master_BufferWrite>
 8002572:	4603      	mov	r3, r0
 8002574:	73fb      	strb	r3, [r7, #15]

    return error;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <readByteI2C1>:
    Status error = I2C_Master_BufferWrite(data, length, deviceAddress, registerAddress);
    return error;
}

Status readByteI2C1(unsigned char deviceAddress, unsigned char registerAddress, unsigned char *data)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	603a      	str	r2, [r7, #0]
 800258a:	71fb      	strb	r3, [r7, #7]
 800258c:	460b      	mov	r3, r1
 800258e:	71bb      	strb	r3, [r7, #6]
    gDataBuffer[0] = registerAddress;
 8002590:	4a09      	ldr	r2, [pc, #36]	; (80025b8 <readByteI2C1+0x38>)
 8002592:	79bb      	ldrb	r3, [r7, #6]
 8002594:	7013      	strb	r3, [r2, #0]

    Status error = I2C_Master_BufferRead(gDataBuffer, 1, deviceAddress, registerAddress);
 8002596:	79bb      	ldrb	r3, [r7, #6]
 8002598:	79fa      	ldrb	r2, [r7, #7]
 800259a:	2101      	movs	r1, #1
 800259c:	4806      	ldr	r0, [pc, #24]	; (80025b8 <readByteI2C1+0x38>)
 800259e:	f000 f80d 	bl	80025bc <I2C_Master_BufferRead>
 80025a2:	4603      	mov	r3, r0
 80025a4:	73fb      	strb	r3, [r7, #15]

    *data = gDataBuffer[0];
 80025a6:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <readByteI2C1+0x38>)
 80025a8:	781a      	ldrb	r2, [r3, #0]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	701a      	strb	r2, [r3, #0]

    return error;
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000080 	.word	0x20000080

080025bc <I2C_Master_BufferRead>:

  return 0;
}

Status I2C_Master_BufferRead(unsigned char* pBuffer,  unsigned long NumByteToRead, unsigned char SlaveAddress, unsigned char registerAddress)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	4611      	mov	r1, r2
 80025c8:	461a      	mov	r2, r3
 80025ca:	460b      	mov	r3, r1
 80025cc:	71fb      	strb	r3, [r7, #7]
 80025ce:	4613      	mov	r3, r2
 80025d0:	71bb      	strb	r3, [r7, #6]
    //SwBreak();
    unsigned long temp = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
    unsigned long Timeout = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]

    /* Enable Acknowledgement to be ready for another reception */
    I2C1->CR1  |= CR1_ACK_Set;
 80025da:	4a96      	ldr	r2, [pc, #600]	; (8002834 <I2C_Master_BufferRead+0x278>)
 80025dc:	4b95      	ldr	r3, [pc, #596]	; (8002834 <I2C_Master_BufferRead+0x278>)
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	8013      	strh	r3, [r2, #0]
    /* Clear POS bit */
    I2C1->CR1  &= CR1_POS_Reset;
 80025ea:	4a92      	ldr	r2, [pc, #584]	; (8002834 <I2C_Master_BufferRead+0x278>)
 80025ec:	4b91      	ldr	r3, [pc, #580]	; (8002834 <I2C_Master_BufferRead+0x278>)
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	8013      	strh	r3, [r2, #0]
    /* Enable Error IT (used in all modes: DMA, Polling and Interrupts */
    //I2C1->CR2 |= I2C_IT_ERR;

    Timeout = 0xFFFF;
 80025fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025fe:	617b      	str	r3, [r7, #20]
    /* Send START condition */
    I2C1->CR1 |= CR1_START_Set;
 8002600:	4a8c      	ldr	r2, [pc, #560]	; (8002834 <I2C_Master_BufferRead+0x278>)
 8002602:	4b8c      	ldr	r3, [pc, #560]	; (8002834 <I2C_Master_BufferRead+0x278>)
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b29b      	uxth	r3, r3
 8002608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260c:	b29b      	uxth	r3, r3
 800260e:	8013      	strh	r3, [r2, #0]
    /* Wait until SB flag is set: EV5 */
    while ((I2C1->SR1&0x0001) != 0x0001)
 8002610:	e006      	b.n	8002620 <I2C_Master_BufferRead+0x64>
    {
        if (Timeout-- == 0)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	1e5a      	subs	r2, r3, #1
 8002616:	617a      	str	r2, [r7, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <I2C_Master_BufferRead+0x64>
        {
            return StartConditionError;
 800261c:	2301      	movs	r3, #1
 800261e:	e218      	b.n	8002a52 <I2C_Master_BufferRead+0x496>

    Timeout = 0xFFFF;
    /* Send START condition */
    I2C1->CR1 |= CR1_START_Set;
    /* Wait until SB flag is set: EV5 */
    while ((I2C1->SR1&0x0001) != 0x0001)
 8002620:	4b84      	ldr	r3, [pc, #528]	; (8002834 <I2C_Master_BufferRead+0x278>)
 8002622:	8a9b      	ldrh	r3, [r3, #20]
 8002624:	b29b      	uxth	r3, r3
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f1      	beq.n	8002612 <I2C_Master_BufferRead+0x56>
        }
    }

    /* Send slave address */
    /* Reset the address bit0 for write*/
    SlaveAddress &= 0xFFFE;
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	71fb      	strb	r3, [r7, #7]
    /* Send the slave address */
    I2C1->DR = SlaveAddress;
 8002636:	4b7f      	ldr	r3, [pc, #508]	; (8002834 <I2C_Master_BufferRead+0x278>)
 8002638:	79fa      	ldrb	r2, [r7, #7]
 800263a:	b292      	uxth	r2, r2
 800263c:	821a      	strh	r2, [r3, #16]
    Timeout = I2C_TIMEOUT;
 800263e:	2364      	movs	r3, #100	; 0x64
 8002640:	617b      	str	r3, [r7, #20]
    /* Wait until ADDR is set: EV6 */
    while ((I2C1->SR1 &0x0002) != 0x0002)
 8002642:	e016      	b.n	8002672 <I2C_Master_BufferRead+0xb6>
    {
        if (Timeout-- == 0)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	1e5a      	subs	r2, r3, #1
 8002648:	617a      	str	r2, [r7, #20]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d111      	bne.n	8002672 <I2C_Master_BufferRead+0xb6>
        {
            I2C1->CR1 |= CR1_STOP_Set;
 800264e:	4a79      	ldr	r2, [pc, #484]	; (8002834 <I2C_Master_BufferRead+0x278>)
 8002650:	4b78      	ldr	r3, [pc, #480]	; (8002834 <I2C_Master_BufferRead+0x278>)
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800265a:	b29b      	uxth	r3, r3
 800265c:	8013      	strh	r3, [r2, #0]
            /* Make sure that the STOP bit is cleared by Hardware */
            while ((I2C1->CR1&0x200) == 0x200);
 800265e:	bf00      	nop
 8002660:	4b74      	ldr	r3, [pc, #464]	; (8002834 <I2C_Master_BufferRead+0x278>)
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f8      	bne.n	8002660 <I2C_Master_BufferRead+0xa4>
            return AddressAckError;
 800266e:	2302      	movs	r3, #2
 8002670:	e1ef      	b.n	8002a52 <I2C_Master_BufferRead+0x496>
    SlaveAddress &= 0xFFFE;
    /* Send the slave address */
    I2C1->DR = SlaveAddress;
    Timeout = I2C_TIMEOUT;
    /* Wait until ADDR is set: EV6 */
    while ((I2C1->SR1 &0x0002) != 0x0002)
 8002672:	4b70      	ldr	r3, [pc, #448]	; (8002834 <I2C_Master_BufferRead+0x278>)
 8002674:	8a9b      	ldrh	r3, [r3, #20]
 8002676:	b29b      	uxth	r3, r3
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0e1      	beq.n	8002644 <I2C_Master_BufferRead+0x88>
            return AddressAckError;
        }

    }
    /* Clear ADDR flag by reading SR2 register */
    temp = I2C1->SR2;
 8002680:	4b6c      	ldr	r3, [pc, #432]	; (8002834 <I2C_Master_BufferRead+0x278>)
 8002682:	8b1b      	ldrh	r3, [r3, #24]
 8002684:	b29b      	uxth	r3, r3
 8002686:	613b      	str	r3, [r7, #16]

    I2C1->DR = registerAddress;
 8002688:	4b6a      	ldr	r3, [pc, #424]	; (8002834 <I2C_Master_BufferRead+0x278>)
 800268a:	79ba      	ldrb	r2, [r7, #6]
 800268c:	b292      	uxth	r2, r2
 800268e:	821a      	strh	r2, [r3, #16]
    /* Poll on BTF to receive data because in polling mode we can not guarantee the
      EV8 software sequence is managed before the current byte transfer completes */
    while ((I2C1->SR1 & 0x00004) != 0x000004);
 8002690:	bf00      	nop
 8002692:	4b68      	ldr	r3, [pc, #416]	; (8002834 <I2C_Master_BufferRead+0x278>)
 8002694:	8a9b      	ldrh	r3, [r3, #20]
 8002696:	b29b      	uxth	r3, r3
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f8      	beq.n	8002692 <I2C_Master_BufferRead+0xd6>

    if (NumByteToRead == 1)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d17e      	bne.n	80027a4 <I2C_Master_BufferRead+0x1e8>
    {
        Timeout = I2C_TIMEOUT;
 80026a6:	2364      	movs	r3, #100	; 0x64
 80026a8:	617b      	str	r3, [r7, #20]
        /* Send repeated START condition */
        I2C1->CR1 |= CR1_START_Set;
 80026aa:	4a62      	ldr	r2, [pc, #392]	; (8002834 <I2C_Master_BufferRead+0x278>)
 80026ac:	4b61      	ldr	r3, [pc, #388]	; (8002834 <I2C_Master_BufferRead+0x278>)
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	8013      	strh	r3, [r2, #0]
        /* Wait until SB flag is set: EV5  */
        while ((I2C1->SR1&0x0001) != 0x0001)
 80026ba:	e006      	b.n	80026ca <I2C_Master_BufferRead+0x10e>
        {
            if (Timeout-- == 0)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	1e5a      	subs	r2, r3, #1
 80026c0:	617a      	str	r2, [r7, #20]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <I2C_Master_BufferRead+0x10e>
            {
                return RestartConditionError;
 80026c6:	2304      	movs	r3, #4
 80026c8:	e1c3      	b.n	8002a52 <I2C_Master_BufferRead+0x496>
    {
        Timeout = I2C_TIMEOUT;
        /* Send repeated START condition */
        I2C1->CR1 |= CR1_START_Set;
        /* Wait until SB flag is set: EV5  */
        while ((I2C1->SR1&0x0001) != 0x0001)
 80026ca:	4b5a      	ldr	r3, [pc, #360]	; (8002834 <I2C_Master_BufferRead+0x278>)
 80026cc:	8a9b      	ldrh	r3, [r3, #20]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f1      	beq.n	80026bc <I2C_Master_BufferRead+0x100>
                return RestartConditionError;
            }
        }
        /* Send slave address */
        /* Reset the address bit0 for read */
        SlaveAddress |= 0x0001;
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	71fb      	strb	r3, [r7, #7]
        /* Send the slave address */
        I2C1->DR = SlaveAddress;
 80026e0:	4b54      	ldr	r3, [pc, #336]	; (8002834 <I2C_Master_BufferRead+0x278>)
 80026e2:	79fa      	ldrb	r2, [r7, #7]
 80026e4:	b292      	uxth	r2, r2
 80026e6:	821a      	strh	r2, [r3, #16]
        /* Wait until ADDR is set: EV6_3, then program ACK = 0, clear ADDR
        and program the STOP just after ADDR is cleared. The EV6_3
        software sequence must complete before the current byte end of transfer.*/
        /* Wait until ADDR is set */
        Timeout = I2C_TIMEOUT;
 80026e8:	2364      	movs	r3, #100	; 0x64
 80026ea:	617b      	str	r3, [r7, #20]
        while ((I2C1->SR1&0x0002) != 0x0002)
 80026ec:	e01e      	b.n	800272c <I2C_Master_BufferRead+0x170>
        {
            if (Timeout-- == 0)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	1e5a      	subs	r2, r3, #1
 80026f2:	617a      	str	r2, [r7, #20]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d119      	bne.n	800272c <I2C_Master_BufferRead+0x170>
            {
                /* EV8_2: Wait until BTF is set before programming the STOP */
                while ((I2C1->SR1 & 0x00004) != 0x000004);
 80026f8:	bf00      	nop
 80026fa:	4b4e      	ldr	r3, [pc, #312]	; (8002834 <I2C_Master_BufferRead+0x278>)
 80026fc:	8a9b      	ldrh	r3, [r3, #20]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f8      	beq.n	80026fa <I2C_Master_BufferRead+0x13e>
                /* Send STOP condition */
                I2C1->CR1 |= CR1_STOP_Set;
 8002708:	4a4a      	ldr	r2, [pc, #296]	; (8002834 <I2C_Master_BufferRead+0x278>)
 800270a:	4b4a      	ldr	r3, [pc, #296]	; (8002834 <I2C_Master_BufferRead+0x278>)
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	b29b      	uxth	r3, r3
 8002710:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002714:	b29b      	uxth	r3, r3
 8002716:	8013      	strh	r3, [r2, #0]
                /* Make sure that the STOP bit is cleared by Hardware */
                while ((I2C1->CR1&0x200) == 0x200);
 8002718:	bf00      	nop
 800271a:	4b46      	ldr	r3, [pc, #280]	; (8002834 <I2C_Master_BufferRead+0x278>)
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	b29b      	uxth	r3, r3
 8002720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f8      	bne.n	800271a <I2C_Master_BufferRead+0x15e>
                return AddressAckError;
 8002728:	2302      	movs	r3, #2
 800272a:	e192      	b.n	8002a52 <I2C_Master_BufferRead+0x496>
        /* Wait until ADDR is set: EV6_3, then program ACK = 0, clear ADDR
        and program the STOP just after ADDR is cleared. The EV6_3
        software sequence must complete before the current byte end of transfer.*/
        /* Wait until ADDR is set */
        Timeout = I2C_TIMEOUT;
        while ((I2C1->SR1&0x0002) != 0x0002)
 800272c:	4b41      	ldr	r3, [pc, #260]	; (8002834 <I2C_Master_BufferRead+0x278>)
 800272e:	8a9b      	ldrh	r3, [r3, #20]
 8002730:	b29b      	uxth	r3, r3
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0d9      	beq.n	80026ee <I2C_Master_BufferRead+0x132>
                while ((I2C1->CR1&0x200) == 0x200);
                return AddressAckError;
            }
        }
        /* Clear ACK bit */
        I2C1->CR1 &= CR1_ACK_Reset;
 800273a:	4a3e      	ldr	r2, [pc, #248]	; (8002834 <I2C_Master_BufferRead+0x278>)
 800273c:	4b3d      	ldr	r3, [pc, #244]	; (8002834 <I2C_Master_BufferRead+0x278>)
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002746:	b29b      	uxth	r3, r3
 8002748:	8013      	strh	r3, [r2, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 800274a:	b672      	cpsid	i
        /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
        software sequence must complete before the current byte end of transfer */
        __disable_irq();
        /* Clear ADDR flag */
        temp = I2C1->SR2;
 800274c:	4b39      	ldr	r3, [pc, #228]	; (8002834 <I2C_Master_BufferRead+0x278>)
 800274e:	8b1b      	ldrh	r3, [r3, #24]
 8002750:	b29b      	uxth	r3, r3
 8002752:	613b      	str	r3, [r7, #16]
        /* Program the STOP */
        I2C1->CR1 |= CR1_STOP_Set;
 8002754:	4a37      	ldr	r2, [pc, #220]	; (8002834 <I2C_Master_BufferRead+0x278>)
 8002756:	4b37      	ldr	r3, [pc, #220]	; (8002834 <I2C_Master_BufferRead+0x278>)
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002760:	b29b      	uxth	r3, r3
 8002762:	8013      	strh	r3, [r2, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 8002764:	b662      	cpsie	i
        /* Re-enable IRQs */
        __enable_irq();
        /* Wait until a data is received in DR register (RXNE = 1) EV7 */
        while ((I2C1->SR1 & 0x00040) != 0x000040);
 8002766:	bf00      	nop
 8002768:	4b32      	ldr	r3, [pc, #200]	; (8002834 <I2C_Master_BufferRead+0x278>)
 800276a:	8a9b      	ldrh	r3, [r3, #20]
 800276c:	b29b      	uxth	r3, r3
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f8      	beq.n	8002768 <I2C_Master_BufferRead+0x1ac>
        /* Read the data */
        *pBuffer = I2C1->DR;
 8002776:	4b2f      	ldr	r3, [pc, #188]	; (8002834 <I2C_Master_BufferRead+0x278>)
 8002778:	8a1b      	ldrh	r3, [r3, #16]
 800277a:	b29b      	uxth	r3, r3
 800277c:	b2da      	uxtb	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	701a      	strb	r2, [r3, #0]
        /* Make sure that the STOP bit is cleared by Hardware before CR1 write access */
        while ((I2C1->CR1&0x200) == 0x200);
 8002782:	bf00      	nop
 8002784:	4b2b      	ldr	r3, [pc, #172]	; (8002834 <I2C_Master_BufferRead+0x278>)
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	b29b      	uxth	r3, r3
 800278a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f8      	bne.n	8002784 <I2C_Master_BufferRead+0x1c8>
        /* Enable Acknowledgement to be ready for another reception */
        I2C1->CR1 |= CR1_ACK_Set;
 8002792:	4a28      	ldr	r2, [pc, #160]	; (8002834 <I2C_Master_BufferRead+0x278>)
 8002794:	4b27      	ldr	r3, [pc, #156]	; (8002834 <I2C_Master_BufferRead+0x278>)
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	b29b      	uxth	r3, r3
 800279a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800279e:	b29b      	uxth	r3, r3
 80027a0:	8013      	strh	r3, [r2, #0]
 80027a2:	e144      	b.n	8002a2e <I2C_Master_BufferRead+0x472>
    }

    else if (NumByteToRead == 2)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	f040 8091 	bne.w	80028ce <I2C_Master_BufferRead+0x312>
    {
        /* Set POS bit */
        I2C1->CR1 |= CR1_POS_Set;
 80027ac:	4a21      	ldr	r2, [pc, #132]	; (8002834 <I2C_Master_BufferRead+0x278>)
 80027ae:	4b21      	ldr	r3, [pc, #132]	; (8002834 <I2C_Master_BufferRead+0x278>)
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	8013      	strh	r3, [r2, #0]
        Timeout = I2C_TIMEOUT;
 80027bc:	2364      	movs	r3, #100	; 0x64
 80027be:	617b      	str	r3, [r7, #20]
        /* Send START condition */
        I2C1->CR1 |= CR1_START_Set;
 80027c0:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <I2C_Master_BufferRead+0x278>)
 80027c2:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <I2C_Master_BufferRead+0x278>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	8013      	strh	r3, [r2, #0]
        /* Wait until SB flag is set: EV5 */
        while ((I2C1->SR1&0x0001) != 0x0001)
 80027d0:	e006      	b.n	80027e0 <I2C_Master_BufferRead+0x224>
        {
            if (Timeout-- == 0)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	1e5a      	subs	r2, r3, #1
 80027d6:	617a      	str	r2, [r7, #20]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <I2C_Master_BufferRead+0x224>
            {
                return RestartConditionError;
 80027dc:	2304      	movs	r3, #4
 80027de:	e138      	b.n	8002a52 <I2C_Master_BufferRead+0x496>
        I2C1->CR1 |= CR1_POS_Set;
        Timeout = I2C_TIMEOUT;
        /* Send START condition */
        I2C1->CR1 |= CR1_START_Set;
        /* Wait until SB flag is set: EV5 */
        while ((I2C1->SR1&0x0001) != 0x0001)
 80027e0:	4b14      	ldr	r3, [pc, #80]	; (8002834 <I2C_Master_BufferRead+0x278>)
 80027e2:	8a9b      	ldrh	r3, [r3, #20]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f1      	beq.n	80027d2 <I2C_Master_BufferRead+0x216>
            if (Timeout-- == 0)
            {
                return RestartConditionError;
            }
        }
        Timeout = I2C_TIMEOUT;
 80027ee:	2364      	movs	r3, #100	; 0x64
 80027f0:	617b      	str	r3, [r7, #20]
        /* Send slave address */
        /* Set the address bit0 for read */
        SlaveAddress |= 0x0001;
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	71fb      	strb	r3, [r7, #7]
        /* Send the slave address */
        I2C1->DR = SlaveAddress;
 80027fa:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <I2C_Master_BufferRead+0x278>)
 80027fc:	79fa      	ldrb	r2, [r7, #7]
 80027fe:	b292      	uxth	r2, r2
 8002800:	821a      	strh	r2, [r3, #16]
        /* Wait until ADDR is set: EV6 */
        while ((I2C1->SR1&0x0002) != 0x0002)
 8002802:	e019      	b.n	8002838 <I2C_Master_BufferRead+0x27c>
        {
            if (Timeout-- == 0)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	1e5a      	subs	r2, r3, #1
 8002808:	617a      	str	r2, [r7, #20]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d114      	bne.n	8002838 <I2C_Master_BufferRead+0x27c>
            {
                I2C1->CR1 |= CR1_STOP_Set;
 800280e:	4a09      	ldr	r2, [pc, #36]	; (8002834 <I2C_Master_BufferRead+0x278>)
 8002810:	4b08      	ldr	r3, [pc, #32]	; (8002834 <I2C_Master_BufferRead+0x278>)
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800281a:	b29b      	uxth	r3, r3
 800281c:	8013      	strh	r3, [r2, #0]
                /* Make sure that the STOP bit is cleared by Hardware */
                while ((I2C1->CR1&0x200) == 0x200);
 800281e:	bf00      	nop
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <I2C_Master_BufferRead+0x278>)
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f8      	bne.n	8002820 <I2C_Master_BufferRead+0x264>
                return AddressAckError;
 800282e:	2302      	movs	r3, #2
 8002830:	e10f      	b.n	8002a52 <I2C_Master_BufferRead+0x496>
 8002832:	bf00      	nop
 8002834:	40005400 	.word	0x40005400
        /* Set the address bit0 for read */
        SlaveAddress |= 0x0001;
        /* Send the slave address */
        I2C1->DR = SlaveAddress;
        /* Wait until ADDR is set: EV6 */
        while ((I2C1->SR1&0x0002) != 0x0002)
 8002838:	4b88      	ldr	r3, [pc, #544]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 800283a:	8a9b      	ldrh	r3, [r3, #20]
 800283c:	b29b      	uxth	r3, r3
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0de      	beq.n	8002804 <I2C_Master_BufferRead+0x248>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 8002846:	b672      	cpsid	i
        /* EV6_1: The acknowledge disable should be done just after EV6,
        that is after ADDR is cleared, so disable all active IRQs around ADDR clearing and
        ACK clearing */
        __disable_irq();
        /* Clear ADDR by reading SR2 register  */
        temp = I2C1->SR2;
 8002848:	4b84      	ldr	r3, [pc, #528]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 800284a:	8b1b      	ldrh	r3, [r3, #24]
 800284c:	b29b      	uxth	r3, r3
 800284e:	613b      	str	r3, [r7, #16]
        /* Clear ACK */
        I2C1->CR1 &= CR1_ACK_Reset;
 8002850:	4a82      	ldr	r2, [pc, #520]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 8002852:	4b82      	ldr	r3, [pc, #520]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	b29b      	uxth	r3, r3
 8002858:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800285c:	b29b      	uxth	r3, r3
 800285e:	8013      	strh	r3, [r2, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 8002860:	b662      	cpsie	i
        /*Re-enable IRQs */
        __enable_irq();
        /* Wait until BTF is set */
        while ((I2C1->SR1 & 0x00004) != 0x000004);
 8002862:	bf00      	nop
 8002864:	4b7d      	ldr	r3, [pc, #500]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 8002866:	8a9b      	ldrh	r3, [r3, #20]
 8002868:	b29b      	uxth	r3, r3
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f8      	beq.n	8002864 <I2C_Master_BufferRead+0x2a8>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 8002872:	b672      	cpsid	i
        /* Disable IRQs around STOP programming and data reading because of the limitation ?*/
        __disable_irq();
        /* Program the STOP */
        I2C_GenerateSTOP(I2C1, ENABLE);
 8002874:	2101      	movs	r1, #1
 8002876:	4879      	ldr	r0, [pc, #484]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 8002878:	f7fe fba8 	bl	8000fcc <I2C_GenerateSTOP>
        /* Read first data */
        *pBuffer = I2C1->DR;
 800287c:	4b77      	ldr	r3, [pc, #476]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 800287e:	8a1b      	ldrh	r3, [r3, #16]
 8002880:	b29b      	uxth	r3, r3
 8002882:	b2da      	uxtb	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	701a      	strb	r2, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 8002888:	b662      	cpsie	i
        /* Re-enable IRQs */
        __enable_irq();
        /**/
        pBuffer++;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	3301      	adds	r3, #1
 800288e:	60fb      	str	r3, [r7, #12]
        /* Read second data */
        *pBuffer = I2C1->DR;
 8002890:	4b72      	ldr	r3, [pc, #456]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 8002892:	8a1b      	ldrh	r3, [r3, #16]
 8002894:	b29b      	uxth	r3, r3
 8002896:	b2da      	uxtb	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	701a      	strb	r2, [r3, #0]
        /* Make sure that the STOP bit is cleared by Hardware before CR1 write access */
        while ((I2C1->CR1&0x200) == 0x200);
 800289c:	bf00      	nop
 800289e:	4b6f      	ldr	r3, [pc, #444]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f8      	bne.n	800289e <I2C_Master_BufferRead+0x2e2>
        /* Enable Acknowledgement to be ready for another reception */
        I2C1->CR1  |= CR1_ACK_Set;
 80028ac:	4a6b      	ldr	r2, [pc, #428]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 80028ae:	4b6b      	ldr	r3, [pc, #428]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	8013      	strh	r3, [r2, #0]
        /* Clear POS bit */
        I2C1->CR1  &= CR1_POS_Reset;
 80028bc:	4a67      	ldr	r2, [pc, #412]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 80028be:	4b67      	ldr	r3, [pc, #412]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	8013      	strh	r3, [r2, #0]
 80028cc:	e0af      	b.n	8002a2e <I2C_Master_BufferRead+0x472>
    }

    else
    {

        Timeout = I2C_TIMEOUT;
 80028ce:	2364      	movs	r3, #100	; 0x64
 80028d0:	617b      	str	r3, [r7, #20]
        /* Send START condition */
        I2C1->CR1 |= CR1_START_Set;
 80028d2:	4a62      	ldr	r2, [pc, #392]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 80028d4:	4b61      	ldr	r3, [pc, #388]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028de:	b29b      	uxth	r3, r3
 80028e0:	8013      	strh	r3, [r2, #0]
        /* Wait until SB flag is set: EV5 */
        while ((I2C1->SR1&0x0001) != 0x0001)
 80028e2:	e006      	b.n	80028f2 <I2C_Master_BufferRead+0x336>
        {
            if (Timeout-- == 0)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	1e5a      	subs	r2, r3, #1
 80028e8:	617a      	str	r2, [r7, #20]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <I2C_Master_BufferRead+0x336>
            {
                return RestartConditionError;
 80028ee:	2304      	movs	r3, #4
 80028f0:	e0af      	b.n	8002a52 <I2C_Master_BufferRead+0x496>

        Timeout = I2C_TIMEOUT;
        /* Send START condition */
        I2C1->CR1 |= CR1_START_Set;
        /* Wait until SB flag is set: EV5 */
        while ((I2C1->SR1&0x0001) != 0x0001)
 80028f2:	4b5a      	ldr	r3, [pc, #360]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 80028f4:	8a9b      	ldrh	r3, [r3, #20]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f1      	beq.n	80028e4 <I2C_Master_BufferRead+0x328>
            if (Timeout-- == 0)
            {
                return RestartConditionError;
            }
        }
        Timeout = I2C_TIMEOUT;
 8002900:	2364      	movs	r3, #100	; 0x64
 8002902:	617b      	str	r3, [r7, #20]
        /* Send slave address */
        /* Reset the address bit0 for write */
        SlaveAddress |= OAR1_ADD0_Set;
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	71fb      	strb	r3, [r7, #7]
        /* Send the slave address */
        I2C1->DR = SlaveAddress;
 800290c:	4b53      	ldr	r3, [pc, #332]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 800290e:	79fa      	ldrb	r2, [r7, #7]
 8002910:	b292      	uxth	r2, r2
 8002912:	821a      	strh	r2, [r3, #16]
        /* Wait until ADDR is set: EV6 */
        while ((I2C1->SR1&0x0002) != 0x0002)
 8002914:	e016      	b.n	8002944 <I2C_Master_BufferRead+0x388>
        {
            if (Timeout-- == 0)
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	1e5a      	subs	r2, r3, #1
 800291a:	617a      	str	r2, [r7, #20]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d111      	bne.n	8002944 <I2C_Master_BufferRead+0x388>
            {
                I2C1->CR1 |= CR1_STOP_Set;
 8002920:	4a4e      	ldr	r2, [pc, #312]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 8002922:	4b4e      	ldr	r3, [pc, #312]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	b29b      	uxth	r3, r3
 8002928:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800292c:	b29b      	uxth	r3, r3
 800292e:	8013      	strh	r3, [r2, #0]
                /* Make sure that the STOP bit is cleared by Hardware */
                while ((I2C1->CR1&0x200) == 0x200);
 8002930:	bf00      	nop
 8002932:	4b4a      	ldr	r3, [pc, #296]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f8      	bne.n	8002932 <I2C_Master_BufferRead+0x376>
                return AddressAckError;
 8002940:	2302      	movs	r3, #2
 8002942:	e086      	b.n	8002a52 <I2C_Master_BufferRead+0x496>
        /* Reset the address bit0 for write */
        SlaveAddress |= OAR1_ADD0_Set;
        /* Send the slave address */
        I2C1->DR = SlaveAddress;
        /* Wait until ADDR is set: EV6 */
        while ((I2C1->SR1&0x0002) != 0x0002)
 8002944:	4b45      	ldr	r3, [pc, #276]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 8002946:	8a9b      	ldrh	r3, [r3, #20]
 8002948:	b29b      	uxth	r3, r3
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0e1      	beq.n	8002916 <I2C_Master_BufferRead+0x35a>
                while ((I2C1->CR1&0x200) == 0x200);
                return AddressAckError;
            }
        }
        /* Clear ADDR by reading SR2 status register */
        temp = I2C1->SR2;
 8002952:	4b42      	ldr	r3, [pc, #264]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 8002954:	8b1b      	ldrh	r3, [r3, #24]
 8002956:	b29b      	uxth	r3, r3
 8002958:	613b      	str	r3, [r7, #16]
        /* While there is data to be read */
        while (NumByteToRead)
 800295a:	e055      	b.n	8002a08 <I2C_Master_BufferRead+0x44c>
        {
            /* Receive bytes from first byte until byte N-3 */
            if (NumByteToRead != 3)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d013      	beq.n	800298a <I2C_Master_BufferRead+0x3ce>
            {
                /* Poll on BTF to receive data because in polling mode we can not guarantee the
                EV7 software sequence is managed before the current byte transfer completes */
                while ((I2C1->SR1 & 0x00004) != 0x000004);
 8002962:	bf00      	nop
 8002964:	4b3d      	ldr	r3, [pc, #244]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 8002966:	8a9b      	ldrh	r3, [r3, #20]
 8002968:	b29b      	uxth	r3, r3
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f8      	beq.n	8002964 <I2C_Master_BufferRead+0x3a8>
                /* Read data */
                *pBuffer = I2C1->DR;
 8002972:	4b3a      	ldr	r3, [pc, #232]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 8002974:	8a1b      	ldrh	r3, [r3, #16]
 8002976:	b29b      	uxth	r3, r3
 8002978:	b2da      	uxtb	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	701a      	strb	r2, [r3, #0]
                /* */
                pBuffer++;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3301      	adds	r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
                /* Decrement the read bytes counter */
                NumByteToRead--;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	3b01      	subs	r3, #1
 8002988:	60bb      	str	r3, [r7, #8]
            }

            /* it remains to read three data: data N-2, data N-1, Data N */
            if (NumByteToRead == 3)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b03      	cmp	r3, #3
 800298e:	d13b      	bne.n	8002a08 <I2C_Master_BufferRead+0x44c>
            {

                /* Wait until BTF is set: Data N-2 in DR and data N -1 in shift register */
                while ((I2C1->SR1 & 0x00004) != 0x000004);
 8002990:	bf00      	nop
 8002992:	4b32      	ldr	r3, [pc, #200]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 8002994:	8a9b      	ldrh	r3, [r3, #20]
 8002996:	b29b      	uxth	r3, r3
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f8      	beq.n	8002992 <I2C_Master_BufferRead+0x3d6>
                /* Clear ACK */
                I2C1->CR1 &= CR1_ACK_Reset;
 80029a0:	4a2e      	ldr	r2, [pc, #184]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 80029a2:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	8013      	strh	r3, [r2, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80029b0:	b672      	cpsid	i

                /* Disable IRQs around data reading and STOP programming because of the
                limitation ? */
                __disable_irq();
                /* Read Data N-2 */
                *pBuffer = I2C1->DR;
 80029b2:	4b2a      	ldr	r3, [pc, #168]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 80029b4:	8a1b      	ldrh	r3, [r3, #16]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	701a      	strb	r2, [r3, #0]
                /* Increment */
                pBuffer++;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	3301      	adds	r3, #1
 80029c2:	60fb      	str	r3, [r7, #12]
                /* Program the STOP */
                I2C1->CR1 |= CR1_STOP_Set;
 80029c4:	4a25      	ldr	r2, [pc, #148]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 80029c6:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	8013      	strh	r3, [r2, #0]
                /* Read DataN-1 */
                *pBuffer = I2C1->DR;
 80029d4:	4b21      	ldr	r3, [pc, #132]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 80029d6:	8a1b      	ldrh	r3, [r3, #16]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	701a      	strb	r2, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80029e0:	b662      	cpsie	i
                /* Re-enable IRQs */
                __enable_irq();
                /* Increment */
                pBuffer++;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3301      	adds	r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
                /* Wait until RXNE is set (DR contains the last data) */
                while ((I2C1->SR1 & 0x00040) != 0x000040);
 80029e8:	bf00      	nop
 80029ea:	4b1c      	ldr	r3, [pc, #112]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 80029ec:	8a9b      	ldrh	r3, [r3, #20]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f8      	beq.n	80029ea <I2C_Master_BufferRead+0x42e>
                /* Read DataN */
                *pBuffer = I2C1->DR;
 80029f8:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 80029fa:	8a1b      	ldrh	r3, [r3, #16]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	701a      	strb	r2, [r3, #0]
                /* Reset the number of bytes to be read by master */
                NumByteToRead = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60bb      	str	r3, [r7, #8]
            }
        }
        /* Clear ADDR by reading SR2 status register */
        temp = I2C1->SR2;
        /* While there is data to be read */
        while (NumByteToRead)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1a6      	bne.n	800295c <I2C_Master_BufferRead+0x3a0>
                NumByteToRead = 0;

            }
        }
        /* Make sure that the STOP bit is cleared by Hardware before CR1 write access */
        while ((I2C1->CR1&0x200) == 0x200);
 8002a0e:	bf00      	nop
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f8      	bne.n	8002a10 <I2C_Master_BufferRead+0x454>
        /* Enable Acknowledgement to be ready for another reception */
        I2C1->CR1 |= CR1_ACK_Set;
 8002a1e:	4a0f      	ldr	r2, [pc, #60]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 8002a20:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	8013      	strh	r3, [r2, #0]

    }

    Timeout = I2C_TIMEOUT;
 8002a2e:	2364      	movs	r3, #100	; 0x64
 8002a30:	617b      	str	r3, [r7, #20]

    /* While the bus is busy */
    while ((I2C1->SR2 & 0x00002) != 0x000002)
 8002a32:	e006      	b.n	8002a42 <I2C_Master_BufferRead+0x486>
    {
        if (Timeout-- == 0)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	1e5a      	subs	r2, r3, #1
 8002a38:	617a      	str	r2, [r7, #20]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <I2C_Master_BufferRead+0x486>
            return BussyTimeoutError;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e007      	b.n	8002a52 <I2C_Master_BufferRead+0x496>
    }

    Timeout = I2C_TIMEOUT;

    /* While the bus is busy */
    while ((I2C1->SR2 & 0x00002) != 0x000002)
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <I2C_Master_BufferRead+0x4a0>)
 8002a44:	8b1b      	ldrh	r3, [r3, #24]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f1      	beq.n	8002a34 <I2C_Master_BufferRead+0x478>
    {
        if (Timeout-- == 0)
            return BussyTimeoutError;
    }

    return Success;
 8002a50:	2305      	movs	r3, #5
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40005400 	.word	0x40005400

08002a60 <I2C_Master_BufferWrite>:
    return Success;
}


Status I2C_Master_BufferWrite(unsigned char* pBuffer,  unsigned long NumByteToWrite, unsigned char SlaveAddress, unsigned char registerAddress)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	460b      	mov	r3, r1
 8002a70:	71fb      	strb	r3, [r7, #7]
 8002a72:	4613      	mov	r3, r2
 8002a74:	71bb      	strb	r3, [r7, #6]

    unsigned long temp = 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
    unsigned long Timeout = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]

     //Enable Error IT (used in all modes: DMA, Polling and Interrupts
    //I2C1->CR2 |= I2C_IT_ERR;

    Timeout = I2C_TIMEOUT;
 8002a7e:	2364      	movs	r3, #100	; 0x64
 8002a80:	617b      	str	r3, [r7, #20]
     //Send START condition
    I2C1->CR1 |= CR1_START_Set;
 8002a82:	4a50      	ldr	r2, [pc, #320]	; (8002bc4 <I2C_Master_BufferWrite+0x164>)
 8002a84:	4b4f      	ldr	r3, [pc, #316]	; (8002bc4 <I2C_Master_BufferWrite+0x164>)
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	8013      	strh	r3, [r2, #0]
     //Wait until SB flag is set: EV5
    while ((I2C1->SR1&0x0001) != 0x0001)
 8002a92:	e006      	b.n	8002aa2 <I2C_Master_BufferWrite+0x42>
    {
        if (Timeout-- == 0)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	1e5a      	subs	r2, r3, #1
 8002a98:	617a      	str	r2, [r7, #20]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <I2C_Master_BufferWrite+0x42>
        {
            return StartConditionError;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e08b      	b.n	8002bba <I2C_Master_BufferWrite+0x15a>

    Timeout = I2C_TIMEOUT;
     //Send START condition
    I2C1->CR1 |= CR1_START_Set;
     //Wait until SB flag is set: EV5
    while ((I2C1->SR1&0x0001) != 0x0001)
 8002aa2:	4b48      	ldr	r3, [pc, #288]	; (8002bc4 <I2C_Master_BufferWrite+0x164>)
 8002aa4:	8a9b      	ldrh	r3, [r3, #20]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f1      	beq.n	8002a94 <I2C_Master_BufferWrite+0x34>
        }
    }

     //Send slave address
     //Reset the address bit0 for write
    SlaveAddress &= 0xFFFE;
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	f023 0301 	bic.w	r3, r3, #1
 8002ab6:	71fb      	strb	r3, [r7, #7]
     //Send the slave address
    I2C1->DR = SlaveAddress;
 8002ab8:	4b42      	ldr	r3, [pc, #264]	; (8002bc4 <I2C_Master_BufferWrite+0x164>)
 8002aba:	79fa      	ldrb	r2, [r7, #7]
 8002abc:	b292      	uxth	r2, r2
 8002abe:	821a      	strh	r2, [r3, #16]
    Timeout = I2C_TIMEOUT;
 8002ac0:	2364      	movs	r3, #100	; 0x64
 8002ac2:	617b      	str	r3, [r7, #20]
     //Wait until ADDR is set: EV6
    while ((I2C1->SR1 &0x0002) != 0x0002)
 8002ac4:	e016      	b.n	8002af4 <I2C_Master_BufferWrite+0x94>
    {
        if (Timeout-- == 0)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	1e5a      	subs	r2, r3, #1
 8002aca:	617a      	str	r2, [r7, #20]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d111      	bne.n	8002af4 <I2C_Master_BufferWrite+0x94>
        {
            I2C1->CR1 |= CR1_STOP_Set;
 8002ad0:	4a3c      	ldr	r2, [pc, #240]	; (8002bc4 <I2C_Master_BufferWrite+0x164>)
 8002ad2:	4b3c      	ldr	r3, [pc, #240]	; (8002bc4 <I2C_Master_BufferWrite+0x164>)
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	8013      	strh	r3, [r2, #0]
             //Make sure that the STOP bit is cleared by Hardware
            while ((I2C1->CR1&0x200) == 0x200);
 8002ae0:	bf00      	nop
 8002ae2:	4b38      	ldr	r3, [pc, #224]	; (8002bc4 <I2C_Master_BufferWrite+0x164>)
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f8      	bne.n	8002ae2 <I2C_Master_BufferWrite+0x82>
            return AddressAckError;
 8002af0:	2302      	movs	r3, #2
 8002af2:	e062      	b.n	8002bba <I2C_Master_BufferWrite+0x15a>
    SlaveAddress &= 0xFFFE;
     //Send the slave address
    I2C1->DR = SlaveAddress;
    Timeout = I2C_TIMEOUT;
     //Wait until ADDR is set: EV6
    while ((I2C1->SR1 &0x0002) != 0x0002)
 8002af4:	4b33      	ldr	r3, [pc, #204]	; (8002bc4 <I2C_Master_BufferWrite+0x164>)
 8002af6:	8a9b      	ldrh	r3, [r3, #20]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0e1      	beq.n	8002ac6 <I2C_Master_BufferWrite+0x66>
            return AddressAckError;
        }
    }

     //Clear ADDR flag by reading SR2 register
    temp = I2C1->SR2;
 8002b02:	4b30      	ldr	r3, [pc, #192]	; (8002bc4 <I2C_Master_BufferWrite+0x164>)
 8002b04:	8b1b      	ldrh	r3, [r3, #24]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	613b      	str	r3, [r7, #16]

    I2C1->DR = registerAddress;
 8002b0a:	4b2e      	ldr	r3, [pc, #184]	; (8002bc4 <I2C_Master_BufferWrite+0x164>)
 8002b0c:	79ba      	ldrb	r2, [r7, #6]
 8002b0e:	b292      	uxth	r2, r2
 8002b10:	821a      	strh	r2, [r3, #16]
     //Poll on BTF to receive data because in polling mode we can not guarantee the
      //EV8 software sequence is managed before the current byte transfer completes
    while ((I2C1->SR1 & 0x00004) != 0x000004);
 8002b12:	bf00      	nop
 8002b14:	4b2b      	ldr	r3, [pc, #172]	; (8002bc4 <I2C_Master_BufferWrite+0x164>)
 8002b16:	8a9b      	ldrh	r3, [r3, #20]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f8      	beq.n	8002b14 <I2C_Master_BufferWrite+0xb4>
     //Write the first data in DR register (EV8_1)
    I2C1->DR = *pBuffer;
 8002b22:	4a28      	ldr	r2, [pc, #160]	; (8002bc4 <I2C_Master_BufferWrite+0x164>)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	8213      	strh	r3, [r2, #16]
     //Increment
    pBuffer++;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
     //Decrement the number of bytes to be written
    NumByteToWrite--;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
     //While there is data to be written
    while (NumByteToWrite--)
 8002b38:	e00f      	b.n	8002b5a <I2C_Master_BufferWrite+0xfa>
    {
         //Poll on BTF to receive data because in polling mode we can not guarantee the
          //EV8 software sequence is managed before the current byte transfer completes
        while ((I2C1->SR1 & 0x00004) != 0x000004);
 8002b3a:	bf00      	nop
 8002b3c:	4b21      	ldr	r3, [pc, #132]	; (8002bc4 <I2C_Master_BufferWrite+0x164>)
 8002b3e:	8a9b      	ldrh	r3, [r3, #20]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f8      	beq.n	8002b3c <I2C_Master_BufferWrite+0xdc>
         //Send the current byte
        I2C1->DR = *pBuffer;
 8002b4a:	4a1e      	ldr	r2, [pc, #120]	; (8002bc4 <I2C_Master_BufferWrite+0x164>)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	8213      	strh	r3, [r2, #16]
         //Point to the next byte to be written
        pBuffer++;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3301      	adds	r3, #1
 8002b58:	60fb      	str	r3, [r7, #12]
     //Increment
    pBuffer++;
     //Decrement the number of bytes to be written
    NumByteToWrite--;
     //While there is data to be written
    while (NumByteToWrite--)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	1e5a      	subs	r2, r3, #1
 8002b5e:	60ba      	str	r2, [r7, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1ea      	bne.n	8002b3a <I2C_Master_BufferWrite+0xda>
        I2C1->DR = *pBuffer;
         //Point to the next byte to be written
        pBuffer++;
    }
     //EV8_2: Wait until BTF is set before programming the STOP
    Timeout = I2C_TIMEOUT;
 8002b64:	2364      	movs	r3, #100	; 0x64
 8002b66:	617b      	str	r3, [r7, #20]
    while ((I2C1->SR1 & 0x00004) != 0x000004)
 8002b68:	e006      	b.n	8002b78 <I2C_Master_BufferWrite+0x118>
    {
		if (Timeout-- == 0)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	1e5a      	subs	r2, r3, #1
 8002b6e:	617a      	str	r2, [r7, #20]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <I2C_Master_BufferWrite+0x118>
			return BussyTimeoutError;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e020      	b.n	8002bba <I2C_Master_BufferWrite+0x15a>
         //Point to the next byte to be written
        pBuffer++;
    }
     //EV8_2: Wait until BTF is set before programming the STOP
    Timeout = I2C_TIMEOUT;
    while ((I2C1->SR1 & 0x00004) != 0x000004)
 8002b78:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <I2C_Master_BufferWrite+0x164>)
 8002b7a:	8a9b      	ldrh	r3, [r3, #20]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f1      	beq.n	8002b6a <I2C_Master_BufferWrite+0x10a>
    {
		if (Timeout-- == 0)
			return BussyTimeoutError;
	}
     //Send STOP condition
    I2C1->CR1 |= CR1_STOP_Set;
 8002b86:	4a0f      	ldr	r2, [pc, #60]	; (8002bc4 <I2C_Master_BufferWrite+0x164>)
 8002b88:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <I2C_Master_BufferWrite+0x164>)
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	8013      	strh	r3, [r2, #0]
     //Make sure that the STOP bit is cleared by Hardware
    Timeout = I2C_TIMEOUT;
 8002b96:	2364      	movs	r3, #100	; 0x64
 8002b98:	617b      	str	r3, [r7, #20]
    while ((I2C1->CR1&0x200) == 0x200)
 8002b9a:	e006      	b.n	8002baa <I2C_Master_BufferWrite+0x14a>
    {
		if (Timeout-- == 0)
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	1e5a      	subs	r2, r3, #1
 8002ba0:	617a      	str	r2, [r7, #20]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <I2C_Master_BufferWrite+0x14a>
			return BussyTimeoutError;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e007      	b.n	8002bba <I2C_Master_BufferWrite+0x15a>
	}
     //Send STOP condition
    I2C1->CR1 |= CR1_STOP_Set;
     //Make sure that the STOP bit is cleared by Hardware
    Timeout = I2C_TIMEOUT;
    while ((I2C1->CR1&0x200) == 0x200)
 8002baa:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <I2C_Master_BufferWrite+0x164>)
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f1      	bne.n	8002b9c <I2C_Master_BufferWrite+0x13c>
    {
		if (Timeout-- == 0)
			return BussyTimeoutError;
	}

    return Success;
 8002bb8:	2305      	movs	r3, #5
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	40005400 	.word	0x40005400

08002bc8 <readDataCompass>:
      oval+=360;
   return oval;
}


int readDataCompass(){
 8002bc8:	b5b0      	push	{r4, r5, r7, lr}
 8002bca:	b08a      	sub	sp, #40	; 0x28
 8002bcc:	af00      	add	r7, sp, #0
	unsigned int data;
	unsigned char readData[13];

		unsigned char readAddres = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		int16_t xForce = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	837b      	strh	r3, [r7, #26]
		int16_t yForce = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	833b      	strh	r3, [r7, #24]
		int heading = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	623b      	str	r3, [r7, #32]
		Status errStat;
				int i=0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61fb      	str	r3, [r7, #28]
				for(readAddres = 3; readAddres <= 8; readAddres++)
 8002be4:	2303      	movs	r3, #3
 8002be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002bea:	e018      	b.n	8002c1e <readDataCompass+0x56>
				{
					errStat = readDataHMC5883L(&data, readAddres);
 8002bec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002bf0:	f107 0310 	add.w	r3, r7, #16
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f8ce 	bl	8001d98 <readDataHMC5883L>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	75fb      	strb	r3, [r7, #23]
					readData[i] = data;
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	b2d9      	uxtb	r1, r3
 8002c04:	463a      	mov	r2, r7
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	4413      	add	r3, r2
 8002c0a:	460a      	mov	r2, r1
 8002c0c:	701a      	strb	r2, [r3, #0]
					i++;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3301      	adds	r3, #1
 8002c12:	61fb      	str	r3, [r7, #28]
		int16_t xForce = 0;
		int16_t yForce = 0;
		int heading = 0;
		Status errStat;
				int i=0;
				for(readAddres = 3; readAddres <= 8; readAddres++)
 8002c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d9e2      	bls.n	8002bec <readDataCompass+0x24>
				{
					errStat = readDataHMC5883L(&data, readAddres);
					readData[i] = data;
					i++;
				}
				i=0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
		        xForce = (int16_t)(readData[1] | (readData[0] << 8));
 8002c2a:	787b      	ldrb	r3, [r7, #1]
 8002c2c:	b21a      	sxth	r2, r3
 8002c2e:	783b      	ldrb	r3, [r7, #0]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	b21b      	sxth	r3, r3
 8002c34:	4313      	orrs	r3, r2
 8002c36:	837b      	strh	r3, [r7, #26]
		        yForce = (int16_t)(readData[5] | (readData[4] << 8));
 8002c38:	797b      	ldrb	r3, [r7, #5]
 8002c3a:	b21a      	sxth	r2, r3
 8002c3c:	793b      	ldrb	r3, [r7, #4]
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	b21b      	sxth	r3, r3
 8002c42:	4313      	orrs	r3, r2
 8002c44:	833b      	strh	r3, [r7, #24]
		        heading = 180 * atan2((double)xForce,(double)yForce)/M_PI;
 8002c46:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fd fbea 	bl	8000424 <__aeabi_i2d>
 8002c50:	4604      	mov	r4, r0
 8002c52:	460d      	mov	r5, r1
 8002c54:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fd fbe3 	bl	8000424 <__aeabi_i2d>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4620      	mov	r0, r4
 8002c64:	4629      	mov	r1, r5
 8002c66:	f000 fee5 	bl	8003a34 <atan2>
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <readDataCompass+0xf0>)
 8002c70:	f7fd fc3e 	bl	80004f0 <__aeabi_dmul>
 8002c74:	4603      	mov	r3, r0
 8002c76:	460c      	mov	r4, r1
 8002c78:	4618      	mov	r0, r3
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	a30c      	add	r3, pc, #48	; (adr r3, 8002cb0 <readDataCompass+0xe8>)
 8002c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c82:	f7fd fd5f 	bl	8000744 <__aeabi_ddiv>
 8002c86:	4603      	mov	r3, r0
 8002c88:	460c      	mov	r4, r1
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	f7fd fec9 	bl	8000a24 <__aeabi_d2iz>
 8002c92:	4603      	mov	r3, r0
 8002c94:	623b      	str	r3, [r7, #32]

		        if (heading < 0)
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	da03      	bge.n	8002ca4 <readDataCompass+0xdc>
		        	heading += 360;
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ca2:	623b      	str	r3, [r7, #32]

				 return heading;
 8002ca4:	6a3b      	ldr	r3, [r7, #32]


}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3728      	adds	r7, #40	; 0x28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bdb0      	pop	{r4, r5, r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	54442d18 	.word	0x54442d18
 8002cb4:	400921fb 	.word	0x400921fb
 8002cb8:	40668000 	.word	0x40668000

08002cbc <main>:
**
**===========================================================================
*/
int main(void)

{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
	init();
 8002cc0:	f7ff f9ee 	bl	80020a0 <init>
	init_indicator_LED();
 8002cc4:	f000 f8f4 	bl	8002eb0 <init_indicator_LED>
	sensorInit();
 8002cc8:	f000 f97c 	bl	8002fc4 <sensorInit>
	//left_motor_set_speed(10);
	//right_motor_set_speed(-10);

  while (1)
  {
	  if (running){
 8002ccc:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <main+0x38>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <main+0x1e>
		  run();
 8002cd4:	f7ff fa1c 	bl	8002110 <run>
 8002cd8:	e7f8      	b.n	8002ccc <main+0x10>
	  } else {
		  bearing_error = 0; //nulovanie pocitadla
 8002cda:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <main+0x3c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
		  stop();
 8002ce0:	f7ff fae8 	bl	80022b4 <stop>
		  sendValue(0);
 8002ce4:	f04f 0000 	mov.w	r0, #0
 8002ce8:	f04f 0100 	mov.w	r1, #0
 8002cec:	f7ff f9b0 	bl	8002050 <sendValue>
	  }
  }
 8002cf0:	e7ec      	b.n	8002ccc <main+0x10>
 8002cf2:	bf00      	nop
 8002cf4:	20000050 	.word	0x20000050
 8002cf8:	20000060 	.word	0x20000060

08002cfc <InitializeOutput>:
int volatile counter2=0;
//int volatile counter3=0;

TIM_OCInitTypeDef  TIM_OCInitStructure;
void InitializeOutput()
{GPIO_InitTypeDef GPIO_InitStructure;
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
	/* --------------------------- System Clocks Configuration ---------------------*/
		  /* TIM3 clock enable */
		  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002d02:	2101      	movs	r1, #1
 8002d04:	2001      	movs	r0, #1
 8002d06:	f7fe fab7 	bl	8001278 <RCC_APB1PeriphClockCmd>
		  /* GPIOA and GPIOB clock enable */
		  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	2002      	movs	r0, #2
 8002d0e:	f7fe fa77 	bl	8001200 <RCC_AHBPeriphClockCmd>

		  /*--------------------------------- GPIO Configuration -------------------------*/

		  /* GPIOB Configuration: Pin 10 and 11 */
		  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10|GPIO_Pin_11;
 8002d12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d16:	603b      	str	r3, [r7, #0]
		  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	713b      	strb	r3, [r7, #4]
		  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	71bb      	strb	r3, [r7, #6]
		  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8002d20:	2301      	movs	r3, #1
 8002d22:	71fb      	strb	r3, [r7, #7]
		  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8002d24:	2303      	movs	r3, #3
 8002d26:	717b      	strb	r3, [r7, #5]

		  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002d28:	463b      	mov	r3, r7
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4808      	ldr	r0, [pc, #32]	; (8002d50 <InitializeOutput+0x54>)
 8002d2e:	f7fd ff21 	bl	8000b74 <GPIO_Init>
		  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_TIM2);
 8002d32:	2201      	movs	r2, #1
 8002d34:	210a      	movs	r1, #10
 8002d36:	4806      	ldr	r0, [pc, #24]	; (8002d50 <InitializeOutput+0x54>)
 8002d38:	f7fd fffa 	bl	8000d30 <GPIO_PinAFConfig>
		  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	210b      	movs	r1, #11
 8002d40:	4803      	ldr	r0, [pc, #12]	; (8002d50 <InitializeOutput+0x54>)
 8002d42:	f7fd fff5 	bl	8000d30 <GPIO_PinAFConfig>
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40020400 	.word	0x40020400

08002d54 <InitializeTimer>:

void InitializeTimer()
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;

	uint16_t pwmvalue = 150;
 8002d5a:	2396      	movs	r3, #150	; 0x96
 8002d5c:	83fb      	strh	r3, [r7, #30]
	uint16_t pwmvalueL = 150;
 8002d5e:	2396      	movs	r3, #150	; 0x96
 8002d60:	83bb      	strh	r3, [r7, #28]
	uint16_t myperiod = 1000;
 8002d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d66:	837b      	strh	r3, [r7, #26]
	uint16_t PrescalerValue = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	833b      	strh	r3, [r7, #24]

	 PrescalerValue = (uint16_t)(16000000/100000) - 1;
 8002d6c:	239f      	movs	r3, #159	; 0x9f
 8002d6e:	833b      	strh	r3, [r7, #24]
		  /* Time base configuration */
		  TIM_TimeBaseStructure.TIM_Period = myperiod - 1;
 8002d70:	8b7b      	ldrh	r3, [r7, #26]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	613b      	str	r3, [r7, #16]
		  TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 8002d76:	8b3b      	ldrh	r3, [r7, #24]
 8002d78:	81bb      	strh	r3, [r7, #12]
		  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	82bb      	strh	r3, [r7, #20]
		  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	81fb      	strh	r3, [r7, #14]

		  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8002d82:	f107 030c 	add.w	r3, r7, #12
 8002d86:	4619      	mov	r1, r3
 8002d88:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d8c:	f7fe fab0 	bl	80012f0 <TIM_TimeBaseInit>

		  /* PWM1 Mode configuration: Channel3 */
		  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8002d90:	2360      	movs	r3, #96	; 0x60
 8002d92:	803b      	strh	r3, [r7, #0]

		  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8002d94:	2301      	movs	r3, #1
 8002d96:	807b      	strh	r3, [r7, #2]
		  TIM_OCInitStructure.TIM_Pulse = pwmvalue;
 8002d98:	8bfb      	ldrh	r3, [r7, #30]
 8002d9a:	607b      	str	r3, [r7, #4]
		  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	813b      	strh	r3, [r7, #8]


		  TIM_OC3Init(TIM2, &TIM_OCInitStructure);//pravy
 8002da0:	463b      	mov	r3, r7
 8002da2:	4619      	mov	r1, r3
 8002da4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002da8:	f7fe fb14 	bl	80013d4 <TIM_OC3Init>

		  TIM_OCInitStructure.TIM_Pulse = pwmvalueL;//lavy
 8002dac:	8bbb      	ldrh	r3, [r7, #28]
 8002dae:	607b      	str	r3, [r7, #4]
		  TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8002db0:	463b      	mov	r3, r7
 8002db2:	4619      	mov	r1, r3
 8002db4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002db8:	f7fe fb4e 	bl	8001458 <TIM_OC4Init>


		  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8002dbc:	2108      	movs	r1, #8
 8002dbe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dc2:	f7fe fb8d 	bl	80014e0 <TIM_OC3PreloadConfig>
		  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8002dc6:	2108      	movs	r1, #8
 8002dc8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dcc:	f7fe fba4 	bl	8001518 <TIM_OC4PreloadConfig>



		  /* TIM3 enable counter */
		  TIM_Cmd(TIM2, ENABLE);
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dd6:	f7fe fadd 	bl	8001394 <TIM_Cmd>

}
 8002dda:	bf00      	nop
 8002ddc:	3720      	adds	r7, #32
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop

08002de4 <Motor_init>:
void Motor_init()
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
	InitializeOutput();
 8002de8:	f7ff ff88 	bl	8002cfc <InitializeOutput>
InitializeTimer();
 8002dec:	f7ff ffb2 	bl	8002d54 <InitializeTimer>

}
 8002df0:	bf00      	nop
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <right_motor_set_speed>:

void right_motor_set_speed(int a){
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8002dfc:	2360      	movs	r3, #96	; 0x60
 8002dfe:	81bb      	strh	r3, [r7, #12]

			  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8002e00:	2301      	movs	r3, #1
 8002e02:	81fb      	strh	r3, [r7, #14]

			  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8002e04:	2300      	movs	r3, #0
 8002e06:	82bb      	strh	r3, [r7, #20]

	if(a>20){a=20;}
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b14      	cmp	r3, #20
 8002e0c:	dd01      	ble.n	8002e12 <right_motor_set_speed+0x1e>
 8002e0e:	2314      	movs	r3, #20
 8002e10:	607b      	str	r3, [r7, #4]
	if(a<-20){a=-20;}
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f113 0f14 	cmn.w	r3, #20
 8002e18:	da02      	bge.n	8002e20 <right_motor_set_speed+0x2c>
 8002e1a:	f06f 0313 	mvn.w	r3, #19
 8002e1e:	607b      	str	r3, [r7, #4]
if (a!=counter){
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <right_motor_set_speed+0x5c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d00d      	beq.n	8002e46 <right_motor_set_speed+0x52>
	  TIM_OCInitStructure.TIM_Pulse = 150-a;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8002e30:	613b      	str	r3, [r7, #16]
	  TIM_OC3Init(TIM2, &TIM_OCInitStructure);//pravy pwm update
 8002e32:	f107 030c 	add.w	r3, r7, #12
 8002e36:	4619      	mov	r1, r3
 8002e38:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e3c:	f7fe faca 	bl	80013d4 <TIM_OC3Init>
	  counter=a;
 8002e40:	4a03      	ldr	r2, [pc, #12]	; (8002e50 <right_motor_set_speed+0x5c>)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6013      	str	r3, [r2, #0]
}

}
 8002e46:	bf00      	nop
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000040 	.word	0x20000040

08002e54 <left_motor_set_speed>:

void left_motor_set_speed(int a){
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8002e5c:	2360      	movs	r3, #96	; 0x60
 8002e5e:	81bb      	strh	r3, [r7, #12]

			  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8002e60:	2301      	movs	r3, #1
 8002e62:	81fb      	strh	r3, [r7, #14]

			  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8002e64:	2300      	movs	r3, #0
 8002e66:	82bb      	strh	r3, [r7, #20]
	if(a>20){a=20;}
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b14      	cmp	r3, #20
 8002e6c:	dd01      	ble.n	8002e72 <left_motor_set_speed+0x1e>
 8002e6e:	2314      	movs	r3, #20
 8002e70:	607b      	str	r3, [r7, #4]
	if(a<-20){a=-20;}
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f113 0f14 	cmn.w	r3, #20
 8002e78:	da02      	bge.n	8002e80 <left_motor_set_speed+0x2c>
 8002e7a:	f06f 0313 	mvn.w	r3, #19
 8002e7e:	607b      	str	r3, [r7, #4]
	if (a!=counter2){
 8002e80:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <left_motor_set_speed+0x58>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d00c      	beq.n	8002ea4 <left_motor_set_speed+0x50>
	 TIM_OCInitStructure.TIM_Pulse = 150+a;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3396      	adds	r3, #150	; 0x96
 8002e8e:	613b      	str	r3, [r7, #16]
	 TIM_OC4Init(TIM2, &TIM_OCInitStructure);//lavy pwm update
 8002e90:	f107 030c 	add.w	r3, r7, #12
 8002e94:	4619      	mov	r1, r3
 8002e96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e9a:	f7fe fadd 	bl	8001458 <TIM_OC4Init>
	 counter2=a;
 8002e9e:	4a03      	ldr	r2, [pc, #12]	; (8002eac <left_motor_set_speed+0x58>)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6013      	str	r3, [r2, #0]
	}


}
 8002ea4:	bf00      	nop
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000044 	.word	0x20000044

08002eb0 <init_indicator_LED>:

/* Private functions */

//inicializacia indikacnej LED chodu procesora
void init_indicator_LED()
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
	init_indicator_LED_pin();
 8002eb4:	f000 f806 	bl	8002ec4 <init_indicator_LED_pin>
	init_indicator_LED_trigtim();
 8002eb8:	f000 f81e 	bl	8002ef8 <init_indicator_LED_trigtim>
	init_indicator_LED_trigtim_interrupt();
 8002ebc:	f000 f84c 	bl	8002f58 <init_indicator_LED_trigtim_interrupt>
}
 8002ec0:	bf00      	nop
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <init_indicator_LED_pin>:

//inicializacia portu a pinu LED
void init_indicator_LED_pin()
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002eca:	2101      	movs	r1, #1
 8002ecc:	2001      	movs	r0, #1
 8002ece:	f7fe f997 	bl	8001200 <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef gpioInitStruc;
	gpioInitStruc.GPIO_Mode = GPIO_Mode_OUT;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	713b      	strb	r3, [r7, #4]
	gpioInitStruc.GPIO_OType = GPIO_OType_PP;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	71bb      	strb	r3, [r7, #6]
	gpioInitStruc.GPIO_Pin = GPIO_Pin_5;
 8002eda:	2320      	movs	r3, #32
 8002edc:	603b      	str	r3, [r7, #0]
	gpioInitStruc.GPIO_Speed = GPIO_Speed_400KHz;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOA, &gpioInitStruc);
 8002ee2:	463b      	mov	r3, r7
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4803      	ldr	r0, [pc, #12]	; (8002ef4 <init_indicator_LED_pin+0x30>)
 8002ee8:	f7fd fe44 	bl	8000b74 <GPIO_Init>
}
 8002eec:	bf00      	nop
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40020000 	.word	0x40020000

08002ef8 <init_indicator_LED_trigtim>:

//inicializacia casovaca pre spustanie led LED
void init_indicator_LED_trigtim()
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
	indicatorTimeStamp = 0;
 8002efe:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <init_indicator_LED_trigtim+0x58>)
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	f04f 0400 	mov.w	r4, #0
 8002f08:	e882 0018 	stmia.w	r2, {r3, r4}
	unsigned short prescalerValue = (unsigned short) TIM_CLC_PRESCALER;
 8002f0c:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8002f10:	81fb      	strh	r3, [r7, #14]

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 8002f12:	2101      	movs	r1, #1
 8002f14:	2010      	movs	r0, #16
 8002f16:	f7fe f9af 	bl	8001278 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Period = TIM_PERIOD;
 8002f1a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002f1e:	607b      	str	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CLC_DIV;
 8002f20:	2300      	movs	r3, #0
 8002f22:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002f24:	2300      	movs	r3, #0
 8002f26:	807b      	strh	r3, [r7, #2]
	TIM_TimeBaseStructure.TIM_Prescaler = prescalerValue;
 8002f28:	89fb      	ldrh	r3, [r7, #14]
 8002f2a:	803b      	strh	r3, [r7, #0]
	TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 8002f2c:	463b      	mov	r3, r7
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4808      	ldr	r0, [pc, #32]	; (8002f54 <init_indicator_LED_trigtim+0x5c>)
 8002f32:	f7fe f9dd 	bl	80012f0 <TIM_TimeBaseInit>
	TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);
 8002f36:	2201      	movs	r2, #1
 8002f38:	2101      	movs	r1, #1
 8002f3a:	4806      	ldr	r0, [pc, #24]	; (8002f54 <init_indicator_LED_trigtim+0x5c>)
 8002f3c:	f7fe fbf6 	bl	800172c <TIM_ITConfig>
	TIM_Cmd(TIM6, ENABLE);
 8002f40:	2101      	movs	r1, #1
 8002f42:	4804      	ldr	r0, [pc, #16]	; (8002f54 <init_indicator_LED_trigtim+0x5c>)
 8002f44:	f7fe fa26 	bl	8001394 <TIM_Cmd>
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd90      	pop	{r4, r7, pc}
 8002f50:	20000090 	.word	0x20000090
 8002f54:	40001000 	.word	0x40001000

08002f58 <init_indicator_LED_trigtim_interrupt>:

//inicializacia prerusenia casovaca
void init_indicator_LED_trigtim_interrupt()
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_InitStructure.NVIC_IRQChannel = TIM6_IRQn;
 8002f5e:	232b      	movs	r3, #43	; 0x2b
 8002f60:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = TIM_INTERRUPT_PREEMP;
 8002f62:	2300      	movs	r3, #0
 8002f64:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = TIM_INTERRUPT_SUB;
 8002f66:	2302      	movs	r3, #2
 8002f68:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8002f6e:	1d3b      	adds	r3, r7, #4
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd fd9f 	bl	8000ab4 <NVIC_Init>
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop

08002f80 <TIM6_IRQHandler>:

//spracovanie prerusenia z TIM6, casovaca pre kontrolku
void TIM6_IRQHandler(void)
{
 8002f80:	b598      	push	{r3, r4, r7, lr}
 8002f82:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) == SET)
 8002f84:	2101      	movs	r1, #1
 8002f86:	480c      	ldr	r0, [pc, #48]	; (8002fb8 <TIM6_IRQHandler+0x38>)
 8002f88:	f7fe fbf4 	bl	8001774 <TIM_GetITStatus>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d10f      	bne.n	8002fb2 <TIM6_IRQHandler+0x32>
	{
		indicatorTimeStamp++;
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <TIM6_IRQHandler+0x3c>)
 8002f94:	cb18      	ldmia	r3, {r3, r4}
 8002f96:	3301      	adds	r3, #1
 8002f98:	f144 0400 	adc.w	r4, r4, #0
 8002f9c:	4a07      	ldr	r2, [pc, #28]	; (8002fbc <TIM6_IRQHandler+0x3c>)
 8002f9e:	e882 0018 	stmia.w	r2, {r3, r4}
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);//toggle LED PA5
 8002fa2:	2120      	movs	r1, #32
 8002fa4:	4806      	ldr	r0, [pc, #24]	; (8002fc0 <TIM6_IRQHandler+0x40>)
 8002fa6:	f7fd feaf 	bl	8000d08 <GPIO_ToggleBits>
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 8002faa:	2101      	movs	r1, #1
 8002fac:	4802      	ldr	r0, [pc, #8]	; (8002fb8 <TIM6_IRQHandler+0x38>)
 8002fae:	f7fe fc0b 	bl	80017c8 <TIM_ClearITPendingBit>
	}
}
 8002fb2:	bf00      	nop
 8002fb4:	bd98      	pop	{r3, r4, r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40001000 	.word	0x40001000
 8002fbc:	20000090 	.word	0x20000090
 8002fc0:	40020000 	.word	0x40020000

08002fc4 <sensorInit>:
#define SENSOR_CALL_TIM_SUBPRIORITY 3

//Functions
//inicializacia senzorov vzdialenosti
void sensorInit(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
	initSensorCaptureStruc();
 8002fc8:	f000 f80c 	bl	8002fe4 <initSensorCaptureStruc>
	sensorInitTriggerTimer();
 8002fcc:	f000 f87a 	bl	80030c4 <sensorInitTriggerTimer>
	sensorInitTriggerPin();
 8002fd0:	f000 f8b0 	bl	8003134 <sensorInitTriggerPin>
	sensorInitCapturePins();
 8002fd4:	f000 f93c 	bl	8003250 <sensorInitCapturePins>
	sensorInitCaptureTimer();
 8002fd8:	f000 f8d8 	bl	800318c <sensorInitCaptureTimer>
	sensorInitCallTimer();
 8002fdc:	f000 f832 	bl	8003044 <sensorInitCallTimer>
}
 8002fe0:	bf00      	nop
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <initSensorCaptureStruc>:
//inicializacia struktur merania vzdialenosti
void initSensorCaptureStruc(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
	LeftSensorCaptureStruc.captureStep = 0;
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <initSensorCaptureStruc+0x54>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
	LeftSensorCaptureStruc.risingTimeCapturing = 0;
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <initSensorCaptureStruc+0x54>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	605a      	str	r2, [r3, #4]
	LeftSensorCaptureStruc.risingTime = 0;
 8002ff4:	4b10      	ldr	r3, [pc, #64]	; (8003038 <initSensorCaptureStruc+0x54>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
	LeftSensorCaptureStruc.fallingTime = 0;
 8002ffa:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <initSensorCaptureStruc+0x54>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	60da      	str	r2, [r3, #12]

	RightSensorCaptureStruc.captureStep = 0;
 8003000:	4b0e      	ldr	r3, [pc, #56]	; (800303c <initSensorCaptureStruc+0x58>)
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
	RightSensorCaptureStruc.risingTimeCapturing = 0;
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <initSensorCaptureStruc+0x58>)
 8003008:	2200      	movs	r2, #0
 800300a:	605a      	str	r2, [r3, #4]
	RightSensorCaptureStruc.risingTime = 0;
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <initSensorCaptureStruc+0x58>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
	RightSensorCaptureStruc.fallingTime = 0;
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <initSensorCaptureStruc+0x58>)
 8003014:	2200      	movs	r2, #0
 8003016:	60da      	str	r2, [r3, #12]

	ForwardSensorCaptureStruc.captureStep = 0;
 8003018:	4b09      	ldr	r3, [pc, #36]	; (8003040 <initSensorCaptureStruc+0x5c>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
	ForwardSensorCaptureStruc.risingTimeCapturing = 0;
 800301e:	4b08      	ldr	r3, [pc, #32]	; (8003040 <initSensorCaptureStruc+0x5c>)
 8003020:	2200      	movs	r2, #0
 8003022:	605a      	str	r2, [r3, #4]
	ForwardSensorCaptureStruc.risingTime = 0;
 8003024:	4b06      	ldr	r3, [pc, #24]	; (8003040 <initSensorCaptureStruc+0x5c>)
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]
	ForwardSensorCaptureStruc.fallingTime = 0;
 800302a:	4b05      	ldr	r3, [pc, #20]	; (8003040 <initSensorCaptureStruc+0x5c>)
 800302c:	2200      	movs	r2, #0
 800302e:	60da      	str	r2, [r3, #12]

}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	200000a8 	.word	0x200000a8
 800303c:	20000098 	.word	0x20000098
 8003040:	200000b8 	.word	0x200000b8

08003044 <sensorInitCallTimer>:
//inicializacia casovaca pravidelne volajuceho meranie vzdialenosti
void sensorInitCallTimer(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
	selectSensor = 0;
 800304a:	4b12      	ldr	r3, [pc, #72]	; (8003094 <sensorInitCallTimer+0x50>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
	//Structure for timer settings
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

	//  clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM10, ENABLE);
 8003050:	2101      	movs	r1, #1
 8003052:	2008      	movs	r0, #8
 8003054:	f7fe f8f2 	bl	800123c <RCC_APB2PeriphClockCmd>

	//CALL_TIM init prerusenie
	sensorInitCallTimerInterrupt();
 8003058:	f000 f820 	bl	800309c <sensorInitCallTimerInterrupt>

	TIM_TimeBaseStructure.TIM_Period = SENSOR_CALL_TIM_PERIOD;
 800305c:	2341      	movs	r3, #65	; 0x41
 800305e:	60bb      	str	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_ClockDivision = SENSOR_CALL_TIM_CLOCKDIVISION;
 8003060:	2300      	movs	r3, #0
 8003062:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8003064:	2300      	movs	r3, #0
 8003066:	80fb      	strh	r3, [r7, #6]
	TIM_TimeBaseStructure.TIM_Prescaler = SENSOR_CALL_TIM_PRESCALE;
 8003068:	f643 637f 	movw	r3, #15999	; 0x3e7f
 800306c:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseInit(SENSOR_CALL_TIM, &TIM_TimeBaseStructure);
 800306e:	1d3b      	adds	r3, r7, #4
 8003070:	4619      	mov	r1, r3
 8003072:	4809      	ldr	r0, [pc, #36]	; (8003098 <sensorInitCallTimer+0x54>)
 8003074:	f7fe f93c 	bl	80012f0 <TIM_TimeBaseInit>
	// TIM Interrupts enable
	TIM_ITConfig(SENSOR_CALL_TIM, TIM_IT_Update, ENABLE);
 8003078:	2201      	movs	r2, #1
 800307a:	2101      	movs	r1, #1
 800307c:	4806      	ldr	r0, [pc, #24]	; (8003098 <sensorInitCallTimer+0x54>)
 800307e:	f7fe fb55 	bl	800172c <TIM_ITConfig>
	// enable counter
	TIM_Cmd(SENSOR_CALL_TIM, ENABLE);
 8003082:	2101      	movs	r1, #1
 8003084:	4804      	ldr	r0, [pc, #16]	; (8003098 <sensorInitCallTimer+0x54>)
 8003086:	f7fe f985 	bl	8001394 <TIM_Cmd>
}
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000048 	.word	0x20000048
 8003098:	40010c00 	.word	0x40010c00

0800309c <sensorInitCallTimerInterrupt>:
//inicializacia preruseni casovaca volajuceho meranie dialkomermy
void sensorInitCallTimerInterrupt(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_InitStructure.NVIC_IRQChannel = TIM10_IRQn;
 80030a2:	231a      	movs	r3, #26
 80030a4:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = SENSOR_CALL_TIM_PREEMPTPRIORITY;
 80030a6:	2303      	movs	r3, #3
 80030a8:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = SENSOR_CALL_TIM_SUBPRIORITY;
 80030aa:	2303      	movs	r3, #3
 80030ac:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80030ae:	2301      	movs	r3, #1
 80030b0:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 80030b2:	1d3b      	adds	r3, r7, #4
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fd fcfd 	bl	8000ab4 <NVIC_Init>
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop

080030c4 <sensorInitTriggerTimer>:

//inicializacia casovaca, ktory generuje spustaci impulz
void sensorInitTriggerTimer(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
	//vypocet delicky pre periodu 10us
	unsigned short prescalerValue = (unsigned short) (STM_SYSTEM_CLOCK / TRIG_TIM_FREQ) - 1;
 80030ca:	239f      	movs	r3, #159	; 0x9f
 80030cc:	81fb      	strh	r3, [r7, #14]

	//struktura pre zakladny casovac TRIG_TIM
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

	//spustenie hodinovych impulzov pre TRIG_TIM
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 80030ce:	2101      	movs	r1, #1
 80030d0:	2020      	movs	r0, #32
 80030d2:	f7fe f8d1 	bl	8001278 <RCC_APB1PeriphClockCmd>

	//TRIG_TIM init prerusenie
	sensorInitTriggerTimerInterrup();
 80030d6:	f000 f819 	bl	800310c <sensorInitTriggerTimerInterrup>

	//init struktura TRIG_TIM
	TIM_TimeBaseStructure.TIM_Period = 1;
 80030da:	2301      	movs	r3, #1
 80030dc:	607b      	str	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80030e2:	2300      	movs	r3, #0
 80030e4:	807b      	strh	r3, [r7, #2]
	TIM_TimeBaseStructure.TIM_Prescaler = prescalerValue;
 80030e6:	89fb      	ldrh	r3, [r7, #14]
 80030e8:	803b      	strh	r3, [r7, #0]
	TIM_TimeBaseInit(TRIG_TIM, &TIM_TimeBaseStructure);//zapisanie struktury
 80030ea:	463b      	mov	r3, r7
 80030ec:	4619      	mov	r1, r3
 80030ee:	4806      	ldr	r0, [pc, #24]	; (8003108 <sensorInitTriggerTimer+0x44>)
 80030f0:	f7fe f8fe 	bl	80012f0 <TIM_TimeBaseInit>

	//povolenie preruseni TRIG_TIM
	TIM_ITConfig(TRIG_TIM, TIM_IT_Update, ENABLE);
 80030f4:	2201      	movs	r2, #1
 80030f6:	2101      	movs	r1, #1
 80030f8:	4803      	ldr	r0, [pc, #12]	; (8003108 <sensorInitTriggerTimer+0x44>)
 80030fa:	f7fe fb17 	bl	800172c <TIM_ITConfig>
}
 80030fe:	bf00      	nop
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40001400 	.word	0x40001400

0800310c <sensorInitTriggerTimerInterrup>:
//inicializacia preruseni casovaca, ktory generuje spustaci impulz
void sensorInitTriggerTimerInterrup(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
	//TRIG_TIM struct prerusenie
	NVIC_InitTypeDef NVIC_InitStructure;

	//init struktura prerusenie
	NVIC_InitStructure.NVIC_IRQChannel = TIM7_IRQn;
 8003112:	232c      	movs	r3, #44	; 0x2c
 8003114:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8003116:	2300      	movs	r3, #0
 8003118:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 800311a:	2301      	movs	r3, #1
 800311c:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800311e:	2301      	movs	r3, #1
 8003120:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);//zapisanie struktury
 8003122:	1d3b      	adds	r3, r7, #4
 8003124:	4618      	mov	r0, r3
 8003126:	f7fd fcc5 	bl	8000ab4 <NVIC_Init>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop

08003134 <sensorInitTriggerPin>:
//inicializacia pinov pre spustanie dialkomerov
void sensorInitTriggerPin(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
	//spusti hodiny pre port A
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800313a:	2101      	movs	r1, #1
 800313c:	2001      	movs	r0, #1
 800313e:	f7fe f85f 	bl	8001200 <RCC_AHBPeriphClockCmd>

	//vytvorenie struktury GPIO
	GPIO_InitTypeDef gpioInitStruc;
	gpioInitStruc.GPIO_Mode = GPIO_Mode_OUT;
 8003142:	2301      	movs	r3, #1
 8003144:	713b      	strb	r3, [r7, #4]
	gpioInitStruc.GPIO_OType = GPIO_OType_PP;
 8003146:	2300      	movs	r3, #0
 8003148:	71bb      	strb	r3, [r7, #6]
	gpioInitStruc.GPIO_Speed = GPIO_Speed_400KHz;
 800314a:	2300      	movs	r3, #0
 800314c:	717b      	strb	r3, [r7, #5]

	//zapisanie inicializacnej struktury - left
	gpioInitStruc.GPIO_Pin = LEFT_TRIG_PIN;
 800314e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003152:	603b      	str	r3, [r7, #0]
	GPIO_Init(TRIG_PORT, &gpioInitStruc);//errror - remote failure E31
 8003154:	463b      	mov	r3, r7
 8003156:	4619      	mov	r1, r3
 8003158:	480b      	ldr	r0, [pc, #44]	; (8003188 <sensorInitTriggerPin+0x54>)
 800315a:	f7fd fd0b 	bl	8000b74 <GPIO_Init>

	//zapisanie inicializacnej struktury - right
	gpioInitStruc.GPIO_Pin = RIGHT_TRIG_PIN;
 800315e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003162:	603b      	str	r3, [r7, #0]
	GPIO_Init(TRIG_PORT, &gpioInitStruc);
 8003164:	463b      	mov	r3, r7
 8003166:	4619      	mov	r1, r3
 8003168:	4807      	ldr	r0, [pc, #28]	; (8003188 <sensorInitTriggerPin+0x54>)
 800316a:	f7fd fd03 	bl	8000b74 <GPIO_Init>

	//zapisanie inicializacnej struktury - forward
	gpioInitStruc.GPIO_Pin = FORWARD_TRIG_PIN;
 800316e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003172:	603b      	str	r3, [r7, #0]
	GPIO_Init(TRIG_PORT, &gpioInitStruc);
 8003174:	463b      	mov	r3, r7
 8003176:	4619      	mov	r1, r3
 8003178:	4803      	ldr	r0, [pc, #12]	; (8003188 <sensorInitTriggerPin+0x54>)
 800317a:	f7fd fcfb 	bl	8000b74 <GPIO_Init>

}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40020000 	.word	0x40020000

0800318c <sensorInitCaptureTimer>:
//inicializacia casovaca pre meranie dlzky impulzu z dialkomera
void sensorInitCaptureTimer(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	//CAPTURE_TIM struct capture
	TIM_ICInitTypeDef  TIM_ICInitStructure;

	//povolenie hodin pre CAPTURE_TIM
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8003192:	2101      	movs	r1, #1
 8003194:	2002      	movs	r0, #2
 8003196:	f7fe f86f 	bl	8001278 <RCC_APB1PeriphClockCmd>

	//init CAPTURE_TIM struct capture
	TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_BothEdge;
 800319a:	230a      	movs	r3, #10
 800319c:	807b      	strh	r3, [r7, #2]
	TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
 800319e:	2301      	movs	r3, #1
 80031a0:	80bb      	strh	r3, [r7, #4]
	TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 80031a2:	2300      	movs	r3, #0
 80031a4:	80fb      	strh	r3, [r7, #6]
	TIM_ICInitStructure.TIM_ICFilter = 0x0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	813b      	strh	r3, [r7, #8]

	//CAPTURE_TIM nastavenie kanalov
	TIM_ICInitStructure.TIM_Channel = LEFT_TIM_CHANNEL;//left
 80031aa:	2308      	movs	r3, #8
 80031ac:	803b      	strh	r3, [r7, #0]
	TIM_ICInit(CAPTURE_TIM, &TIM_ICInitStructure);
 80031ae:	463b      	mov	r3, r7
 80031b0:	4619      	mov	r1, r3
 80031b2:	481c      	ldr	r0, [pc, #112]	; (8003224 <sensorInitCaptureTimer+0x98>)
 80031b4:	f7fe f9ce 	bl	8001554 <TIM_ICInit>
	TIM_ICInitStructure.TIM_Channel = RIGHT_TIM_CHANNEL;//right
 80031b8:	2300      	movs	r3, #0
 80031ba:	803b      	strh	r3, [r7, #0]
	TIM_ICInit(CAPTURE_TIM, &TIM_ICInitStructure);
 80031bc:	463b      	mov	r3, r7
 80031be:	4619      	mov	r1, r3
 80031c0:	4818      	ldr	r0, [pc, #96]	; (8003224 <sensorInitCaptureTimer+0x98>)
 80031c2:	f7fe f9c7 	bl	8001554 <TIM_ICInit>
	TIM_ICInitStructure.TIM_Channel = FORWARD_TIM_CHANNEL;//forward
 80031c6:	230c      	movs	r3, #12
 80031c8:	803b      	strh	r3, [r7, #0]
	TIM_ICInit(CAPTURE_TIM, &TIM_ICInitStructure);
 80031ca:	463b      	mov	r3, r7
 80031cc:	4619      	mov	r1, r3
 80031ce:	4815      	ldr	r0, [pc, #84]	; (8003224 <sensorInitCaptureTimer+0x98>)
 80031d0:	f7fe f9c0 	bl	8001554 <TIM_ICInit>

	//nastavenie pocitadla kvoli delicke hodinovych impuzov
	TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 80031d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031d8:	613b      	str	r3, [r7, #16]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80031de:	2300      	movs	r3, #0
 80031e0:	81fb      	strh	r3, [r7, #14]
	TIM_TimeBaseStructure.TIM_Prescaler = CAPTURE_CLC_PRESCALER;
 80031e2:	239f      	movs	r3, #159	; 0x9f
 80031e4:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(CAPTURE_TIM, &TIM_TimeBaseStructure);
 80031e6:	f107 030c 	add.w	r3, r7, #12
 80031ea:	4619      	mov	r1, r3
 80031ec:	480d      	ldr	r0, [pc, #52]	; (8003224 <sensorInitCaptureTimer+0x98>)
 80031ee:	f7fe f87f 	bl	80012f0 <TIM_TimeBaseInit>

	//CAPTURE_TIM povolenie pocitadla
	TIM_Cmd(CAPTURE_TIM, ENABLE);
 80031f2:	2101      	movs	r1, #1
 80031f4:	480b      	ldr	r0, [pc, #44]	; (8003224 <sensorInitCaptureTimer+0x98>)
 80031f6:	f7fe f8cd 	bl	8001394 <TIM_Cmd>

	//povolenie CC poziadavky na prerusenie
	TIM_ITConfig(CAPTURE_TIM, LEFT_TIM_CC, ENABLE);//left
 80031fa:	2201      	movs	r2, #1
 80031fc:	2108      	movs	r1, #8
 80031fe:	4809      	ldr	r0, [pc, #36]	; (8003224 <sensorInitCaptureTimer+0x98>)
 8003200:	f7fe fa94 	bl	800172c <TIM_ITConfig>
	TIM_ITConfig(CAPTURE_TIM, RIGHT_TIM_CC, ENABLE);//right
 8003204:	2201      	movs	r2, #1
 8003206:	2102      	movs	r1, #2
 8003208:	4806      	ldr	r0, [pc, #24]	; (8003224 <sensorInitCaptureTimer+0x98>)
 800320a:	f7fe fa8f 	bl	800172c <TIM_ITConfig>
	TIM_ITConfig(CAPTURE_TIM, FORWARD_TIM_CC, ENABLE);//forward
 800320e:	2201      	movs	r2, #1
 8003210:	2110      	movs	r1, #16
 8003212:	4804      	ldr	r0, [pc, #16]	; (8003224 <sensorInitCaptureTimer+0x98>)
 8003214:	f7fe fa8a 	bl	800172c <TIM_ITConfig>

	//CAPTURE_TIM prerusenie init
	sensorInitCaptureTimerInterrup();
 8003218:	f000 f806 	bl	8003228 <sensorInitCaptureTimerInterrup>
}
 800321c:	bf00      	nop
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40000400 	.word	0x40000400

08003228 <sensorInitCaptureTimerInterrup>:

//inicializacia preruseni casovaca pre meranie dlzky impulzu z dialkomera
void sensorInitCaptureTimerInterrup(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
	//CAPTURE_TIM struct prerusenie
	NVIC_InitTypeDef NVIC_InitStructure;

	//init TIM struct prerusenie
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 800322e:	231d      	movs	r3, #29
 8003230:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 8003236:	2302      	movs	r3, #2
 8003238:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800323a:	2301      	movs	r3, #1
 800323c:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 800323e:	1d3b      	adds	r3, r7, #4
 8003240:	4618      	mov	r0, r3
 8003242:	f7fd fc37 	bl	8000ab4 <NVIC_Init>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop

08003250 <sensorInitCapturePins>:
//inicializacia pinu pre meranie dlzky impulzu z dialkomera
void sensorInitCapturePins(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
	//GPIO struct
	GPIO_InitTypeDef GPIO_InitStructure;

	//GPIOB povolenie hodin
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8003256:	2101      	movs	r1, #1
 8003258:	2002      	movs	r0, #2
 800325a:	f7fd ffd1 	bl	8001200 <RCC_AHBPeriphClockCmd>

	//CAPTURE_TIM struct init
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 800325e:	2302      	movs	r3, #2
 8003260:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8003262:	2303      	movs	r3, #3
 8003264:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003266:	2300      	movs	r3, #0
 8003268:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 800326a:	2301      	movs	r3, #1
 800326c:	71fb      	strb	r3, [r7, #7]

	//inicializacia pinu left
	GPIO_InitStructure.GPIO_Pin   = LEFT_CAP_PIN;
 800326e:	2301      	movs	r3, #1
 8003270:	603b      	str	r3, [r7, #0]
	GPIO_Init(CAPTURE_PORT, &GPIO_InitStructure);//zapisanie struktury
 8003272:	463b      	mov	r3, r7
 8003274:	4619      	mov	r1, r3
 8003276:	4812      	ldr	r0, [pc, #72]	; (80032c0 <sensorInitCapturePins+0x70>)
 8003278:	f7fd fc7c 	bl	8000b74 <GPIO_Init>
	GPIO_PinAFConfig(CAPTURE_PORT, LEFT_CAP_PINSOURCE, GPIO_AF_TIM3);
 800327c:	2202      	movs	r2, #2
 800327e:	2100      	movs	r1, #0
 8003280:	480f      	ldr	r0, [pc, #60]	; (80032c0 <sensorInitCapturePins+0x70>)
 8003282:	f7fd fd55 	bl	8000d30 <GPIO_PinAFConfig>
	//inicializacia pinu right
	GPIO_InitStructure.GPIO_Pin   = RIGHT_CAP_PIN;
 8003286:	2310      	movs	r3, #16
 8003288:	603b      	str	r3, [r7, #0]
	GPIO_Init(CAPTURE_PORT, &GPIO_InitStructure);//zapisanie struktury
 800328a:	463b      	mov	r3, r7
 800328c:	4619      	mov	r1, r3
 800328e:	480c      	ldr	r0, [pc, #48]	; (80032c0 <sensorInitCapturePins+0x70>)
 8003290:	f7fd fc70 	bl	8000b74 <GPIO_Init>
	GPIO_PinAFConfig(CAPTURE_PORT, RIGHT_CAP_PINSOURCE, GPIO_AF_TIM3);
 8003294:	2202      	movs	r2, #2
 8003296:	2104      	movs	r1, #4
 8003298:	4809      	ldr	r0, [pc, #36]	; (80032c0 <sensorInitCapturePins+0x70>)
 800329a:	f7fd fd49 	bl	8000d30 <GPIO_PinAFConfig>
	//inicializacia pinu forward
	GPIO_InitStructure.GPIO_Pin   = FORWARD_CAP_PIN;
 800329e:	2302      	movs	r3, #2
 80032a0:	603b      	str	r3, [r7, #0]
	GPIO_Init(CAPTURE_PORT, &GPIO_InitStructure);//zapisanie struktury
 80032a2:	463b      	mov	r3, r7
 80032a4:	4619      	mov	r1, r3
 80032a6:	4806      	ldr	r0, [pc, #24]	; (80032c0 <sensorInitCapturePins+0x70>)
 80032a8:	f7fd fc64 	bl	8000b74 <GPIO_Init>
	GPIO_PinAFConfig(CAPTURE_PORT, FORWARD_CAP_PINSOURCE, GPIO_AF_TIM3);
 80032ac:	2202      	movs	r2, #2
 80032ae:	2101      	movs	r1, #1
 80032b0:	4803      	ldr	r0, [pc, #12]	; (80032c0 <sensorInitCapturePins+0x70>)
 80032b2:	f7fd fd3d 	bl	8000d30 <GPIO_PinAFConfig>
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40020400 	.word	0x40020400

080032c4 <leftSensorMeasure>:

//spustenie merania laveho dialkomeru
void leftSensorMeasure(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 80032c8:	2101      	movs	r1, #1
 80032ca:	4808      	ldr	r0, [pc, #32]	; (80032ec <leftSensorMeasure+0x28>)
 80032cc:	f7fe f862 	bl	8001394 <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, LEFT_TRIG_PIN, Bit_SET);
 80032d0:	2201      	movs	r2, #1
 80032d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032d6:	4806      	ldr	r0, [pc, #24]	; (80032f0 <leftSensorMeasure+0x2c>)
 80032d8:	f7fd fcfe 	bl	8000cd8 <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	LeftSensorCaptureStruc.captureStep = 0;
 80032dc:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <leftSensorMeasure+0x30>)
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = leftSensorCaptureHandler;
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <leftSensorMeasure+0x34>)
 80032e4:	4a05      	ldr	r2, [pc, #20]	; (80032fc <leftSensorMeasure+0x38>)
 80032e6:	601a      	str	r2, [r3, #0]
}
 80032e8:	bf00      	nop
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40001400 	.word	0x40001400
 80032f0:	40020000 	.word	0x40020000
 80032f4:	200000a8 	.word	0x200000a8
 80032f8:	200000c8 	.word	0x200000c8
 80032fc:	0800347d 	.word	0x0800347d

08003300 <rightSensorMeasure>:
//spustenie merania praveho dialkomeru
void rightSensorMeasure(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 8003304:	2101      	movs	r1, #1
 8003306:	4808      	ldr	r0, [pc, #32]	; (8003328 <rightSensorMeasure+0x28>)
 8003308:	f7fe f844 	bl	8001394 <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, RIGHT_TRIG_PIN, Bit_SET);
 800330c:	2201      	movs	r2, #1
 800330e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003312:	4806      	ldr	r0, [pc, #24]	; (800332c <rightSensorMeasure+0x2c>)
 8003314:	f7fd fce0 	bl	8000cd8 <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	RightSensorCaptureStruc.captureStep = 0;
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <rightSensorMeasure+0x30>)
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = rightSensorCaptureHandler;
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <rightSensorMeasure+0x34>)
 8003320:	4a05      	ldr	r2, [pc, #20]	; (8003338 <rightSensorMeasure+0x38>)
 8003322:	601a      	str	r2, [r3, #0]
}
 8003324:	bf00      	nop
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40001400 	.word	0x40001400
 800332c:	40020000 	.word	0x40020000
 8003330:	20000098 	.word	0x20000098
 8003334:	200000c8 	.word	0x200000c8
 8003338:	080034dd 	.word	0x080034dd

0800333c <forwardSensorMeasure>:
//spustenie memrania predneho dialkomeru
void forwardSensorMeasure(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 8003340:	2101      	movs	r1, #1
 8003342:	4808      	ldr	r0, [pc, #32]	; (8003364 <forwardSensorMeasure+0x28>)
 8003344:	f7fe f826 	bl	8001394 <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, FORWARD_TRIG_PIN, Bit_SET);
 8003348:	2201      	movs	r2, #1
 800334a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800334e:	4806      	ldr	r0, [pc, #24]	; (8003368 <forwardSensorMeasure+0x2c>)
 8003350:	f7fd fcc2 	bl	8000cd8 <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	ForwardSensorCaptureStruc.captureStep = 0;
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <forwardSensorMeasure+0x30>)
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = forwardSensorCaptureHandler;
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <forwardSensorMeasure+0x34>)
 800335c:	4a05      	ldr	r2, [pc, #20]	; (8003374 <forwardSensorMeasure+0x38>)
 800335e:	601a      	str	r2, [r3, #0]
}
 8003360:	bf00      	nop
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40001400 	.word	0x40001400
 8003368:	40020000 	.word	0x40020000
 800336c:	200000b8 	.word	0x200000b8
 8003370:	200000c8 	.word	0x200000c8
 8003374:	0800353d 	.word	0x0800353d

08003378 <TIM7_IRQHandler>:

//handlery bude treba dat do suboru, ktory bude urcovat veci specificke pre dany hardver
//samotne funkcie ktore ma vykonat ale ostanu tu
//spracovanie prerusenia z TRIG_TIM, casovac pre spustaci impulz dialkomeru
void TIM7_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
	//tez do samostatnej funkcie alebo mozno bude stacit #define fjdkkdf nazov funkcie
	if (TIM_GetITStatus(TRIG_TIM, TIM_IT_Update) == SET)
 800337c:	2101      	movs	r1, #1
 800337e:	481e      	ldr	r0, [pc, #120]	; (80033f8 <TIM7_IRQHandler+0x80>)
 8003380:	f7fe f9f8 	bl	8001774 <TIM_GetITStatus>
 8003384:	4603      	mov	r3, r0
 8003386:	2b01      	cmp	r3, #1
 8003388:	d133      	bne.n	80033f2 <TIM7_IRQHandler+0x7a>
	{
		TIM_Cmd(TRIG_TIM, DISABLE);
 800338a:	2100      	movs	r1, #0
 800338c:	481a      	ldr	r0, [pc, #104]	; (80033f8 <TIM7_IRQHandler+0x80>)
 800338e:	f7fe f801 	bl	8001394 <TIM_Cmd>
		//vypnutie impulzu na prislusnom spustacom pine
		if (GPIO_ReadOutputDataBit(TRIG_PORT, LEFT_TRIG_PIN) == 1)
 8003392:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003396:	4819      	ldr	r0, [pc, #100]	; (80033fc <TIM7_IRQHandler+0x84>)
 8003398:	f7fd fc82 	bl	8000ca0 <GPIO_ReadOutputDataBit>
 800339c:	4603      	mov	r3, r0
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d106      	bne.n	80033b0 <TIM7_IRQHandler+0x38>
		{
			GPIO_WriteBit(TRIG_PORT, LEFT_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu left
 80033a2:	2200      	movs	r2, #0
 80033a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033a8:	4814      	ldr	r0, [pc, #80]	; (80033fc <TIM7_IRQHandler+0x84>)
 80033aa:	f7fd fc95 	bl	8000cd8 <GPIO_WriteBit>
 80033ae:	e01c      	b.n	80033ea <TIM7_IRQHandler+0x72>
		}
		else if (GPIO_ReadOutputDataBit(TRIG_PORT, RIGHT_TRIG_PIN) == 1)
 80033b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033b4:	4811      	ldr	r0, [pc, #68]	; (80033fc <TIM7_IRQHandler+0x84>)
 80033b6:	f7fd fc73 	bl	8000ca0 <GPIO_ReadOutputDataBit>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d106      	bne.n	80033ce <TIM7_IRQHandler+0x56>
		{
			GPIO_WriteBit(TRIG_PORT, RIGHT_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu right
 80033c0:	2200      	movs	r2, #0
 80033c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033c6:	480d      	ldr	r0, [pc, #52]	; (80033fc <TIM7_IRQHandler+0x84>)
 80033c8:	f7fd fc86 	bl	8000cd8 <GPIO_WriteBit>
 80033cc:	e00d      	b.n	80033ea <TIM7_IRQHandler+0x72>
		}
		else if (GPIO_ReadOutputDataBit(TRIG_PORT, FORWARD_TRIG_PIN) == 1)
 80033ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033d2:	480a      	ldr	r0, [pc, #40]	; (80033fc <TIM7_IRQHandler+0x84>)
 80033d4:	f7fd fc64 	bl	8000ca0 <GPIO_ReadOutputDataBit>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d105      	bne.n	80033ea <TIM7_IRQHandler+0x72>
		{
			GPIO_WriteBit(TRIG_PORT, FORWARD_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu forward
 80033de:	2200      	movs	r2, #0
 80033e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033e4:	4805      	ldr	r0, [pc, #20]	; (80033fc <TIM7_IRQHandler+0x84>)
 80033e6:	f7fd fc77 	bl	8000cd8 <GPIO_WriteBit>
		}
		TIM_ClearITPendingBit(TRIG_TIM, TIM_IT_Update);
 80033ea:	2101      	movs	r1, #1
 80033ec:	4802      	ldr	r0, [pc, #8]	; (80033f8 <TIM7_IRQHandler+0x80>)
 80033ee:	f7fe f9eb 	bl	80017c8 <TIM_ClearITPendingBit>
	}
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40001400 	.word	0x40001400
 80033fc:	40020000 	.word	0x40020000

08003400 <TIM3_IRQHandler>:
//spracovanie prerusenia z TIM3, casovac pre meranie dlzky impulzu z dialialkomerov
void TIM3_IRQHandler(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
	//spustenie spracovania prerusenia CAPTURE_TIM pre prislusny senzor
	if (sensorCaptureHandler != 0)
 8003404:	4b04      	ldr	r3, [pc, #16]	; (8003418 <TIM3_IRQHandler+0x18>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <TIM3_IRQHandler+0x12>
	{
		sensorCaptureHandler();
 800340c:	4b02      	ldr	r3, [pc, #8]	; (8003418 <TIM3_IRQHandler+0x18>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4798      	blx	r3
	}
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	200000c8 	.word	0x200000c8

0800341c <TIM10_IRQHandler>:
//spracovanie prerusenia z casovaca pre volanie merania vzdialenosti
void TIM10_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(SENSOR_CALL_TIM, TIM_IT_Update) == SET)
 8003420:	2101      	movs	r1, #1
 8003422:	4814      	ldr	r0, [pc, #80]	; (8003474 <TIM10_IRQHandler+0x58>)
 8003424:	f7fe f9a6 	bl	8001774 <TIM_GetITStatus>
 8003428:	4603      	mov	r3, r0
 800342a:	2b01      	cmp	r3, #1
 800342c:	d120      	bne.n	8003470 <TIM10_IRQHandler+0x54>
	{
		//volanie merania senzora, ktory je na rade
		switch (selectSensor)
 800342e:	4b12      	ldr	r3, [pc, #72]	; (8003478 <TIM10_IRQHandler+0x5c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d006      	beq.n	8003444 <TIM10_IRQHandler+0x28>
 8003436:	2b02      	cmp	r3, #2
 8003438:	d007      	beq.n	800344a <TIM10_IRQHandler+0x2e>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d108      	bne.n	8003450 <TIM10_IRQHandler+0x34>
		{
		case 0:
			leftSensorMeasure();
 800343e:	f7ff ff41 	bl	80032c4 <leftSensorMeasure>
			break;
 8003442:	e005      	b.n	8003450 <TIM10_IRQHandler+0x34>
		case 1:
			forwardSensorMeasure();
 8003444:	f7ff ff7a 	bl	800333c <forwardSensorMeasure>
			break;
 8003448:	e002      	b.n	8003450 <TIM10_IRQHandler+0x34>
		case 2:
			rightSensorMeasure();
 800344a:	f7ff ff59 	bl	8003300 <rightSensorMeasure>
			break;
 800344e:	bf00      	nop
		}
		//inkrementovanie volaneho senzora
		selectSensor++;
 8003450:	4b09      	ldr	r3, [pc, #36]	; (8003478 <TIM10_IRQHandler+0x5c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3301      	adds	r3, #1
 8003456:	4a08      	ldr	r2, [pc, #32]	; (8003478 <TIM10_IRQHandler+0x5c>)
 8003458:	6013      	str	r3, [r2, #0]
		if (selectSensor > 2)
 800345a:	4b07      	ldr	r3, [pc, #28]	; (8003478 <TIM10_IRQHandler+0x5c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b02      	cmp	r3, #2
 8003460:	dd02      	ble.n	8003468 <TIM10_IRQHandler+0x4c>
		{
			selectSensor = 0;
 8003462:	4b05      	ldr	r3, [pc, #20]	; (8003478 <TIM10_IRQHandler+0x5c>)
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
		}
		TIM_ClearITPendingBit(SENSOR_CALL_TIM, TIM_IT_Update);
 8003468:	2101      	movs	r1, #1
 800346a:	4802      	ldr	r0, [pc, #8]	; (8003474 <TIM10_IRQHandler+0x58>)
 800346c:	f7fe f9ac 	bl	80017c8 <TIM_ClearITPendingBit>
	}
}
 8003470:	bf00      	nop
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40010c00 	.word	0x40010c00
 8003478:	20000048 	.word	0x20000048

0800347c <leftSensorCaptureHandler>:

//meranie dlzky impulzu lavy senzor
void leftSensorCaptureHandler(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, LEFT_TIM_CC) != RESET)
 8003480:	2108      	movs	r1, #8
 8003482:	4814      	ldr	r0, [pc, #80]	; (80034d4 <leftSensorCaptureHandler+0x58>)
 8003484:	f7fe f976 	bl	8001774 <TIM_GetITStatus>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d01f      	beq.n	80034ce <leftSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, LEFT_TIM_CC);
 800348e:	2108      	movs	r1, #8
 8003490:	4810      	ldr	r0, [pc, #64]	; (80034d4 <leftSensorCaptureHandler+0x58>)
 8003492:	f7fe f999 	bl	80017c8 <TIM_ClearITPendingBit>

		if(LeftSensorCaptureStruc.captureStep == 0)
 8003496:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <leftSensorCaptureHandler+0x5c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <leftSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			LeftSensorCaptureStruc.risingTimeCapturing = LEFT_TIM_GETCAPTURE;
 800349e:	480d      	ldr	r0, [pc, #52]	; (80034d4 <leftSensorCaptureHandler+0x58>)
 80034a0:	f7fe f8b8 	bl	8001614 <TIM_GetCapture3>
 80034a4:	4602      	mov	r2, r0
 80034a6:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <leftSensorCaptureHandler+0x5c>)
 80034a8:	605a      	str	r2, [r3, #4]
			LeftSensorCaptureStruc.captureStep = 1;
 80034aa:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <leftSensorCaptureHandler+0x5c>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			LeftSensorCaptureStruc.fallingTime = LEFT_TIM_GETCAPTURE;
			LeftSensorCaptureStruc.risingTime = LeftSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 80034b0:	e00d      	b.n	80034ce <leftSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			LeftSensorCaptureStruc.risingTimeCapturing = LEFT_TIM_GETCAPTURE;
			LeftSensorCaptureStruc.captureStep = 1;
		}
		else if(LeftSensorCaptureStruc.captureStep == 1)
 80034b2:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <leftSensorCaptureHandler+0x5c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d109      	bne.n	80034ce <leftSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			LeftSensorCaptureStruc.fallingTime = LEFT_TIM_GETCAPTURE;
 80034ba:	4806      	ldr	r0, [pc, #24]	; (80034d4 <leftSensorCaptureHandler+0x58>)
 80034bc:	f7fe f8aa 	bl	8001614 <TIM_GetCapture3>
 80034c0:	4602      	mov	r2, r0
 80034c2:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <leftSensorCaptureHandler+0x5c>)
 80034c4:	60da      	str	r2, [r3, #12]
			LeftSensorCaptureStruc.risingTime = LeftSensorCaptureStruc.risingTimeCapturing;
 80034c6:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <leftSensorCaptureHandler+0x5c>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	4a03      	ldr	r2, [pc, #12]	; (80034d8 <leftSensorCaptureHandler+0x5c>)
 80034cc:	6093      	str	r3, [r2, #8]
		}
	}
}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40000400 	.word	0x40000400
 80034d8:	200000a8 	.word	0x200000a8

080034dc <rightSensorCaptureHandler>:
//meranie dlzky impulzu lavy senzor
void rightSensorCaptureHandler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, RIGHT_TIM_CC) != RESET)
 80034e0:	2102      	movs	r1, #2
 80034e2:	4814      	ldr	r0, [pc, #80]	; (8003534 <rightSensorCaptureHandler+0x58>)
 80034e4:	f7fe f946 	bl	8001774 <TIM_GetITStatus>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d01f      	beq.n	800352e <rightSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, RIGHT_TIM_CC);
 80034ee:	2102      	movs	r1, #2
 80034f0:	4810      	ldr	r0, [pc, #64]	; (8003534 <rightSensorCaptureHandler+0x58>)
 80034f2:	f7fe f969 	bl	80017c8 <TIM_ClearITPendingBit>

		if(RightSensorCaptureStruc.captureStep == 0)
 80034f6:	4b10      	ldr	r3, [pc, #64]	; (8003538 <rightSensorCaptureHandler+0x5c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d109      	bne.n	8003512 <rightSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			RightSensorCaptureStruc.risingTimeCapturing = RIGHT_TIM_GETCAPTURE;
 80034fe:	480d      	ldr	r0, [pc, #52]	; (8003534 <rightSensorCaptureHandler+0x58>)
 8003500:	f7fe f87c 	bl	80015fc <TIM_GetCapture1>
 8003504:	4602      	mov	r2, r0
 8003506:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <rightSensorCaptureHandler+0x5c>)
 8003508:	605a      	str	r2, [r3, #4]
			RightSensorCaptureStruc.captureStep = 1;
 800350a:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <rightSensorCaptureHandler+0x5c>)
 800350c:	2201      	movs	r2, #1
 800350e:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			RightSensorCaptureStruc.fallingTime = RIGHT_TIM_GETCAPTURE;
			RightSensorCaptureStruc.risingTime = RightSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 8003510:	e00d      	b.n	800352e <rightSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			RightSensorCaptureStruc.risingTimeCapturing = RIGHT_TIM_GETCAPTURE;
			RightSensorCaptureStruc.captureStep = 1;
		}
		else if(RightSensorCaptureStruc.captureStep == 1)
 8003512:	4b09      	ldr	r3, [pc, #36]	; (8003538 <rightSensorCaptureHandler+0x5c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d109      	bne.n	800352e <rightSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			RightSensorCaptureStruc.fallingTime = RIGHT_TIM_GETCAPTURE;
 800351a:	4806      	ldr	r0, [pc, #24]	; (8003534 <rightSensorCaptureHandler+0x58>)
 800351c:	f7fe f86e 	bl	80015fc <TIM_GetCapture1>
 8003520:	4602      	mov	r2, r0
 8003522:	4b05      	ldr	r3, [pc, #20]	; (8003538 <rightSensorCaptureHandler+0x5c>)
 8003524:	60da      	str	r2, [r3, #12]
			RightSensorCaptureStruc.risingTime = RightSensorCaptureStruc.risingTimeCapturing;
 8003526:	4b04      	ldr	r3, [pc, #16]	; (8003538 <rightSensorCaptureHandler+0x5c>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4a03      	ldr	r2, [pc, #12]	; (8003538 <rightSensorCaptureHandler+0x5c>)
 800352c:	6093      	str	r3, [r2, #8]
		}
	}
}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40000400 	.word	0x40000400
 8003538:	20000098 	.word	0x20000098

0800353c <forwardSensorCaptureHandler>:
//meranie dlzky impulzu lavy senzor
void forwardSensorCaptureHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, FORWARD_TIM_CC) != RESET)
 8003540:	2110      	movs	r1, #16
 8003542:	4814      	ldr	r0, [pc, #80]	; (8003594 <forwardSensorCaptureHandler+0x58>)
 8003544:	f7fe f916 	bl	8001774 <TIM_GetITStatus>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d01f      	beq.n	800358e <forwardSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, FORWARD_TIM_CC);
 800354e:	2110      	movs	r1, #16
 8003550:	4810      	ldr	r0, [pc, #64]	; (8003594 <forwardSensorCaptureHandler+0x58>)
 8003552:	f7fe f939 	bl	80017c8 <TIM_ClearITPendingBit>

		if(ForwardSensorCaptureStruc.captureStep == 0)
 8003556:	4b10      	ldr	r3, [pc, #64]	; (8003598 <forwardSensorCaptureHandler+0x5c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <forwardSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			ForwardSensorCaptureStruc.risingTimeCapturing = FORWARD_TIM_GETCAPTURE;
 800355e:	480d      	ldr	r0, [pc, #52]	; (8003594 <forwardSensorCaptureHandler+0x58>)
 8003560:	f7fe f864 	bl	800162c <TIM_GetCapture4>
 8003564:	4602      	mov	r2, r0
 8003566:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <forwardSensorCaptureHandler+0x5c>)
 8003568:	605a      	str	r2, [r3, #4]
			ForwardSensorCaptureStruc.captureStep = 1;
 800356a:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <forwardSensorCaptureHandler+0x5c>)
 800356c:	2201      	movs	r2, #1
 800356e:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			ForwardSensorCaptureStruc.fallingTime = FORWARD_TIM_GETCAPTURE;
			ForwardSensorCaptureStruc.risingTime = ForwardSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 8003570:	e00d      	b.n	800358e <forwardSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			ForwardSensorCaptureStruc.risingTimeCapturing = FORWARD_TIM_GETCAPTURE;
			ForwardSensorCaptureStruc.captureStep = 1;
		}
		else if(ForwardSensorCaptureStruc.captureStep == 1)
 8003572:	4b09      	ldr	r3, [pc, #36]	; (8003598 <forwardSensorCaptureHandler+0x5c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d109      	bne.n	800358e <forwardSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			ForwardSensorCaptureStruc.fallingTime = FORWARD_TIM_GETCAPTURE;
 800357a:	4806      	ldr	r0, [pc, #24]	; (8003594 <forwardSensorCaptureHandler+0x58>)
 800357c:	f7fe f856 	bl	800162c <TIM_GetCapture4>
 8003580:	4602      	mov	r2, r0
 8003582:	4b05      	ldr	r3, [pc, #20]	; (8003598 <forwardSensorCaptureHandler+0x5c>)
 8003584:	60da      	str	r2, [r3, #12]
			ForwardSensorCaptureStruc.risingTime = ForwardSensorCaptureStruc.risingTimeCapturing;
 8003586:	4b04      	ldr	r3, [pc, #16]	; (8003598 <forwardSensorCaptureHandler+0x5c>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4a03      	ldr	r2, [pc, #12]	; (8003598 <forwardSensorCaptureHandler+0x5c>)
 800358c:	6093      	str	r3, [r2, #8]
		}
	}
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40000400 	.word	0x40000400
 8003598:	200000b8 	.word	0x200000b8
 800359c:	00000000 	.word	0x00000000

080035a0 <leftSensorGetDistance>:

//prevzatie nameranej vzdialenosti z laveho dialkomeru
double leftSensorGetDistance(void)
{
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
	uint32_t leftDistanceTime = 0;//konecna dlzka impulzu z dialkomeru
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
	double distance = 0;//konecna vzdialenost
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	f04f 0400 	mov.w	r4, #0
 80035b2:	e887 0018 	stmia.w	r7, {r3, r4}

	//vypocet trvania impulzu
	leftDistanceTime = computeEchoDuration(LeftSensorCaptureStruc.risingTime, LeftSensorCaptureStruc.fallingTime);
 80035b6:	4b1c      	ldr	r3, [pc, #112]	; (8003628 <leftSensorGetDistance+0x88>)
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	4b1b      	ldr	r3, [pc, #108]	; (8003628 <leftSensorGetDistance+0x88>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f000 f8cf 	bl	8003764 <computeEchoDuration>
 80035c6:	60f8      	str	r0, [r7, #12]

	//vypocet vzdialenosti z laveho senzoru
	distance = leftDistanceTime/DISTANCE_CLC_CONST/DISTANCE_ENV_CONST;
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f7fc ff1b 	bl	8000404 <__aeabi_ui2d>
 80035ce:	a314      	add	r3, pc, #80	; (adr r3, 8003620 <leftSensorGetDistance+0x80>)
 80035d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d4:	f7fd f8b6 	bl	8000744 <__aeabi_ddiv>
 80035d8:	4603      	mov	r3, r0
 80035da:	460c      	mov	r4, r1
 80035dc:	4618      	mov	r0, r3
 80035de:	4621      	mov	r1, r4
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <leftSensorGetDistance+0x8c>)
 80035e6:	f7fd f8ad 	bl	8000744 <__aeabi_ddiv>
 80035ea:	4603      	mov	r3, r0
 80035ec:	460c      	mov	r4, r1
 80035ee:	e887 0018 	stmia.w	r7, {r3, r4}
	if (distance > DISTANCE_MAX)
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	4b0e      	ldr	r3, [pc, #56]	; (8003630 <leftSensorGetDistance+0x90>)
 80035f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035fc:	f7fd fa08 	bl	8000a10 <__aeabi_dcmpgt>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <leftSensorGetDistance+0x6e>
	{
		//senzor nic nezachytil
		return DISTANCE_MAX;
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	4c09      	ldr	r4, [pc, #36]	; (8003630 <leftSensorGetDistance+0x90>)
 800360c:	e001      	b.n	8003612 <leftSensorGetDistance+0x72>
	}
	else
	{
		return distance;
 800360e:	e897 0018 	ldmia.w	r7, {r3, r4}
	}
}
 8003612:	4618      	mov	r0, r3
 8003614:	4621      	mov	r1, r4
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	bd90      	pop	{r4, r7, pc}
 800361c:	f3af 8000 	nop.w
 8003620:	9999999a 	.word	0x9999999a
 8003624:	3fb99999 	.word	0x3fb99999
 8003628:	200000a8 	.word	0x200000a8
 800362c:	404d0000 	.word	0x404d0000
 8003630:	40790000 	.word	0x40790000
 8003634:	00000000 	.word	0x00000000

08003638 <rightSensorGetDistance>:
//prevzatie nameranej vzdialenosti z praveho dialkomeru
double rightSensorGetDistance(void)
{
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
	uint32_t rightDistanceTime = 0;//konecna dlzka impulzu z dialkomer
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
	double distance = 0;//konecna vzdialenost
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	f04f 0400 	mov.w	r4, #0
 800364a:	e887 0018 	stmia.w	r7, {r3, r4}

	//vypocet trvania impulzu
	rightDistanceTime = computeEchoDuration(RightSensorCaptureStruc.risingTime, RightSensorCaptureStruc.fallingTime);
 800364e:	4b1c      	ldr	r3, [pc, #112]	; (80036c0 <rightSensorGetDistance+0x88>)
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <rightSensorGetDistance+0x88>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	4619      	mov	r1, r3
 8003658:	4610      	mov	r0, r2
 800365a:	f000 f883 	bl	8003764 <computeEchoDuration>
 800365e:	60f8      	str	r0, [r7, #12]

	//vypocet vzdialenosti z praveho senzoru
	distance = rightDistanceTime/DISTANCE_CLC_CONST/DISTANCE_ENV_CONST;
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f7fc fecf 	bl	8000404 <__aeabi_ui2d>
 8003666:	a314      	add	r3, pc, #80	; (adr r3, 80036b8 <rightSensorGetDistance+0x80>)
 8003668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366c:	f7fd f86a 	bl	8000744 <__aeabi_ddiv>
 8003670:	4603      	mov	r3, r0
 8003672:	460c      	mov	r4, r1
 8003674:	4618      	mov	r0, r3
 8003676:	4621      	mov	r1, r4
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <rightSensorGetDistance+0x8c>)
 800367e:	f7fd f861 	bl	8000744 <__aeabi_ddiv>
 8003682:	4603      	mov	r3, r0
 8003684:	460c      	mov	r4, r1
 8003686:	e887 0018 	stmia.w	r7, {r3, r4}
	if (distance > DISTANCE_MAX)
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <rightSensorGetDistance+0x90>)
 8003690:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003694:	f7fd f9bc 	bl	8000a10 <__aeabi_dcmpgt>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <rightSensorGetDistance+0x6e>
	{
		//senzor nic nezachytil
		return DISTANCE_MAX;
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	4c09      	ldr	r4, [pc, #36]	; (80036c8 <rightSensorGetDistance+0x90>)
 80036a4:	e001      	b.n	80036aa <rightSensorGetDistance+0x72>
	}
	else
	{
		return distance;
 80036a6:	e897 0018 	ldmia.w	r7, {r3, r4}
	}
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	4621      	mov	r1, r4
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd90      	pop	{r4, r7, pc}
 80036b4:	f3af 8000 	nop.w
 80036b8:	9999999a 	.word	0x9999999a
 80036bc:	3fb99999 	.word	0x3fb99999
 80036c0:	20000098 	.word	0x20000098
 80036c4:	404d0000 	.word	0x404d0000
 80036c8:	40790000 	.word	0x40790000
 80036cc:	00000000 	.word	0x00000000

080036d0 <forwardSensorGetDistance>:
//prevzatie nameranej vzdialenosti z predneho dialkomeru
double forwardSensorGetDistance(void)
{
 80036d0:	b590      	push	{r4, r7, lr}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
	uint32_t forwardDistanceTime = 0;//konecna dlzka impulzu z dialkomeru
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]
	double distance = 0;//konecna vzdialenost
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	f04f 0400 	mov.w	r4, #0
 80036e2:	e887 0018 	stmia.w	r7, {r3, r4}

	//vypocet trvania impulzu
	forwardDistanceTime = computeEchoDuration(ForwardSensorCaptureStruc.risingTime, ForwardSensorCaptureStruc.fallingTime);
 80036e6:	4b1c      	ldr	r3, [pc, #112]	; (8003758 <forwardSensorGetDistance+0x88>)
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <forwardSensorGetDistance+0x88>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	4619      	mov	r1, r3
 80036f0:	4610      	mov	r0, r2
 80036f2:	f000 f837 	bl	8003764 <computeEchoDuration>
 80036f6:	60f8      	str	r0, [r7, #12]

	//vypocet vzdialenosti z predneho senzoru
	distance = forwardDistanceTime/DISTANCE_CLC_CONST/DISTANCE_ENV_CONST;
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7fc fe83 	bl	8000404 <__aeabi_ui2d>
 80036fe:	a314      	add	r3, pc, #80	; (adr r3, 8003750 <forwardSensorGetDistance+0x80>)
 8003700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003704:	f7fd f81e 	bl	8000744 <__aeabi_ddiv>
 8003708:	4603      	mov	r3, r0
 800370a:	460c      	mov	r4, r1
 800370c:	4618      	mov	r0, r3
 800370e:	4621      	mov	r1, r4
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	4b11      	ldr	r3, [pc, #68]	; (800375c <forwardSensorGetDistance+0x8c>)
 8003716:	f7fd f815 	bl	8000744 <__aeabi_ddiv>
 800371a:	4603      	mov	r3, r0
 800371c:	460c      	mov	r4, r1
 800371e:	e887 0018 	stmia.w	r7, {r3, r4}
	if (distance > DISTANCE_MAX)
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <forwardSensorGetDistance+0x90>)
 8003728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800372c:	f7fd f970 	bl	8000a10 <__aeabi_dcmpgt>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <forwardSensorGetDistance+0x6e>
	{
		//senzor nic nezachytil
		return DISTANCE_MAX;
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	4c09      	ldr	r4, [pc, #36]	; (8003760 <forwardSensorGetDistance+0x90>)
 800373c:	e001      	b.n	8003742 <forwardSensorGetDistance+0x72>
	}
	else
	{
		return distance;
 800373e:	e897 0018 	ldmia.w	r7, {r3, r4}
	}
}
 8003742:	4618      	mov	r0, r3
 8003744:	4621      	mov	r1, r4
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	bd90      	pop	{r4, r7, pc}
 800374c:	f3af 8000 	nop.w
 8003750:	9999999a 	.word	0x9999999a
 8003754:	3fb99999 	.word	0x3fb99999
 8003758:	200000b8 	.word	0x200000b8
 800375c:	404d0000 	.word	0x404d0000
 8003760:	40790000 	.word	0x40790000

08003764 <computeEchoDuration>:

//vypocet trvania impulzu ozveny z dialkomera
uint32_t computeEchoDuration(uint32_t risingTime, uint32_t fallingTime)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
	uint32_t distanceTime = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
	//vypocet podla toho ci nabezna alebo dobezna je vacsie cislo
	if (fallingTime > risingTime)
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	429a      	cmp	r2, r3
 8003778:	d905      	bls.n	8003786 <computeEchoDuration+0x22>
	{
		distanceTime = (fallingTime - risingTime) - 1;
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	e00d      	b.n	80037a2 <computeEchoDuration+0x3e>
	}
	else if (fallingTime < risingTime)
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	429a      	cmp	r2, r3
 800378c:	d207      	bcs.n	800379e <computeEchoDuration+0x3a>
	{
		distanceTime = ((CAPTURE_COUNT_MAX - risingTime) + fallingTime) - 1;
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003798:	33fe      	adds	r3, #254	; 0xfe
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	e001      	b.n	80037a2 <computeEchoDuration+0x3e>
	}
	else
	{
		distanceTime = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
	}

	return distanceTime;
 80037a2:	68fb      	ldr	r3, [r7, #12]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop

080037b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80037b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80037b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80037b6:	e003      	b.n	80037c0 <LoopCopyDataInit>

080037b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80037b8:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 80037ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80037bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80037be:	3104      	adds	r1, #4

080037c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80037c0:	480b      	ldr	r0, [pc, #44]	; (80037f0 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 80037c2:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 80037c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80037c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80037c8:	d3f6      	bcc.n	80037b8 <CopyDataInit>
  ldr r2, =_sbss
 80037ca:	4a0b      	ldr	r2, [pc, #44]	; (80037f8 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 80037cc:	e002      	b.n	80037d4 <LoopFillZerobss>

080037ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80037ce:	2300      	movs	r3, #0
  str r3, [r2], #4
 80037d0:	f842 3b04 	str.w	r3, [r2], #4

080037d4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80037d4:	4b09      	ldr	r3, [pc, #36]	; (80037fc <LoopFillZerobss+0x28>)
  cmp r2, r3
 80037d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80037d8:	d3f9      	bcc.n	80037ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037da:	f000 f841 	bl	8003860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037de:	f000 f903 	bl	80039e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037e2:	f7ff fa6b 	bl	8002cbc <main>
  bx lr
 80037e6:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80037e8:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80037ec:	08003f60 	.word	0x08003f60
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80037f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80037f4:	2000001c 	.word	0x2000001c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80037f8:	20000020 	.word	0x20000020
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 80037fc:	200000cc 	.word	0x200000cc

08003800 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003800:	e7fe      	b.n	8003800 <ADC1_IRQHandler>
	...

08003804 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr

08003810 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8003814:	e7fe      	b.n	8003814 <HardFault_Handler+0x4>
 8003816:	bf00      	nop

08003818 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800381c:	e7fe      	b.n	800381c <MemManage_Handler+0x4>
 800381e:	bf00      	nop

08003820 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8003824:	e7fe      	b.n	8003824 <BusFault_Handler+0x4>
 8003826:	bf00      	nop

08003828 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 800382c:	e7fe      	b.n	800382c <UsageFault_Handler+0x4>
 800382e:	bf00      	nop

08003830 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
}
 8003834:	bf00      	nop
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
}
 8003840:	bf00      	nop
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
}
 800384c:	bf00      	nop
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8003864:	4a15      	ldr	r2, [pc, #84]	; (80038bc <SystemInit+0x5c>)
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <SystemInit+0x5c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386e:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8003870:	4912      	ldr	r1, [pc, #72]	; (80038bc <SystemInit+0x5c>)
 8003872:	4b12      	ldr	r3, [pc, #72]	; (80038bc <SystemInit+0x5c>)
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <SystemInit+0x60>)
 8003878:	4013      	ands	r3, r2
 800387a:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 800387c:	4a0f      	ldr	r2, [pc, #60]	; (80038bc <SystemInit+0x5c>)
 800387e:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <SystemInit+0x5c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003886:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800388a:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800388c:	4a0b      	ldr	r2, [pc, #44]	; (80038bc <SystemInit+0x5c>)
 800388e:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <SystemInit+0x5c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003896:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8003898:	4a08      	ldr	r2, [pc, #32]	; (80038bc <SystemInit+0x5c>)
 800389a:	4b08      	ldr	r3, [pc, #32]	; (80038bc <SystemInit+0x5c>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80038a2:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <SystemInit+0x5c>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 80038aa:	f000 f80d 	bl	80038c8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80038ae:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <SystemInit+0x64>)
 80038b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038b4:	609a      	str	r2, [r3, #8]
#endif
}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800
 80038c0:	88ffc00c 	.word	0x88ffc00c
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	2300      	movs	r3, #0
 80038d4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80038d6:	4a41      	ldr	r2, [pc, #260]	; (80039dc <SetSysClock+0x114>)
 80038d8:	4b40      	ldr	r3, [pc, #256]	; (80039dc <SetSysClock+0x114>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80038e2:	4b3e      	ldr	r3, [pc, #248]	; (80039dc <SetSysClock+0x114>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3301      	adds	r3, #1
 80038f0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d103      	bne.n	8003900 <SetSysClock+0x38>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80038fe:	d1f0      	bne.n	80038e2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003900:	4b36      	ldr	r3, [pc, #216]	; (80039dc <SetSysClock+0x114>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800390c:	2301      	movs	r3, #1
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	e001      	b.n	8003916 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003912:	2300      	movs	r3, #0
 8003914:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d15a      	bne.n	80039d2 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 800391c:	4a30      	ldr	r2, [pc, #192]	; (80039e0 <SetSysClock+0x118>)
 800391e:	4b30      	ldr	r3, [pc, #192]	; (80039e0 <SetSysClock+0x118>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f043 0304 	orr.w	r3, r3, #4
 8003926:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8003928:	4a2d      	ldr	r2, [pc, #180]	; (80039e0 <SetSysClock+0x118>)
 800392a:	4b2d      	ldr	r3, [pc, #180]	; (80039e0 <SetSysClock+0x118>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f043 0302 	orr.w	r3, r3, #2
 8003932:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8003934:	4a2a      	ldr	r2, [pc, #168]	; (80039e0 <SetSysClock+0x118>)
 8003936:	4b2a      	ldr	r3, [pc, #168]	; (80039e0 <SetSysClock+0x118>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003940:	4a26      	ldr	r2, [pc, #152]	; (80039dc <SetSysClock+0x114>)
 8003942:	4b26      	ldr	r3, [pc, #152]	; (80039dc <SetSysClock+0x114>)
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800394a:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 800394c:	4b25      	ldr	r3, [pc, #148]	; (80039e4 <SetSysClock+0x11c>)
 800394e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003952:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8003954:	bf00      	nop
 8003956:	4b23      	ldr	r3, [pc, #140]	; (80039e4 <SetSysClock+0x11c>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f9      	bne.n	8003956 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003962:	4a1e      	ldr	r2, [pc, #120]	; (80039dc <SetSysClock+0x114>)
 8003964:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <SetSysClock+0x114>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800396a:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <SetSysClock+0x114>)
 800396c:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <SetSysClock+0x114>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8003972:	4a1a      	ldr	r2, [pc, #104]	; (80039dc <SetSysClock+0x114>)
 8003974:	4b19      	ldr	r3, [pc, #100]	; (80039dc <SetSysClock+0x114>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 800397a:	4a18      	ldr	r2, [pc, #96]	; (80039dc <SetSysClock+0x114>)
 800397c:	4b17      	ldr	r3, [pc, #92]	; (80039dc <SetSysClock+0x114>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8003984:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8003986:	4a15      	ldr	r2, [pc, #84]	; (80039dc <SetSysClock+0x114>)
 8003988:	4b14      	ldr	r3, [pc, #80]	; (80039dc <SetSysClock+0x114>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8003990:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003992:	4a12      	ldr	r2, [pc, #72]	; (80039dc <SetSysClock+0x114>)
 8003994:	4b11      	ldr	r3, [pc, #68]	; (80039dc <SetSysClock+0x114>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800399c:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800399e:	bf00      	nop
 80039a0:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <SetSysClock+0x114>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0f9      	beq.n	80039a0 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80039ac:	4a0b      	ldr	r2, [pc, #44]	; (80039dc <SetSysClock+0x114>)
 80039ae:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <SetSysClock+0x114>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f023 0303 	bic.w	r3, r3, #3
 80039b6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80039b8:	4a08      	ldr	r2, [pc, #32]	; (80039dc <SetSysClock+0x114>)
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <SetSysClock+0x114>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f043 0303 	orr.w	r3, r3, #3
 80039c2:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80039c4:	bf00      	nop
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <SetSysClock+0x114>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b0c      	cmp	r3, #12
 80039d0:	d1f9      	bne.n	80039c6 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr
 80039dc:	40023800 	.word	0x40023800
 80039e0:	40023c00 	.word	0x40023c00
 80039e4:	40007000 	.word	0x40007000

080039e8 <__libc_init_array>:
 80039e8:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <__libc_init_array+0x3c>)
 80039ea:	b570      	push	{r4, r5, r6, lr}
 80039ec:	461e      	mov	r6, r3
 80039ee:	4c0e      	ldr	r4, [pc, #56]	; (8003a28 <__libc_init_array+0x40>)
 80039f0:	2500      	movs	r5, #0
 80039f2:	1ae4      	subs	r4, r4, r3
 80039f4:	10a4      	asrs	r4, r4, #2
 80039f6:	42a5      	cmp	r5, r4
 80039f8:	d004      	beq.n	8003a04 <__libc_init_array+0x1c>
 80039fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039fe:	4798      	blx	r3
 8003a00:	3501      	adds	r5, #1
 8003a02:	e7f8      	b.n	80039f6 <__libc_init_array+0xe>
 8003a04:	f000 fa7a 	bl	8003efc <_init>
 8003a08:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <__libc_init_array+0x44>)
 8003a0a:	4c09      	ldr	r4, [pc, #36]	; (8003a30 <__libc_init_array+0x48>)
 8003a0c:	461e      	mov	r6, r3
 8003a0e:	1ae4      	subs	r4, r4, r3
 8003a10:	10a4      	asrs	r4, r4, #2
 8003a12:	2500      	movs	r5, #0
 8003a14:	42a5      	cmp	r5, r4
 8003a16:	d004      	beq.n	8003a22 <__libc_init_array+0x3a>
 8003a18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a1c:	4798      	blx	r3
 8003a1e:	3501      	adds	r5, #1
 8003a20:	e7f8      	b.n	8003a14 <__libc_init_array+0x2c>
 8003a22:	bd70      	pop	{r4, r5, r6, pc}
 8003a24:	08003f58 	.word	0x08003f58
 8003a28:	08003f58 	.word	0x08003f58
 8003a2c:	08003f58 	.word	0x08003f58
 8003a30:	08003f5c 	.word	0x08003f5c

08003a34 <atan2>:
 8003a34:	f000 b800 	b.w	8003a38 <__ieee754_atan2>

08003a38 <__ieee754_atan2>:
 8003a38:	4694      	mov	ip, r2
 8003a3a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a42:	469e      	mov	lr, r3
 8003a44:	461f      	mov	r7, r3
 8003a46:	f1cc 0300 	rsb	r3, ip, #0
 8003a4a:	ea43 030c 	orr.w	r3, r3, ip
 8003a4e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8003bd0 <__ieee754_atan2+0x198>
 8003a52:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8003a56:	454b      	cmp	r3, r9
 8003a58:	4605      	mov	r5, r0
 8003a5a:	460c      	mov	r4, r1
 8003a5c:	4688      	mov	r8, r1
 8003a5e:	d807      	bhi.n	8003a70 <__ieee754_atan2+0x38>
 8003a60:	4246      	negs	r6, r0
 8003a62:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003a66:	4306      	orrs	r6, r0
 8003a68:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8003a6c:	454e      	cmp	r6, r9
 8003a6e:	d906      	bls.n	8003a7e <__ieee754_atan2+0x46>
 8003a70:	462a      	mov	r2, r5
 8003a72:	4623      	mov	r3, r4
 8003a74:	4660      	mov	r0, ip
 8003a76:	4671      	mov	r1, lr
 8003a78:	f7fc fb88 	bl	800018c <__adddf3>
 8003a7c:	e083      	b.n	8003b86 <__ieee754_atan2+0x14e>
 8003a7e:	f10e 4640 	add.w	r6, lr, #3221225472	; 0xc0000000
 8003a82:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8003a86:	ea56 060c 	orrs.w	r6, r6, ip
 8003a8a:	d103      	bne.n	8003a94 <__ieee754_atan2+0x5c>
 8003a8c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a90:	f000 b8a2 	b.w	8003bd8 <atan>
 8003a94:	17be      	asrs	r6, r7, #30
 8003a96:	f006 0602 	and.w	r6, r6, #2
 8003a9a:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8003a9e:	ea50 0103 	orrs.w	r1, r0, r3
 8003aa2:	d105      	bne.n	8003ab0 <__ieee754_atan2+0x78>
 8003aa4:	2e02      	cmp	r6, #2
 8003aa6:	d066      	beq.n	8003b76 <__ieee754_atan2+0x13e>
 8003aa8:	2e03      	cmp	r6, #3
 8003aaa:	d022      	beq.n	8003af2 <__ieee754_atan2+0xba>
 8003aac:	4621      	mov	r1, r4
 8003aae:	e06a      	b.n	8003b86 <__ieee754_atan2+0x14e>
 8003ab0:	ea5c 0102 	orrs.w	r1, ip, r2
 8003ab4:	d022      	beq.n	8003afc <__ieee754_atan2+0xc4>
 8003ab6:	454a      	cmp	r2, r9
 8003ab8:	d11e      	bne.n	8003af8 <__ieee754_atan2+0xc0>
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d10e      	bne.n	8003adc <__ieee754_atan2+0xa4>
 8003abe:	2e02      	cmp	r6, #2
 8003ac0:	d006      	beq.n	8003ad0 <__ieee754_atan2+0x98>
 8003ac2:	2e03      	cmp	r6, #3
 8003ac4:	d007      	beq.n	8003ad6 <__ieee754_atan2+0x9e>
 8003ac6:	2e01      	cmp	r6, #1
 8003ac8:	4837      	ldr	r0, [pc, #220]	; (8003ba8 <__ieee754_atan2+0x170>)
 8003aca:	d157      	bne.n	8003b7c <__ieee754_atan2+0x144>
 8003acc:	4937      	ldr	r1, [pc, #220]	; (8003bac <__ieee754_atan2+0x174>)
 8003ace:	e05a      	b.n	8003b86 <__ieee754_atan2+0x14e>
 8003ad0:	4837      	ldr	r0, [pc, #220]	; (8003bb0 <__ieee754_atan2+0x178>)
 8003ad2:	4938      	ldr	r1, [pc, #224]	; (8003bb4 <__ieee754_atan2+0x17c>)
 8003ad4:	e057      	b.n	8003b86 <__ieee754_atan2+0x14e>
 8003ad6:	4836      	ldr	r0, [pc, #216]	; (8003bb0 <__ieee754_atan2+0x178>)
 8003ad8:	4937      	ldr	r1, [pc, #220]	; (8003bb8 <__ieee754_atan2+0x180>)
 8003ada:	e054      	b.n	8003b86 <__ieee754_atan2+0x14e>
 8003adc:	2e02      	cmp	r6, #2
 8003ade:	d04a      	beq.n	8003b76 <__ieee754_atan2+0x13e>
 8003ae0:	2e03      	cmp	r6, #3
 8003ae2:	d006      	beq.n	8003af2 <__ieee754_atan2+0xba>
 8003ae4:	2e01      	cmp	r6, #1
 8003ae6:	f04f 0000 	mov.w	r0, #0
 8003aea:	d149      	bne.n	8003b80 <__ieee754_atan2+0x148>
 8003aec:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003af0:	e049      	b.n	8003b86 <__ieee754_atan2+0x14e>
 8003af2:	482d      	ldr	r0, [pc, #180]	; (8003ba8 <__ieee754_atan2+0x170>)
 8003af4:	4931      	ldr	r1, [pc, #196]	; (8003bbc <__ieee754_atan2+0x184>)
 8003af6:	e046      	b.n	8003b86 <__ieee754_atan2+0x14e>
 8003af8:	454b      	cmp	r3, r9
 8003afa:	d105      	bne.n	8003b08 <__ieee754_atan2+0xd0>
 8003afc:	f1b8 0f00 	cmp.w	r8, #0
 8003b00:	4829      	ldr	r0, [pc, #164]	; (8003ba8 <__ieee754_atan2+0x170>)
 8003b02:	da3f      	bge.n	8003b84 <__ieee754_atan2+0x14c>
 8003b04:	492e      	ldr	r1, [pc, #184]	; (8003bc0 <__ieee754_atan2+0x188>)
 8003b06:	e03e      	b.n	8003b86 <__ieee754_atan2+0x14e>
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	151b      	asrs	r3, r3, #20
 8003b0c:	2b3c      	cmp	r3, #60	; 0x3c
 8003b0e:	dc0e      	bgt.n	8003b2e <__ieee754_atan2+0xf6>
 8003b10:	2f00      	cmp	r7, #0
 8003b12:	da01      	bge.n	8003b18 <__ieee754_atan2+0xe0>
 8003b14:	333c      	adds	r3, #60	; 0x3c
 8003b16:	db0e      	blt.n	8003b36 <__ieee754_atan2+0xfe>
 8003b18:	4662      	mov	r2, ip
 8003b1a:	4673      	mov	r3, lr
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	4621      	mov	r1, r4
 8003b20:	f7fc fe10 	bl	8000744 <__aeabi_ddiv>
 8003b24:	f000 f9e6 	bl	8003ef4 <fabs>
 8003b28:	f000 f856 	bl	8003bd8 <atan>
 8003b2c:	e005      	b.n	8003b3a <__ieee754_atan2+0x102>
 8003b2e:	a118      	add	r1, pc, #96	; (adr r1, 8003b90 <__ieee754_atan2+0x158>)
 8003b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b34:	e001      	b.n	8003b3a <__ieee754_atan2+0x102>
 8003b36:	2000      	movs	r0, #0
 8003b38:	2100      	movs	r1, #0
 8003b3a:	2e01      	cmp	r6, #1
 8003b3c:	d00b      	beq.n	8003b56 <__ieee754_atan2+0x11e>
 8003b3e:	2e02      	cmp	r6, #2
 8003b40:	d00c      	beq.n	8003b5c <__ieee754_atan2+0x124>
 8003b42:	b306      	cbz	r6, 8003b86 <__ieee754_atan2+0x14e>
 8003b44:	a314      	add	r3, pc, #80	; (adr r3, 8003b98 <__ieee754_atan2+0x160>)
 8003b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4a:	f7fc fb1d 	bl	8000188 <__aeabi_dsub>
 8003b4e:	a314      	add	r3, pc, #80	; (adr r3, 8003ba0 <__ieee754_atan2+0x168>)
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	e00c      	b.n	8003b70 <__ieee754_atan2+0x138>
 8003b56:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003b5a:	e014      	b.n	8003b86 <__ieee754_atan2+0x14e>
 8003b5c:	a30e      	add	r3, pc, #56	; (adr r3, 8003b98 <__ieee754_atan2+0x160>)
 8003b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b62:	f7fc fb11 	bl	8000188 <__aeabi_dsub>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	a10d      	add	r1, pc, #52	; (adr r1, 8003ba0 <__ieee754_atan2+0x168>)
 8003b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b70:	f7fc fb0a 	bl	8000188 <__aeabi_dsub>
 8003b74:	e007      	b.n	8003b86 <__ieee754_atan2+0x14e>
 8003b76:	480c      	ldr	r0, [pc, #48]	; (8003ba8 <__ieee754_atan2+0x170>)
 8003b78:	4912      	ldr	r1, [pc, #72]	; (8003bc4 <__ieee754_atan2+0x18c>)
 8003b7a:	e004      	b.n	8003b86 <__ieee754_atan2+0x14e>
 8003b7c:	4912      	ldr	r1, [pc, #72]	; (8003bc8 <__ieee754_atan2+0x190>)
 8003b7e:	e002      	b.n	8003b86 <__ieee754_atan2+0x14e>
 8003b80:	4601      	mov	r1, r0
 8003b82:	e000      	b.n	8003b86 <__ieee754_atan2+0x14e>
 8003b84:	4911      	ldr	r1, [pc, #68]	; (8003bcc <__ieee754_atan2+0x194>)
 8003b86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b8a:	bf00      	nop
 8003b8c:	f3af 8000 	nop.w
 8003b90:	54442d18 	.word	0x54442d18
 8003b94:	3ff921fb 	.word	0x3ff921fb
 8003b98:	33145c07 	.word	0x33145c07
 8003b9c:	3ca1a626 	.word	0x3ca1a626
 8003ba0:	54442d18 	.word	0x54442d18
 8003ba4:	400921fb 	.word	0x400921fb
 8003ba8:	54442d18 	.word	0x54442d18
 8003bac:	bfe921fb 	.word	0xbfe921fb
 8003bb0:	7f3321d2 	.word	0x7f3321d2
 8003bb4:	4002d97c 	.word	0x4002d97c
 8003bb8:	c002d97c 	.word	0xc002d97c
 8003bbc:	c00921fb 	.word	0xc00921fb
 8003bc0:	bff921fb 	.word	0xbff921fb
 8003bc4:	400921fb 	.word	0x400921fb
 8003bc8:	3fe921fb 	.word	0x3fe921fb
 8003bcc:	3ff921fb 	.word	0x3ff921fb
 8003bd0:	7ff00000 	.word	0x7ff00000
 8003bd4:	00000000 	.word	0x00000000

08003bd8 <atan>:
 8003bd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bdc:	4bb8      	ldr	r3, [pc, #736]	; (8003ec0 <atan+0x2e8>)
 8003bde:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003be2:	429e      	cmp	r6, r3
 8003be4:	4604      	mov	r4, r0
 8003be6:	460d      	mov	r5, r1
 8003be8:	468b      	mov	fp, r1
 8003bea:	dd13      	ble.n	8003c14 <atan+0x3c>
 8003bec:	4ab5      	ldr	r2, [pc, #724]	; (8003ec4 <atan+0x2ec>)
 8003bee:	4296      	cmp	r6, r2
 8003bf0:	dc01      	bgt.n	8003bf6 <atan+0x1e>
 8003bf2:	d107      	bne.n	8003c04 <atan+0x2c>
 8003bf4:	b130      	cbz	r0, 8003c04 <atan+0x2c>
 8003bf6:	4622      	mov	r2, r4
 8003bf8:	462b      	mov	r3, r5
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	f7fc fac5 	bl	800018c <__adddf3>
 8003c02:	e104      	b.n	8003e0e <atan+0x236>
 8003c04:	49b0      	ldr	r1, [pc, #704]	; (8003ec8 <atan+0x2f0>)
 8003c06:	4bb1      	ldr	r3, [pc, #708]	; (8003ecc <atan+0x2f4>)
 8003c08:	4cb1      	ldr	r4, [pc, #708]	; (8003ed0 <atan+0x2f8>)
 8003c0a:	f1bb 0f00 	cmp.w	fp, #0
 8003c0e:	bfc8      	it	gt
 8003c10:	4619      	movgt	r1, r3
 8003c12:	e122      	b.n	8003e5a <atan+0x282>
 8003c14:	4baf      	ldr	r3, [pc, #700]	; (8003ed4 <atan+0x2fc>)
 8003c16:	429e      	cmp	r6, r3
 8003c18:	dc10      	bgt.n	8003c3c <atan+0x64>
 8003c1a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8003c1e:	429e      	cmp	r6, r3
 8003c20:	dc73      	bgt.n	8003d0a <atan+0x132>
 8003c22:	a38f      	add	r3, pc, #572	; (adr r3, 8003e60 <atan+0x288>)
 8003c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c28:	f7fc fab0 	bl	800018c <__adddf3>
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	4baa      	ldr	r3, [pc, #680]	; (8003ed8 <atan+0x300>)
 8003c30:	f7fc feee 	bl	8000a10 <__aeabi_dcmpgt>
 8003c34:	2800      	cmp	r0, #0
 8003c36:	f040 810f 	bne.w	8003e58 <atan+0x280>
 8003c3a:	e066      	b.n	8003d0a <atan+0x132>
 8003c3c:	f000 f95a 	bl	8003ef4 <fabs>
 8003c40:	4ba6      	ldr	r3, [pc, #664]	; (8003edc <atan+0x304>)
 8003c42:	4604      	mov	r4, r0
 8003c44:	429e      	cmp	r6, r3
 8003c46:	460d      	mov	r5, r1
 8003c48:	dc36      	bgt.n	8003cb8 <atan+0xe0>
 8003c4a:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8003c4e:	429e      	cmp	r6, r3
 8003c50:	dc1b      	bgt.n	8003c8a <atan+0xb2>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	f7fc fa99 	bl	800018c <__adddf3>
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	4b9e      	ldr	r3, [pc, #632]	; (8003ed8 <atan+0x300>)
 8003c5e:	f7fc fa93 	bl	8000188 <__aeabi_dsub>
 8003c62:	2200      	movs	r2, #0
 8003c64:	4606      	mov	r6, r0
 8003c66:	460f      	mov	r7, r1
 8003c68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	4629      	mov	r1, r5
 8003c70:	f7fc fa8c 	bl	800018c <__adddf3>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4630      	mov	r0, r6
 8003c7a:	4639      	mov	r1, r7
 8003c7c:	f7fc fd62 	bl	8000744 <__aeabi_ddiv>
 8003c80:	f04f 0a00 	mov.w	sl, #0
 8003c84:	4604      	mov	r4, r0
 8003c86:	460d      	mov	r5, r1
 8003c88:	e041      	b.n	8003d0e <atan+0x136>
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	4b92      	ldr	r3, [pc, #584]	; (8003ed8 <atan+0x300>)
 8003c8e:	f7fc fa7b 	bl	8000188 <__aeabi_dsub>
 8003c92:	2200      	movs	r2, #0
 8003c94:	4606      	mov	r6, r0
 8003c96:	460f      	mov	r7, r1
 8003c98:	4b8f      	ldr	r3, [pc, #572]	; (8003ed8 <atan+0x300>)
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	f7fc fa75 	bl	800018c <__adddf3>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4630      	mov	r0, r6
 8003ca8:	4639      	mov	r1, r7
 8003caa:	f7fc fd4b 	bl	8000744 <__aeabi_ddiv>
 8003cae:	f04f 0a01 	mov.w	sl, #1
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	460d      	mov	r5, r1
 8003cb6:	e02a      	b.n	8003d0e <atan+0x136>
 8003cb8:	4b89      	ldr	r3, [pc, #548]	; (8003ee0 <atan+0x308>)
 8003cba:	429e      	cmp	r6, r3
 8003cbc:	dc1a      	bgt.n	8003cf4 <atan+0x11c>
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	4b88      	ldr	r3, [pc, #544]	; (8003ee4 <atan+0x30c>)
 8003cc2:	f7fc fa61 	bl	8000188 <__aeabi_dsub>
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	4606      	mov	r6, r0
 8003cca:	460f      	mov	r7, r1
 8003ccc:	4b85      	ldr	r3, [pc, #532]	; (8003ee4 <atan+0x30c>)
 8003cce:	4620      	mov	r0, r4
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	f7fc fc0d 	bl	80004f0 <__aeabi_dmul>
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	4b7f      	ldr	r3, [pc, #508]	; (8003ed8 <atan+0x300>)
 8003cda:	f7fc fa57 	bl	800018c <__adddf3>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	4639      	mov	r1, r7
 8003ce6:	f7fc fd2d 	bl	8000744 <__aeabi_ddiv>
 8003cea:	f04f 0a02 	mov.w	sl, #2
 8003cee:	4604      	mov	r4, r0
 8003cf0:	460d      	mov	r5, r1
 8003cf2:	e00c      	b.n	8003d0e <atan+0x136>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	497b      	ldr	r1, [pc, #492]	; (8003ee8 <atan+0x310>)
 8003cfc:	f7fc fd22 	bl	8000744 <__aeabi_ddiv>
 8003d00:	f04f 0a03 	mov.w	sl, #3
 8003d04:	4604      	mov	r4, r0
 8003d06:	460d      	mov	r5, r1
 8003d08:	e001      	b.n	8003d0e <atan+0x136>
 8003d0a:	f04f 3aff 	mov.w	sl, #4294967295
 8003d0e:	4622      	mov	r2, r4
 8003d10:	462b      	mov	r3, r5
 8003d12:	4620      	mov	r0, r4
 8003d14:	4629      	mov	r1, r5
 8003d16:	f7fc fbeb 	bl	80004f0 <__aeabi_dmul>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4680      	mov	r8, r0
 8003d20:	4689      	mov	r9, r1
 8003d22:	f7fc fbe5 	bl	80004f0 <__aeabi_dmul>
 8003d26:	a350      	add	r3, pc, #320	; (adr r3, 8003e68 <atan+0x290>)
 8003d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2c:	4606      	mov	r6, r0
 8003d2e:	460f      	mov	r7, r1
 8003d30:	f7fc fbde 	bl	80004f0 <__aeabi_dmul>
 8003d34:	a34e      	add	r3, pc, #312	; (adr r3, 8003e70 <atan+0x298>)
 8003d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3a:	f7fc fa27 	bl	800018c <__adddf3>
 8003d3e:	4632      	mov	r2, r6
 8003d40:	463b      	mov	r3, r7
 8003d42:	f7fc fbd5 	bl	80004f0 <__aeabi_dmul>
 8003d46:	a34c      	add	r3, pc, #304	; (adr r3, 8003e78 <atan+0x2a0>)
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	f7fc fa1e 	bl	800018c <__adddf3>
 8003d50:	4632      	mov	r2, r6
 8003d52:	463b      	mov	r3, r7
 8003d54:	f7fc fbcc 	bl	80004f0 <__aeabi_dmul>
 8003d58:	a349      	add	r3, pc, #292	; (adr r3, 8003e80 <atan+0x2a8>)
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	f7fc fa15 	bl	800018c <__adddf3>
 8003d62:	4632      	mov	r2, r6
 8003d64:	463b      	mov	r3, r7
 8003d66:	f7fc fbc3 	bl	80004f0 <__aeabi_dmul>
 8003d6a:	a347      	add	r3, pc, #284	; (adr r3, 8003e88 <atan+0x2b0>)
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	f7fc fa0c 	bl	800018c <__adddf3>
 8003d74:	4632      	mov	r2, r6
 8003d76:	463b      	mov	r3, r7
 8003d78:	f7fc fbba 	bl	80004f0 <__aeabi_dmul>
 8003d7c:	a344      	add	r3, pc, #272	; (adr r3, 8003e90 <atan+0x2b8>)
 8003d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d82:	f7fc fa03 	bl	800018c <__adddf3>
 8003d86:	4642      	mov	r2, r8
 8003d88:	464b      	mov	r3, r9
 8003d8a:	f7fc fbb1 	bl	80004f0 <__aeabi_dmul>
 8003d8e:	a342      	add	r3, pc, #264	; (adr r3, 8003e98 <atan+0x2c0>)
 8003d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d94:	4680      	mov	r8, r0
 8003d96:	4689      	mov	r9, r1
 8003d98:	4630      	mov	r0, r6
 8003d9a:	4639      	mov	r1, r7
 8003d9c:	f7fc fba8 	bl	80004f0 <__aeabi_dmul>
 8003da0:	a33f      	add	r3, pc, #252	; (adr r3, 8003ea0 <atan+0x2c8>)
 8003da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da6:	f7fc f9ef 	bl	8000188 <__aeabi_dsub>
 8003daa:	4632      	mov	r2, r6
 8003dac:	463b      	mov	r3, r7
 8003dae:	f7fc fb9f 	bl	80004f0 <__aeabi_dmul>
 8003db2:	a33d      	add	r3, pc, #244	; (adr r3, 8003ea8 <atan+0x2d0>)
 8003db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db8:	f7fc f9e6 	bl	8000188 <__aeabi_dsub>
 8003dbc:	4632      	mov	r2, r6
 8003dbe:	463b      	mov	r3, r7
 8003dc0:	f7fc fb96 	bl	80004f0 <__aeabi_dmul>
 8003dc4:	a33a      	add	r3, pc, #232	; (adr r3, 8003eb0 <atan+0x2d8>)
 8003dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dca:	f7fc f9dd 	bl	8000188 <__aeabi_dsub>
 8003dce:	4632      	mov	r2, r6
 8003dd0:	463b      	mov	r3, r7
 8003dd2:	f7fc fb8d 	bl	80004f0 <__aeabi_dmul>
 8003dd6:	a338      	add	r3, pc, #224	; (adr r3, 8003eb8 <atan+0x2e0>)
 8003dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ddc:	f7fc f9d4 	bl	8000188 <__aeabi_dsub>
 8003de0:	4632      	mov	r2, r6
 8003de2:	463b      	mov	r3, r7
 8003de4:	f7fc fb84 	bl	80004f0 <__aeabi_dmul>
 8003de8:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	d10f      	bne.n	8003e12 <atan+0x23a>
 8003df2:	4640      	mov	r0, r8
 8003df4:	4649      	mov	r1, r9
 8003df6:	f7fc f9c9 	bl	800018c <__adddf3>
 8003dfa:	4622      	mov	r2, r4
 8003dfc:	462b      	mov	r3, r5
 8003dfe:	f7fc fb77 	bl	80004f0 <__aeabi_dmul>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4620      	mov	r0, r4
 8003e08:	4629      	mov	r1, r5
 8003e0a:	f7fc f9bd 	bl	8000188 <__aeabi_dsub>
 8003e0e:	4604      	mov	r4, r0
 8003e10:	e023      	b.n	8003e5a <atan+0x282>
 8003e12:	4640      	mov	r0, r8
 8003e14:	4649      	mov	r1, r9
 8003e16:	f7fc f9b9 	bl	800018c <__adddf3>
 8003e1a:	4622      	mov	r2, r4
 8003e1c:	462b      	mov	r3, r5
 8003e1e:	f7fc fb67 	bl	80004f0 <__aeabi_dmul>
 8003e22:	4e32      	ldr	r6, [pc, #200]	; (8003eec <atan+0x314>)
 8003e24:	4b32      	ldr	r3, [pc, #200]	; (8003ef0 <atan+0x318>)
 8003e26:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8003e2a:	4456      	add	r6, sl
 8003e2c:	449a      	add	sl, r3
 8003e2e:	e9da 2300 	ldrd	r2, r3, [sl]
 8003e32:	f7fc f9a9 	bl	8000188 <__aeabi_dsub>
 8003e36:	4622      	mov	r2, r4
 8003e38:	462b      	mov	r3, r5
 8003e3a:	f7fc f9a5 	bl	8000188 <__aeabi_dsub>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003e46:	f7fc f99f 	bl	8000188 <__aeabi_dsub>
 8003e4a:	f1bb 0f00 	cmp.w	fp, #0
 8003e4e:	4604      	mov	r4, r0
 8003e50:	da03      	bge.n	8003e5a <atan+0x282>
 8003e52:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003e56:	e000      	b.n	8003e5a <atan+0x282>
 8003e58:	4629      	mov	r1, r5
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e60:	8800759c 	.word	0x8800759c
 8003e64:	7e37e43c 	.word	0x7e37e43c
 8003e68:	e322da11 	.word	0xe322da11
 8003e6c:	3f90ad3a 	.word	0x3f90ad3a
 8003e70:	24760deb 	.word	0x24760deb
 8003e74:	3fa97b4b 	.word	0x3fa97b4b
 8003e78:	a0d03d51 	.word	0xa0d03d51
 8003e7c:	3fb10d66 	.word	0x3fb10d66
 8003e80:	c54c206e 	.word	0xc54c206e
 8003e84:	3fb745cd 	.word	0x3fb745cd
 8003e88:	920083ff 	.word	0x920083ff
 8003e8c:	3fc24924 	.word	0x3fc24924
 8003e90:	5555550d 	.word	0x5555550d
 8003e94:	3fd55555 	.word	0x3fd55555
 8003e98:	2c6a6c2f 	.word	0x2c6a6c2f
 8003e9c:	bfa2b444 	.word	0xbfa2b444
 8003ea0:	52defd9a 	.word	0x52defd9a
 8003ea4:	3fadde2d 	.word	0x3fadde2d
 8003ea8:	af749a6d 	.word	0xaf749a6d
 8003eac:	3fb3b0f2 	.word	0x3fb3b0f2
 8003eb0:	fe231671 	.word	0xfe231671
 8003eb4:	3fbc71c6 	.word	0x3fbc71c6
 8003eb8:	9998ebc4 	.word	0x9998ebc4
 8003ebc:	3fc99999 	.word	0x3fc99999
 8003ec0:	440fffff 	.word	0x440fffff
 8003ec4:	7ff00000 	.word	0x7ff00000
 8003ec8:	bff921fb 	.word	0xbff921fb
 8003ecc:	3ff921fb 	.word	0x3ff921fb
 8003ed0:	54442d18 	.word	0x54442d18
 8003ed4:	3fdbffff 	.word	0x3fdbffff
 8003ed8:	3ff00000 	.word	0x3ff00000
 8003edc:	3ff2ffff 	.word	0x3ff2ffff
 8003ee0:	40037fff 	.word	0x40037fff
 8003ee4:	3ff80000 	.word	0x3ff80000
 8003ee8:	bff00000 	.word	0xbff00000
 8003eec:	08003f38 	.word	0x08003f38
 8003ef0:	08003f18 	.word	0x08003f18

08003ef4 <fabs>:
 8003ef4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003ef8:	4770      	bx	lr
	...

08003efc <_init>:
 8003efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efe:	bf00      	nop
 8003f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f02:	bc08      	pop	{r3}
 8003f04:	469e      	mov	lr, r3
 8003f06:	4770      	bx	lr

08003f08 <_fini>:
 8003f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0a:	bf00      	nop
 8003f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0e:	bc08      	pop	{r3}
 8003f10:	469e      	mov	lr, r3
 8003f12:	4770      	bx	lr
