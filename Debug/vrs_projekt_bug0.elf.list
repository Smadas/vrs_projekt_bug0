
vrs_projekt_bug0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001acc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001c08  08001c08  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001c08  08001c08  00011c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001c0c  08001c0c  00011c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08001c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000094  20000020  08001c2c  00020020  2**3
                  ALLOC
  7 ._user_heap_stack 00000400  200000b4  08001c2c  000200b4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005dfb  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001053  00000000  00000000  00025e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000840  00000000  00000000  00026e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000778  00000000  00000000  000276d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000029de  00000000  00000000  00027e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000024ad  00000000  00000000  0002a82e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002ccdb  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002204  00000000  00000000  0002cd5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002ef60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000020 	.word	0x20000020
 8000158:	00000000 	.word	0x00000000
 800015c:	08001bf0 	.word	0x08001bf0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000024 	.word	0x20000024
 8000178:	08001bf0 	.word	0x08001bf0

0800017c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000184:	2300      	movs	r3, #0
 8000186:	73fb      	strb	r3, [r7, #15]
 8000188:	2300      	movs	r3, #0
 800018a:	73bb      	strb	r3, [r7, #14]
 800018c:	230f      	movs	r3, #15
 800018e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	78db      	ldrb	r3, [r3, #3]
 8000194:	2b00      	cmp	r3, #0
 8000196:	d038      	beq.n	800020a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000198:	4b26      	ldr	r3, [pc, #152]	; (8000234 <NVIC_Init+0xb8>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	43db      	mvns	r3, r3
 800019e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001a2:	0a1b      	lsrs	r3, r3, #8
 80001a4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001a6:	7bfb      	ldrb	r3, [r7, #15]
 80001a8:	f1c3 0304 	rsb	r3, r3, #4
 80001ac:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001ae:	7b7a      	ldrb	r2, [r7, #13]
 80001b0:	7bfb      	ldrb	r3, [r7, #15]
 80001b2:	fa42 f303 	asr.w	r3, r2, r3
 80001b6:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	785b      	ldrb	r3, [r3, #1]
 80001bc:	461a      	mov	r2, r3
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	fa02 f303 	lsl.w	r3, r2, r3
 80001c4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	789a      	ldrb	r2, [r3, #2]
 80001ca:	7b7b      	ldrb	r3, [r7, #13]
 80001cc:	4013      	ands	r3, r2
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	7bfb      	ldrb	r3, [r7, #15]
 80001d2:	4313      	orrs	r3, r2
 80001d4:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 80001d6:	7bfb      	ldrb	r3, [r7, #15]
 80001d8:	011b      	lsls	r3, r3, #4
 80001da:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001dc:	4a16      	ldr	r2, [pc, #88]	; (8000238 <NVIC_Init+0xbc>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	4413      	add	r3, r2
 80001e4:	7bfa      	ldrb	r2, [r7, #15]
 80001e6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001ea:	4a13      	ldr	r2, [pc, #76]	; (8000238 <NVIC_Init+0xbc>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	095b      	lsrs	r3, r3, #5
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	f003 031f 	and.w	r3, r3, #31
 80001fe:	2101      	movs	r1, #1
 8000200:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000204:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000208:	e00f      	b.n	800022a <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800020a:	490b      	ldr	r1, [pc, #44]	; (8000238 <NVIC_Init+0xbc>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	095b      	lsrs	r3, r3, #5
 8000212:	b2db      	uxtb	r3, r3
 8000214:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	f003 031f 	and.w	r3, r3, #31
 800021e:	2201      	movs	r2, #1
 8000220:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000222:	f100 0320 	add.w	r3, r0, #32
 8000226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800022a:	bf00      	nop
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	e000e100 	.word	0xe000e100

0800023c <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800023c:	b480      	push	{r7}
 800023e:	b087      	sub	sp, #28
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000246:	2300      	movs	r3, #0
 8000248:	617b      	str	r3, [r7, #20]
 800024a:	2300      	movs	r3, #0
 800024c:	613b      	str	r3, [r7, #16]
 800024e:	2300      	movs	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000252:	2300      	movs	r3, #0
 8000254:	617b      	str	r3, [r7, #20]
 8000256:	e07e      	b.n	8000356 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000258:	2201      	movs	r2, #1
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	fa02 f303 	lsl.w	r3, r2, r3
 8000260:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	4013      	ands	r3, r2
 800026a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800026c:	68fa      	ldr	r2, [r7, #12]
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	429a      	cmp	r2, r3
 8000272:	d16d      	bne.n	8000350 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	2103      	movs	r1, #3
 800027e:	fa01 f303 	lsl.w	r3, r1, r3
 8000282:	43db      	mvns	r3, r3
 8000284:	401a      	ands	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	4619      	mov	r1, r3
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	005b      	lsls	r3, r3, #1
 8000298:	fa01 f303 	lsl.w	r3, r1, r3
 800029c:	431a      	orrs	r2, r3
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	791b      	ldrb	r3, [r3, #4]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d003      	beq.n	80002b2 <GPIO_Init+0x76>
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	791b      	ldrb	r3, [r3, #4]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	d136      	bne.n	8000320 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	689a      	ldr	r2, [r3, #8]
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	2103      	movs	r1, #3
 80002bc:	fa01 f303 	lsl.w	r3, r1, r3
 80002c0:	43db      	mvns	r3, r3
 80002c2:	401a      	ands	r2, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	689a      	ldr	r2, [r3, #8]
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	795b      	ldrb	r3, [r3, #5]
 80002d0:	4619      	mov	r1, r3
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	fa01 f303 	lsl.w	r3, r1, r3
 80002da:	431a      	orrs	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	889b      	ldrh	r3, [r3, #4]
 80002e4:	b29a      	uxth	r2, r3
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	2101      	movs	r1, #1
 80002ec:	fa01 f303 	lsl.w	r3, r1, r3
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	43db      	mvns	r3, r3
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	4013      	ands	r3, r2
 80002f8:	b29a      	uxth	r2, r3
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	889b      	ldrh	r3, [r3, #4]
 8000302:	b29b      	uxth	r3, r3
 8000304:	b21a      	sxth	r2, r3
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	799b      	ldrb	r3, [r3, #6]
 800030a:	4619      	mov	r1, r3
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	b29b      	uxth	r3, r3
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	b21b      	sxth	r3, r3
 8000316:	4313      	orrs	r3, r2
 8000318:	b21b      	sxth	r3, r3
 800031a:	b29a      	uxth	r2, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	68da      	ldr	r2, [r3, #12]
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	b29b      	uxth	r3, r3
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	2103      	movs	r1, #3
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	401a      	ands	r2, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	68da      	ldr	r2, [r3, #12]
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	79db      	ldrb	r3, [r3, #7]
 8000340:	4619      	mov	r1, r3
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	431a      	orrs	r2, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	3301      	adds	r3, #1
 8000354:	617b      	str	r3, [r7, #20]
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	2b0f      	cmp	r3, #15
 800035a:	f67f af7d 	bls.w	8000258 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800035e:	bf00      	nop
 8000360:	371c      	adds	r7, #28
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: Specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	460b      	mov	r3, r1
 8000372:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000374:	2300      	movs	r3, #0
 8000376:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	8a9b      	ldrh	r3, [r3, #20]
 800037c:	b29a      	uxth	r2, r3
 800037e:	887b      	ldrh	r3, [r7, #2]
 8000380:	4013      	ands	r3, r2
 8000382:	b29b      	uxth	r3, r3
 8000384:	2b00      	cmp	r3, #0
 8000386:	d002      	beq.n	800038e <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000388:	2301      	movs	r3, #1
 800038a:	73fb      	strb	r3, [r7, #15]
 800038c:	e001      	b.n	8000392 <GPIO_ReadOutputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800038e:	2300      	movs	r3, #0
 8000390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000392:	7bfb      	ldrb	r3, [r7, #15]
}
 8000394:	4618      	mov	r0, r3
 8000396:	3714      	adds	r7, #20
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	460b      	mov	r3, r1
 80003aa:	807b      	strh	r3, [r7, #2]
 80003ac:	4613      	mov	r3, r2
 80003ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 80003b0:	787b      	ldrb	r3, [r7, #1]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d003      	beq.n	80003be <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	887a      	ldrh	r2, [r7, #2]
 80003ba:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 80003bc:	e002      	b.n	80003c4 <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	887a      	ldrh	r2, [r7, #2]
 80003c2:	835a      	strh	r2, [r3, #26]
  }
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..H) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	460b      	mov	r3, r1
 80003da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	8a9b      	ldrh	r3, [r3, #20]
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	887b      	ldrh	r3, [r7, #2]
 80003e4:	4053      	eors	r3, r2
 80003e6:	b29a      	uxth	r2, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	829a      	strh	r2, [r3, #20]
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop

080003f8 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	460b      	mov	r3, r1
 8000402:	807b      	strh	r3, [r7, #2]
 8000404:	4613      	mov	r3, r2
 8000406:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800040c:	2300      	movs	r3, #0
 800040e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000410:	787a      	ldrb	r2, [r7, #1]
 8000412:	887b      	ldrh	r3, [r7, #2]
 8000414:	f003 0307 	and.w	r3, r3, #7
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	fa02 f303 	lsl.w	r3, r2, r3
 800041e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000420:	887b      	ldrh	r3, [r7, #2]
 8000422:	08db      	lsrs	r3, r3, #3
 8000424:	b29b      	uxth	r3, r3
 8000426:	4618      	mov	r0, r3
 8000428:	887b      	ldrh	r3, [r7, #2]
 800042a:	08db      	lsrs	r3, r3, #3
 800042c:	b29b      	uxth	r3, r3
 800042e:	461a      	mov	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	3208      	adds	r2, #8
 8000434:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000438:	887b      	ldrh	r3, [r7, #2]
 800043a:	f003 0307 	and.w	r3, r3, #7
 800043e:	009b      	lsls	r3, r3, #2
 8000440:	210f      	movs	r1, #15
 8000442:	fa01 f303 	lsl.w	r3, r1, r3
 8000446:	43db      	mvns	r3, r3
 8000448:	ea02 0103 	and.w	r1, r2, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f100 0208 	add.w	r2, r0, #8
 8000452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000456:	887b      	ldrh	r3, [r7, #2]
 8000458:	08db      	lsrs	r3, r3, #3
 800045a:	b29b      	uxth	r3, r3
 800045c:	461a      	mov	r2, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	3208      	adds	r2, #8
 8000462:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	4313      	orrs	r3, r2
 800046a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800046c:	887b      	ldrh	r3, [r7, #2]
 800046e:	08db      	lsrs	r3, r3, #3
 8000470:	b29b      	uxth	r3, r3
 8000472:	461a      	mov	r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3208      	adds	r2, #8
 8000478:	68b9      	ldr	r1, [r7, #8]
 800047a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800047e:	bf00      	nop
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000488:	b480      	push	{r7}
 800048a:	b089      	sub	sp, #36	; 0x24
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	61fb      	str	r3, [r7, #28]
 8000494:	2300      	movs	r3, #0
 8000496:	61bb      	str	r3, [r7, #24]
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
 800049c:	2300      	movs	r3, #0
 800049e:	613b      	str	r3, [r7, #16]
 80004a0:	2300      	movs	r3, #0
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	2300      	movs	r3, #0
 80004a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004a8:	4b5f      	ldr	r3, [pc, #380]	; (8000628 <RCC_GetClocksFreq+0x1a0>)
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	f003 030c 	and.w	r3, r3, #12
 80004b0:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 80004b2:	69fb      	ldr	r3, [r7, #28]
 80004b4:	2b0c      	cmp	r3, #12
 80004b6:	d865      	bhi.n	8000584 <RCC_GetClocksFreq+0xfc>
 80004b8:	a201      	add	r2, pc, #4	; (adr r2, 80004c0 <RCC_GetClocksFreq+0x38>)
 80004ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004be:	bf00      	nop
 80004c0:	080004f5 	.word	0x080004f5
 80004c4:	08000585 	.word	0x08000585
 80004c8:	08000585 	.word	0x08000585
 80004cc:	08000585 	.word	0x08000585
 80004d0:	08000515 	.word	0x08000515
 80004d4:	08000585 	.word	0x08000585
 80004d8:	08000585 	.word	0x08000585
 80004dc:	08000585 	.word	0x08000585
 80004e0:	0800051d 	.word	0x0800051d
 80004e4:	08000585 	.word	0x08000585
 80004e8:	08000585 	.word	0x08000585
 80004ec:	08000585 	.word	0x08000585
 80004f0:	08000525 	.word	0x08000525
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 80004f4:	4b4c      	ldr	r3, [pc, #304]	; (8000628 <RCC_GetClocksFreq+0x1a0>)
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80004fc:	0b5b      	lsrs	r3, r3, #13
 80004fe:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	3301      	adds	r3, #1
 8000504:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000508:	fa02 f303 	lsl.w	r3, r2, r3
 800050c:	461a      	mov	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	601a      	str	r2, [r3, #0]
      break;
 8000512:	e047      	b.n	80005a4 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a45      	ldr	r2, [pc, #276]	; (800062c <RCC_GetClocksFreq+0x1a4>)
 8000518:	601a      	str	r2, [r3, #0]
      break;
 800051a:	e043      	b.n	80005a4 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a44      	ldr	r2, [pc, #272]	; (8000630 <RCC_GetClocksFreq+0x1a8>)
 8000520:	601a      	str	r2, [r3, #0]
      break;
 8000522:	e03f      	b.n	80005a4 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000524:	4b40      	ldr	r3, [pc, #256]	; (8000628 <RCC_GetClocksFreq+0x1a0>)
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800052c:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800052e:	4b3e      	ldr	r3, [pc, #248]	; (8000628 <RCC_GetClocksFreq+0x1a0>)
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000536:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8000538:	69bb      	ldr	r3, [r7, #24]
 800053a:	0c9b      	lsrs	r3, r3, #18
 800053c:	4a3d      	ldr	r2, [pc, #244]	; (8000634 <RCC_GetClocksFreq+0x1ac>)
 800053e:	5cd3      	ldrb	r3, [r2, r3]
 8000540:	b2db      	uxtb	r3, r3
 8000542:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	0d9b      	lsrs	r3, r3, #22
 8000548:	3301      	adds	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800054c:	4b36      	ldr	r3, [pc, #216]	; (8000628 <RCC_GetClocksFreq+0x1a0>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000554:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 8000556:	693b      	ldr	r3, [r7, #16]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d109      	bne.n	8000570 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 800055c:	69bb      	ldr	r3, [r7, #24]
 800055e:	4a33      	ldr	r2, [pc, #204]	; (800062c <RCC_GetClocksFreq+0x1a4>)
 8000560:	fb02 f203 	mul.w	r2, r2, r3
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	fbb2 f2f3 	udiv	r2, r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 800056e:	e019      	b.n	80005a4 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 8000570:	69bb      	ldr	r3, [r7, #24]
 8000572:	4a2f      	ldr	r2, [pc, #188]	; (8000630 <RCC_GetClocksFreq+0x1a8>)
 8000574:	fb02 f203 	mul.w	r2, r2, r3
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	fbb2 f2f3 	udiv	r2, r2, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	601a      	str	r2, [r3, #0]
      }
      break;
 8000582:	e00f      	b.n	80005a4 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <RCC_GetClocksFreq+0x1a0>)
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800058c:	0b5b      	lsrs	r3, r3, #13
 800058e:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	3301      	adds	r3, #1
 8000594:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	461a      	mov	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	601a      	str	r2, [r3, #0]
      break;
 80005a2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80005a4:	4b20      	ldr	r3, [pc, #128]	; (8000628 <RCC_GetClocksFreq+0x1a0>)
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005ac:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	091b      	lsrs	r3, r3, #4
 80005b2:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 80005b4:	4a20      	ldr	r2, [pc, #128]	; (8000638 <RCC_GetClocksFreq+0x1b0>)
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	4413      	add	r3, r2
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	40da      	lsrs	r2, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <RCC_GetClocksFreq+0x1a0>)
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80005d4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	0a1b      	lsrs	r3, r3, #8
 80005da:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80005dc:	4a16      	ldr	r2, [pc, #88]	; (8000638 <RCC_GetClocksFreq+0x1b0>)
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	4413      	add	r3, r2
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	685a      	ldr	r2, [r3, #4]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	40da      	lsrs	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <RCC_GetClocksFreq+0x1a0>)
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80005fc:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	0adb      	lsrs	r3, r3, #11
 8000602:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000604:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <RCC_GetClocksFreq+0x1b0>)
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	685a      	ldr	r2, [r3, #4]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	40da      	lsrs	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	60da      	str	r2, [r3, #12]
}
 800061c:	bf00      	nop
 800061e:	3724      	adds	r7, #36	; 0x24
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	00f42400 	.word	0x00f42400
 8000630:	007a1200 	.word	0x007a1200
 8000634:	20000000 	.word	0x20000000
 8000638:	2000000c 	.word	0x2000000c

0800063c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d006      	beq.n	800065c <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800064e:	4909      	ldr	r1, [pc, #36]	; (8000674 <RCC_AHBPeriphClockCmd+0x38>)
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <RCC_AHBPeriphClockCmd+0x38>)
 8000652:	69da      	ldr	r2, [r3, #28]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4313      	orrs	r3, r2
 8000658:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800065a:	e006      	b.n	800066a <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800065c:	4905      	ldr	r1, [pc, #20]	; (8000674 <RCC_AHBPeriphClockCmd+0x38>)
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <RCC_AHBPeriphClockCmd+0x38>)
 8000660:	69da      	ldr	r2, [r3, #28]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	43db      	mvns	r3, r3
 8000666:	4013      	ands	r3, r2
 8000668:	61cb      	str	r3, [r1, #28]
  }
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	40023800 	.word	0x40023800

08000678 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d006      	beq.n	8000698 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800068a:	4909      	ldr	r1, [pc, #36]	; (80006b0 <RCC_APB2PeriphClockCmd+0x38>)
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <RCC_APB2PeriphClockCmd+0x38>)
 800068e:	6a1a      	ldr	r2, [r3, #32]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4313      	orrs	r3, r2
 8000694:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000696:	e006      	b.n	80006a6 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000698:	4905      	ldr	r1, [pc, #20]	; (80006b0 <RCC_APB2PeriphClockCmd+0x38>)
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <RCC_APB2PeriphClockCmd+0x38>)
 800069c:	6a1a      	ldr	r2, [r3, #32]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	43db      	mvns	r3, r3
 80006a2:	4013      	ands	r3, r2
 80006a4:	620b      	str	r3, [r1, #32]
  }
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	40023800 	.word	0x40023800

080006b4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d006      	beq.n	80006d4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80006c6:	4909      	ldr	r1, [pc, #36]	; (80006ec <RCC_APB1PeriphClockCmd+0x38>)
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <RCC_APB1PeriphClockCmd+0x38>)
 80006ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80006d2:	e006      	b.n	80006e2 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80006d4:	4905      	ldr	r1, [pc, #20]	; (80006ec <RCC_APB1PeriphClockCmd+0x38>)
 80006d6:	4b05      	ldr	r3, [pc, #20]	; (80006ec <RCC_APB1PeriphClockCmd+0x38>)
 80006d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	43db      	mvns	r3, r3
 80006de:	4013      	ands	r3, r2
 80006e0:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	40023800 	.word	0x40023800

080006f0 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800070a:	d00b      	beq.n	8000724 <TIM_TimeBaseInit+0x34>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a1c      	ldr	r2, [pc, #112]	; (8000780 <TIM_TimeBaseInit+0x90>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d007      	beq.n	8000724 <TIM_TimeBaseInit+0x34>
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <TIM_TimeBaseInit+0x94>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d003      	beq.n	8000724 <TIM_TimeBaseInit+0x34>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a1a      	ldr	r2, [pc, #104]	; (8000788 <TIM_TimeBaseInit+0x98>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d108      	bne.n	8000736 <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000724:	89fb      	ldrh	r3, [r7, #14]
 8000726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800072a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	885a      	ldrh	r2, [r3, #2]
 8000730:	89fb      	ldrh	r3, [r7, #14]
 8000732:	4313      	orrs	r3, r2
 8000734:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a14      	ldr	r2, [pc, #80]	; (800078c <TIM_TimeBaseInit+0x9c>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d00c      	beq.n	8000758 <TIM_TimeBaseInit+0x68>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a13      	ldr	r2, [pc, #76]	; (8000790 <TIM_TimeBaseInit+0xa0>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d008      	beq.n	8000758 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000746:	89fb      	ldrh	r3, [r7, #14]
 8000748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800074c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	891a      	ldrh	r2, [r3, #8]
 8000752:	89fb      	ldrh	r3, [r7, #14]
 8000754:	4313      	orrs	r3, r2
 8000756:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	89fa      	ldrh	r2, [r7, #14]
 800075c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	881a      	ldrh	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2201      	movs	r2, #1
 8000772:	829a      	strh	r2, [r3, #20]
}
 8000774:	bf00      	nop
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40000400 	.word	0x40000400
 8000784:	40000800 	.word	0x40000800
 8000788:	40000c00 	.word	0x40000c00
 800078c:	40001000 	.word	0x40001000
 8000790:	40001400 	.word	0x40001400

08000794 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d008      	beq.n	80007b8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 80007b6:	e007      	b.n	80007c8 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	f023 0301 	bic.w	r3, r3, #1
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	801a      	strh	r2, [r3, #0]
  }
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop

080007d4 <TIM_ICInit>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d10f      	bne.n	8000806 <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	8859      	ldrh	r1, [r3, #2]
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	889a      	ldrh	r2, [r3, #4]
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	891b      	ldrh	r3, [r3, #8]
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f000 f938 	bl	8000a68 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	88db      	ldrh	r3, [r3, #6]
 80007fc:	4619      	mov	r1, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f860 	bl	80008c4 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000804:	e036      	b.n	8000874 <TIM_ICInit+0xa0>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	2b04      	cmp	r3, #4
 800080c:	d10f      	bne.n	800082e <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	8859      	ldrh	r1, [r3, #2]
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	889a      	ldrh	r2, [r3, #4]
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	891b      	ldrh	r3, [r3, #8]
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f000 f966 	bl	8000aec <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	88db      	ldrh	r3, [r3, #6]
 8000824:	4619      	mov	r1, r3
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f000 f868 	bl	80008fc <TIM_SetIC2Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800082c:	e022      	b.n	8000874 <TIM_ICInit+0xa0>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	2b08      	cmp	r3, #8
 8000834:	d10f      	bne.n	8000856 <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	8859      	ldrh	r1, [r3, #2]
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	889a      	ldrh	r2, [r3, #4]
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	891b      	ldrh	r3, [r3, #8]
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f000 f99e 	bl	8000b84 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	88db      	ldrh	r3, [r3, #6]
 800084c:	4619      	mov	r1, r3
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f000 f872 	bl	8000938 <TIM_SetIC3Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000854:	e00e      	b.n	8000874 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	8859      	ldrh	r1, [r3, #2]
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	889a      	ldrh	r2, [r3, #4]
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	891b      	ldrh	r3, [r3, #8]
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f000 f9d6 	bl	8000c14 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	88db      	ldrh	r3, [r3, #6]
 800086c:	4619      	mov	r1, r3
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f000 f87e 	bl	8000970 <TIM_SetIC4Prescaler>
  }
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 2, 3, 4, 5, 9, 10 or 11 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8000888:	4618      	mov	r0, r3
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 2, 3, 4 or 5 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 2, 3, 4 or 5 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop

080008c4 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	8b1b      	ldrh	r3, [r3, #24]
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	f023 030c 	bic.w	r3, r3, #12
 80008da:	b29a      	uxth	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	8b1b      	ldrh	r3, [r3, #24]
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	887b      	ldrh	r3, [r7, #2]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	831a      	strh	r2, [r3, #24]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	460b      	mov	r3, r1
 8000906:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	8b1b      	ldrh	r3, [r3, #24]
 800090c:	b29b      	uxth	r3, r3
 800090e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000912:	b29a      	uxth	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	8b1b      	ldrh	r3, [r3, #24]
 800091c:	b29a      	uxth	r2, r3
 800091e:	887b      	ldrh	r3, [r7, #2]
 8000920:	021b      	lsls	r3, r3, #8
 8000922:	b29b      	uxth	r3, r3
 8000924:	4313      	orrs	r3, r2
 8000926:	b29a      	uxth	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	831a      	strh	r2, [r3, #24]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	8b9b      	ldrh	r3, [r3, #28]
 8000948:	b29b      	uxth	r3, r3
 800094a:	f023 030c 	bic.w	r3, r3, #12
 800094e:	b29a      	uxth	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	8b9b      	ldrh	r3, [r3, #28]
 8000958:	b29a      	uxth	r2, r3
 800095a:	887b      	ldrh	r3, [r7, #2]
 800095c:	4313      	orrs	r3, r2
 800095e:	b29a      	uxth	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	839a      	strh	r2, [r3, #28]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	8b9b      	ldrh	r3, [r3, #28]
 8000980:	b29b      	uxth	r3, r3
 8000982:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000986:	b29a      	uxth	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	8b9b      	ldrh	r3, [r3, #28]
 8000990:	b29a      	uxth	r2, r3
 8000992:	887b      	ldrh	r3, [r7, #2]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	b29b      	uxth	r3, r3
 8000998:	4313      	orrs	r3, r2
 800099a:	b29a      	uxth	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	839a      	strh	r2, [r3, #28]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	807b      	strh	r3, [r7, #2]
 80009b8:	4613      	mov	r3, r2
 80009ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009bc:	787b      	ldrb	r3, [r7, #1]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d008      	beq.n	80009d4 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	899b      	ldrh	r3, [r3, #12]
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	887b      	ldrh	r3, [r7, #2]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80009d2:	e009      	b.n	80009e8 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	899b      	ldrh	r3, [r3, #12]
 80009d8:	b29a      	uxth	r2, r3
 80009da:	887b      	ldrh	r3, [r7, #2]
 80009dc:	43db      	mvns	r3, r3
 80009de:	b29b      	uxth	r3, r3
 80009e0:	4013      	ands	r3, r2
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	819a      	strh	r2, [r3, #12]
  }
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000a00:	2300      	movs	r3, #0
 8000a02:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	81bb      	strh	r3, [r7, #12]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	8a1b      	ldrh	r3, [r3, #16]
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	887b      	ldrh	r3, [r7, #2]
 8000a14:	4013      	ands	r3, r2
 8000a16:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	899b      	ldrh	r3, [r3, #12]
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	887b      	ldrh	r3, [r7, #2]
 8000a20:	4013      	ands	r3, r2
 8000a22:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000a24:	89bb      	ldrh	r3, [r7, #12]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d005      	beq.n	8000a36 <TIM_GetITStatus+0x42>
 8000a2a:	897b      	ldrh	r3, [r7, #10]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d002      	beq.n	8000a36 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000a30:	2301      	movs	r3, #1
 8000a32:	73fb      	strb	r3, [r7, #15]
 8000a34:	e001      	b.n	8000a3a <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	460b      	mov	r3, r1
 8000a52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000a54:	887b      	ldrh	r3, [r7, #2]
 8000a56:	43db      	mvns	r3, r3
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	821a      	strh	r2, [r3, #16]
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b087      	sub	sp, #28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	4608      	mov	r0, r1
 8000a72:	4611      	mov	r1, r2
 8000a74:	461a      	mov	r2, r3
 8000a76:	4603      	mov	r3, r0
 8000a78:	817b      	strh	r3, [r7, #10]
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	813b      	strh	r3, [r7, #8]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	82fb      	strh	r3, [r7, #22]
 8000a86:	2300      	movs	r3, #0
 8000a88:	82bb      	strh	r3, [r7, #20]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	8c1b      	ldrh	r3, [r3, #32]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	f023 0301 	bic.w	r3, r3, #1
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	8b1b      	ldrh	r3, [r3, #24]
 8000a9e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	8c1b      	ldrh	r3, [r3, #32]
 8000aa4:	82bb      	strh	r3, [r7, #20]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8000aa6:	8afb      	ldrh	r3, [r7, #22]
 8000aa8:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8000aac:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	011b      	lsls	r3, r3, #4
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	893b      	ldrh	r3, [r7, #8]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	8afb      	ldrh	r3, [r7, #22]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8000ac0:	8abb      	ldrh	r3, [r7, #20]
 8000ac2:	f023 030a 	bic.w	r3, r3, #10
 8000ac6:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8000ac8:	897a      	ldrh	r2, [r7, #10]
 8000aca:	8abb      	ldrh	r3, [r7, #20]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	8afa      	ldrh	r2, [r7, #22]
 8000ada:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	8aba      	ldrh	r2, [r7, #20]
 8000ae0:	841a      	strh	r2, [r3, #32]
}
 8000ae2:	bf00      	nop
 8000ae4:	371c      	adds	r7, #28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b087      	sub	sp, #28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	4608      	mov	r0, r1
 8000af6:	4611      	mov	r1, r2
 8000af8:	461a      	mov	r2, r3
 8000afa:	4603      	mov	r3, r0
 8000afc:	817b      	strh	r3, [r7, #10]
 8000afe:	460b      	mov	r3, r1
 8000b00:	813b      	strh	r3, [r7, #8]
 8000b02:	4613      	mov	r3, r2
 8000b04:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	82fb      	strh	r3, [r7, #22]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	82bb      	strh	r3, [r7, #20]
 8000b0e:	2300      	movs	r3, #0
 8000b10:	827b      	strh	r3, [r7, #18]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	8c1b      	ldrh	r3, [r3, #32]
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	f023 0310 	bic.w	r3, r3, #16
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	8b1b      	ldrh	r3, [r3, #24]
 8000b26:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	8c1b      	ldrh	r3, [r3, #32]
 8000b2c:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8000b2e:	897b      	ldrh	r3, [r7, #10]
 8000b30:	011b      	lsls	r3, r3, #4
 8000b32:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8000b34:	8afb      	ldrh	r3, [r7, #22]
 8000b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b3a:	051b      	lsls	r3, r3, #20
 8000b3c:	0d1b      	lsrs	r3, r3, #20
 8000b3e:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	031b      	lsls	r3, r3, #12
 8000b44:	b29a      	uxth	r2, r3
 8000b46:	8afb      	ldrh	r3, [r7, #22]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8000b4c:	893b      	ldrh	r3, [r7, #8]
 8000b4e:	021b      	lsls	r3, r3, #8
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	8afb      	ldrh	r3, [r7, #22]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8000b58:	8abb      	ldrh	r3, [r7, #20]
 8000b5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000b5e:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8000b60:	8a7a      	ldrh	r2, [r7, #18]
 8000b62:	8abb      	ldrh	r3, [r7, #20]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	f043 0310 	orr.w	r3, r3, #16
 8000b6c:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	8afa      	ldrh	r2, [r7, #22]
 8000b72:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	8aba      	ldrh	r2, [r7, #20]
 8000b78:	841a      	strh	r2, [r3, #32]
}
 8000b7a:	bf00      	nop
 8000b7c:	371c      	adds	r7, #28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b087      	sub	sp, #28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	4608      	mov	r0, r1
 8000b8e:	4611      	mov	r1, r2
 8000b90:	461a      	mov	r2, r3
 8000b92:	4603      	mov	r3, r0
 8000b94:	817b      	strh	r3, [r7, #10]
 8000b96:	460b      	mov	r3, r1
 8000b98:	813b      	strh	r3, [r7, #8]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	82fb      	strh	r3, [r7, #22]
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	82bb      	strh	r3, [r7, #20]
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	827b      	strh	r3, [r7, #18]
  
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	8c1b      	ldrh	r3, [r3, #32]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	8b9b      	ldrh	r3, [r3, #28]
 8000bbe:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	8c1b      	ldrh	r3, [r3, #32]
 8000bc4:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8000bc6:	897b      	ldrh	r3, [r7, #10]
 8000bc8:	021b      	lsls	r3, r3, #8
 8000bca:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8000bcc:	8afb      	ldrh	r3, [r7, #22]
 8000bce:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8000bd2:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	011b      	lsls	r3, r3, #4
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	893b      	ldrh	r3, [r7, #8]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	8afb      	ldrh	r3, [r7, #22]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8000be6:	8abb      	ldrh	r3, [r7, #20]
 8000be8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8000bec:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8000bee:	8a7a      	ldrh	r2, [r7, #18]
 8000bf0:	8abb      	ldrh	r3, [r7, #20]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bfa:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	8afa      	ldrh	r2, [r7, #22]
 8000c00:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	8aba      	ldrh	r2, [r7, #20]
 8000c06:	841a      	strh	r2, [r3, #32]
}
 8000c08:	bf00      	nop
 8000c0a:	371c      	adds	r7, #28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop

08000c14 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b087      	sub	sp, #28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	4608      	mov	r0, r1
 8000c1e:	4611      	mov	r1, r2
 8000c20:	461a      	mov	r2, r3
 8000c22:	4603      	mov	r3, r0
 8000c24:	817b      	strh	r3, [r7, #10]
 8000c26:	460b      	mov	r3, r1
 8000c28:	813b      	strh	r3, [r7, #8]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	82fb      	strh	r3, [r7, #22]
 8000c32:	2300      	movs	r3, #0
 8000c34:	82bb      	strh	r3, [r7, #20]
 8000c36:	2300      	movs	r3, #0
 8000c38:	827b      	strh	r3, [r7, #18]
  
  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	8c1b      	ldrh	r3, [r3, #32]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	8b9b      	ldrh	r3, [r3, #28]
 8000c4e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	8c1b      	ldrh	r3, [r3, #32]
 8000c54:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8000c56:	897b      	ldrh	r3, [r7, #10]
 8000c58:	031b      	lsls	r3, r3, #12
 8000c5a:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8000c5c:	8afb      	ldrh	r3, [r7, #22]
 8000c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c62:	051b      	lsls	r3, r3, #20
 8000c64:	0d1b      	lsrs	r3, r3, #20
 8000c66:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8000c68:	893b      	ldrh	r3, [r7, #8]
 8000c6a:	021b      	lsls	r3, r3, #8
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	8afb      	ldrh	r3, [r7, #22]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	031b      	lsls	r3, r3, #12
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	8afb      	ldrh	r3, [r7, #22]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8000c80:	8abb      	ldrh	r3, [r7, #20]
 8000c82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c86:	045b      	lsls	r3, r3, #17
 8000c88:	0c5b      	lsrs	r3, r3, #17
 8000c8a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8000c8c:	8a7a      	ldrh	r2, [r7, #18]
 8000c8e:	8abb      	ldrh	r3, [r7, #20]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c98:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	8afa      	ldrh	r2, [r7, #22]
 8000c9e:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	8aba      	ldrh	r2, [r7, #20]
 8000ca4:	841a      	strh	r2, [r3, #32]
}
 8000ca6:	bf00      	nop
 8000ca8:	371c      	adds	r7, #28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that 
  *        contains the configuration information for the specified USART peripheral.
  * @retval None.
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }
   
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	8a1b      	ldrh	r3, [r3, #16]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	88db      	ldrh	r3, [r3, #6]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	899b      	ldrh	r3, [r3, #12]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000cfc:	f023 030c 	bic.w	r3, r3, #12
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	889a      	ldrh	r2, [r3, #4]
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	891b      	ldrh	r3, [r3, #8]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	461a      	mov	r2, r3
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	8a9b      	ldrh	r3, [r3, #20]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	899b      	ldrh	r3, [r3, #12]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fb9a 	bl	8000488 <RCC_GetClocksFreq>
  if (USARTx == USART1) 
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a2e      	ldr	r2, [pc, #184]	; (8000e10 <USART_Init+0x160>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d102      	bne.n	8000d62 <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	623b      	str	r3, [r7, #32]
 8000d60:	e001      	b.n	8000d66 <USART_Init+0xb6>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	623b      	str	r3, [r7, #32]
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	899b      	ldrh	r3, [r3, #12]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	b21b      	sxth	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	da0c      	bge.n	8000d8c <USART_Init+0xdc>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000d72:	6a3a      	ldr	r2, [r7, #32]
 8000d74:	4613      	mov	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	009a      	lsls	r2, r3, #2
 8000d7c:	441a      	add	r2, r3
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d88:	61fb      	str	r3, [r7, #28]
 8000d8a:	e00b      	b.n	8000da4 <USART_Init+0xf4>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000d8c:	6a3a      	ldr	r2, [r7, #32]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4413      	add	r3, r2
 8000d94:	009a      	lsls	r2, r3, #2
 8000d96:	441a      	add	r2, r3
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da2:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <USART_Init+0x164>)
 8000da8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dac:	095b      	lsrs	r3, r3, #5
 8000dae:	011b      	lsls	r3, r3, #4
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db4:	091b      	lsrs	r3, r3, #4
 8000db6:	2264      	movs	r2, #100	; 0x64
 8000db8:	fb02 f303 	mul.w	r3, r2, r3
 8000dbc:	69fa      	ldr	r2, [r7, #28]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	899b      	ldrh	r3, [r3, #12]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	da0c      	bge.n	8000de8 <USART_Init+0x138>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	3332      	adds	r3, #50	; 0x32
 8000dd4:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <USART_Init+0x164>)
 8000dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	f003 0307 	and.w	r3, r3, #7
 8000de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de2:	4313      	orrs	r3, r2
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
 8000de6:	e00b      	b.n	8000e00 <USART_Init+0x150>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	3332      	adds	r3, #50	; 0x32
 8000dee:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <USART_Init+0x164>)
 8000df0:	fba2 2303 	umull	r2, r3, r2, r3
 8000df4:	095b      	lsrs	r3, r3, #5
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  }
 
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	811a      	strh	r2, [r3, #8]
}
 8000e08:	bf00      	nop
 8000e0a:	3728      	adds	r7, #40	; 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40013800 	.word	0x40013800
 8000e14:	51eb851f 	.word	0x51eb851f

08000e18 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d008      	beq.n	8000e3c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	899b      	ldrh	r3, [r3, #12]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000e3a:	e007      	b.n	8000e4c <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	899b      	ldrh	r3, [r3, #12]
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	819a      	strh	r2, [r3, #12]
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None.
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000e64:	887b      	ldrh	r3, [r7, #2]
 8000e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	809a      	strh	r2, [r3, #4]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	889b      	ldrh	r3, [r3, #4]
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e8e:	b29b      	uxth	r3, r3
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000ec0:	887b      	ldrh	r3, [r7, #2]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	095b      	lsrs	r3, r3, #5
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000eca:	887b      	ldrh	r3, [r7, #2]
 8000ecc:	f003 031f 	and.w	r3, r3, #31
 8000ed0:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d103      	bne.n	8000eea <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	330c      	adds	r3, #12
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e009      	b.n	8000efe <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d103      	bne.n	8000ef8 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3310      	adds	r3, #16
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	e002      	b.n	8000efe <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	3314      	adds	r3, #20
 8000efc:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000efe:	787b      	ldrb	r3, [r7, #1]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d006      	beq.n	8000f12 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	6811      	ldr	r1, [r2, #0]
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000f10:	e006      	b.n	8000f20 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	6811      	ldr	r1, [r2, #0]
 8000f18:	68ba      	ldr	r2, [r7, #8]
 8000f1a:	43d2      	mvns	r2, r2
 8000f1c:	400a      	ands	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]
  }
}
 8000f20:	bf00      	nop
 8000f22:	371c      	adds	r7, #28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000f44:	2300      	movs	r3, #0
 8000f46:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000f48:	887b      	ldrh	r3, [r7, #2]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	095b      	lsrs	r3, r3, #5
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000f52:	887b      	ldrh	r3, [r7, #2]
 8000f54:	f003 031f 	and.w	r3, r3, #31
 8000f58:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d107      	bne.n	8000f7a <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	899b      	ldrh	r3, [r3, #12]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	461a      	mov	r2, r3
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	4013      	ands	r3, r2
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	e011      	b.n	8000f9e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d107      	bne.n	8000f90 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	8a1b      	ldrh	r3, [r3, #16]
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	461a      	mov	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	e006      	b.n	8000f9e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	8a9b      	ldrh	r3, [r3, #20]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	461a      	mov	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000f9e:	887b      	ldrh	r3, [r7, #2]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d005      	beq.n	8000fd0 <USART_GetITStatus+0xa4>
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d002      	beq.n	8000fd0 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	74fb      	strb	r3, [r7, #19]
 8000fce:	e001      	b.n	8000fd4 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000fd4:	7cfb      	ldrb	r3, [r7, #19]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	371c      	adds	r7, #28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <USART_ClearITPendingBit>:
  * @note TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000fec:	2300      	movs	r3, #0
 8000fee:	81fb      	strh	r3, [r7, #14]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000ff4:	887b      	ldrh	r3, [r7, #2]
 8000ff6:	0a1b      	lsrs	r3, r3, #8
 8000ff8:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000ffa:	89fb      	ldrh	r3, [r7, #14]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8001004:	89bb      	ldrh	r3, [r7, #12]
 8001006:	43db      	mvns	r3, r3
 8001008:	b29a      	uxth	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	801a      	strh	r2, [r3, #0]
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <initUSART3>:
 */


#include <bluetooth.h>

void initUSART3(){
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0

	running = 0;
 800101e:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <initUSART3+0xbc>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
	change_goal_request = 0;
 8001024:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <initUSART3+0xc0>)
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
	goal_bearing = 0;
 800102a:	4b2c      	ldr	r3, [pc, #176]	; (80010dc <initUSART3+0xc4>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8001030:	2101      	movs	r1, #1
 8001032:	2004      	movs	r0, #4
 8001034:	f7ff fb02 	bl	800063c <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8001038:	2101      	movs	r1, #1
 800103a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800103e:	f7ff fb39 	bl	80006b4 <RCC_APB1PeriphClockCmd>


	GPIO_InitTypeDef GPIO_usrt;

	GPIO_usrt.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 8001042:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001046:	61bb      	str	r3, [r7, #24]
	GPIO_usrt.GPIO_Mode = GPIO_Mode_AF;
 8001048:	2302      	movs	r3, #2
 800104a:	773b      	strb	r3, [r7, #28]
	GPIO_usrt.GPIO_OType = GPIO_OType_PP;
 800104c:	2300      	movs	r3, #0
 800104e:	77bb      	strb	r3, [r7, #30]
	GPIO_usrt.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	77fb      	strb	r3, [r7, #31]
	GPIO_usrt.GPIO_Speed = GPIO_Speed_40MHz;
 8001054:	2303      	movs	r3, #3
 8001056:	777b      	strb	r3, [r7, #29]

	GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_USART3);
 8001058:	2207      	movs	r2, #7
 800105a:	210a      	movs	r1, #10
 800105c:	4820      	ldr	r0, [pc, #128]	; (80010e0 <initUSART3+0xc8>)
 800105e:	f7ff f9cb 	bl	80003f8 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_USART3);
 8001062:	2207      	movs	r2, #7
 8001064:	210b      	movs	r1, #11
 8001066:	481e      	ldr	r0, [pc, #120]	; (80010e0 <initUSART3+0xc8>)
 8001068:	f7ff f9c6 	bl	80003f8 <GPIO_PinAFConfig>

	GPIO_Init(GPIOC, &GPIO_usrt);
 800106c:	f107 0318 	add.w	r3, r7, #24
 8001070:	4619      	mov	r1, r3
 8001072:	481b      	ldr	r0, [pc, #108]	; (80010e0 <initUSART3+0xc8>)
 8001074:	f7ff f8e2 	bl	800023c <GPIO_Init>

//	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
	//GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);

	USART_InitTypeDef USART_InitStructure;
	USART_InitStructure.USART_BaudRate = 19200;
 8001078:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 800107c:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800107e:	2300      	movs	r3, #0
 8001080:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001082:	2300      	movs	r3, #0
 8001084:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8001086:	2300      	movs	r3, #0
 8001088:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800108a:	2300      	movs	r3, #0
 800108c:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800108e:	230c      	movs	r3, #12
 8001090:	827b      	strh	r3, [r7, #18]
	USART_Init(USART3, &USART_InitStructure);
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	4619      	mov	r1, r3
 8001098:	4812      	ldr	r0, [pc, #72]	; (80010e4 <initUSART3+0xcc>)
 800109a:	f7ff fe09 	bl	8000cb0 <USART_Init>
	USART_Cmd(USART3, ENABLE);
 800109e:	2101      	movs	r1, #1
 80010a0:	4810      	ldr	r0, [pc, #64]	; (80010e4 <initUSART3+0xcc>)
 80010a2:	f7ff feb9 	bl	8000e18 <USART_Cmd>

	//interrupt
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 80010a6:	2201      	movs	r2, #1
 80010a8:	f240 5125 	movw	r1, #1317	; 0x525
 80010ac:	480d      	ldr	r0, [pc, #52]	; (80010e4 <initUSART3+0xcc>)
 80010ae:	f7ff fef5 	bl	8000e9c <USART_ITConfig>

	//NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);

	  /* Enable the USARTx Interrupt */
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 80010b2:	2327      	movs	r3, #39	; 0x27
 80010b4:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
 80010b6:	2303      	movs	r3, #3
 80010b8:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 80010ba:	2303      	movs	r3, #3
 80010bc:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80010be:	2301      	movs	r3, #1
 80010c0:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff f859 	bl	800017c <NVIC_Init>

	//USART_Cmd(USART1, ENABLE);
}
 80010ca:	bf00      	nop
 80010cc:	3720      	adds	r7, #32
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000044 	.word	0x20000044
 80010d8:	20000048 	.word	0x20000048
 80010dc:	20000040 	.word	0x20000040
 80010e0:	40020800 	.word	0x40020800
 80010e4:	40004800 	.word	0x40004800

080010e8 <PutcUART3>:

void PutcUART3(char ch){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	USART_SendData(USART3, (uint8_t) ch);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	4619      	mov	r1, r3
 80010f8:	4803      	ldr	r0, [pc, #12]	; (8001108 <PutcUART3+0x20>)
 80010fa:	f7ff fead 	bl	8000e58 <USART_SendData>

}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40004800 	.word	0x40004800

0800110c <USART3_IRQHandler>:

void USART3_IRQHandler(void){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0

	if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)
 8001112:	f240 5125 	movw	r1, #1317	; 0x525
 8001116:	481e      	ldr	r0, [pc, #120]	; (8001190 <USART3_IRQHandler+0x84>)
 8001118:	f7ff ff08 	bl	8000f2c <USART_GetITStatus>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d032      	beq.n	8001188 <USART3_IRQHandler+0x7c>
	{
		USART_ClearITPendingBit(USART3, USART_IT_RXNE);
 8001122:	f240 5125 	movw	r1, #1317	; 0x525
 8001126:	481a      	ldr	r0, [pc, #104]	; (8001190 <USART3_IRQHandler+0x84>)
 8001128:	f7ff ff5a 	bl	8000fe0 <USART_ClearITPendingBit>
		char znak = USART_ReceiveData(USART3);
 800112c:	4818      	ldr	r0, [pc, #96]	; (8001190 <USART3_IRQHandler+0x84>)
 800112e:	f7ff fea5 	bl	8000e7c <USART_ReceiveData>
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]

		//ak v predoslom byte bola poziadavka na zmenu ziadaneho uhla,
		//tak ciel zmeni ak dalsi byte je v zadanom rozsahu
		if (change_goal_request){
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <USART3_IRQHandler+0x88>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00b      	beq.n	8001156 <USART3_IRQHandler+0x4a>

			if (znak >= '0' && znak <= '7')
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b2f      	cmp	r3, #47	; 0x2f
 8001142:	d905      	bls.n	8001150 <USART3_IRQHandler+0x44>
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	2b37      	cmp	r3, #55	; 0x37
 8001148:	d802      	bhi.n	8001150 <USART3_IRQHandler+0x44>
			goal_bearing = znak;
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	4a12      	ldr	r2, [pc, #72]	; (8001198 <USART3_IRQHandler+0x8c>)
 800114e:	6013      	str	r3, [r2, #0]

			change_goal_request = 0;
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <USART3_IRQHandler+0x88>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
		}

		switch (znak){
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	2b63      	cmp	r3, #99	; 0x63
 800115a:	d00d      	beq.n	8001178 <USART3_IRQHandler+0x6c>
 800115c:	2b78      	cmp	r3, #120	; 0x78
 800115e:	d10f      	bne.n	8001180 <USART3_IRQHandler+0x74>
		case 'x':   // vypinanie/zapinanie pohybu
			if (running)
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <USART3_IRQHandler+0x90>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <USART3_IRQHandler+0x64>
					running = 0;
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <USART3_IRQHandler+0x90>)
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
				else running = 1;
			break;
 800116e:	e00b      	b.n	8001188 <USART3_IRQHandler+0x7c>

		switch (znak){
		case 'x':   // vypinanie/zapinanie pohybu
			if (running)
					running = 0;
				else running = 1;
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <USART3_IRQHandler+0x90>)
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]
			break;
 8001176:	e007      	b.n	8001188 <USART3_IRQHandler+0x7c>
		case 'c': //poziadavka na zmenu ciela, v dalsom byte sa precita, aky bude novy ciel
			change_goal_request = 1;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <USART3_IRQHandler+0x88>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]
			break;
 800117e:	e003      	b.n	8001188 <USART3_IRQHandler+0x7c>
		default:
			change_goal_request = 0;
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <USART3_IRQHandler+0x88>)
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
		if (retazec[counter] != '\0'){
			PutcUART2(retazec[counter]);
			counter++;
		}*/
    }
}
 8001186:	e7ff      	b.n	8001188 <USART3_IRQHandler+0x7c>
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40004800 	.word	0x40004800
 8001194:	20000048 	.word	0x20000048
 8001198:	20000040 	.word	0x20000040
 800119c:	20000044 	.word	0x20000044

080011a0 <sendValue>:

void sendValue(){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
	//PutcUART3('m');

	if (running)
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <sendValue+0x40>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d006      	beq.n	80011bc <sendValue+0x1c>
		PutcUART3(goal_bearing);
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <sendValue+0x44>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff97 	bl	80010e8 <PutcUART3>
 80011ba:	e002      	b.n	80011c2 <sendValue+0x22>
	else
		PutcUART3(0xFF);
 80011bc:	20ff      	movs	r0, #255	; 0xff
 80011be:	f7ff ff93 	bl	80010e8 <PutcUART3>

	//sleep
	for (int i = 0; i < 500000; i++);
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	e002      	b.n	80011ce <sendValue+0x2e>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3301      	adds	r3, #1
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <sendValue+0x48>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	ddf8      	ble.n	80011c8 <sendValue+0x28>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000044 	.word	0x20000044
 80011e4:	20000040 	.word	0x20000040
 80011e8:	0007a11f 	.word	0x0007a11f

080011ec <init>:
 */

#include <bug_0.h>


int init(){
 80011ec:	b598      	push	{r3, r4, r7, lr}
 80011ee:	af00      	add	r7, sp, #0

	//inicializacia premennych
	obstacle_forward = 0;
 80011f0:	4a11      	ldr	r2, [pc, #68]	; (8001238 <init+0x4c>)
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	f04f 0400 	mov.w	r4, #0
 80011fa:	e882 0018 	stmia.w	r2, {r3, r4}
	obstacleRight = 0;
 80011fe:	4a0f      	ldr	r2, [pc, #60]	; (800123c <init+0x50>)
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	f04f 0400 	mov.w	r4, #0
 8001208:	e882 0018 	stmia.w	r2, {r3, r4}
	obstacleLeft = 0;
 800120c:	4a0c      	ldr	r2, [pc, #48]	; (8001240 <init+0x54>)
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	f04f 0400 	mov.w	r4, #0
 8001216:	e882 0018 	stmia.w	r2, {r3, r4}
	bearing = 0;
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <init+0x58>)
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	f04f 0400 	mov.w	r4, #0
 8001224:	e882 0018 	stmia.w	r2, {r3, r4}
	bearing_error = 0;
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <init+0x5c>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]

	  initUSART3();
 800122e:	f7ff fef3 	bl	8001018 <initUSART3>
	//inicializacia zvukacov, kompasu a motorov
	return 1;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	bd98      	pop	{r3, r4, r7, pc}
 8001238:	20000050 	.word	0x20000050
 800123c:	20000058 	.word	0x20000058
 8001240:	20000068 	.word	0x20000068
 8001244:	20000070 	.word	0x20000070
 8001248:	20000060 	.word	0x20000060

0800124c <main>:
**
**===========================================================================
*/
int main(void)

{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
	init();
 8001252:	f7ff ffcb 	bl	80011ec <init>
	init_indicator_LED();
 8001256:	f000 f813 	bl	8001280 <init_indicator_LED>
	sensorInit();
 800125a:	f000 f89b 	bl	8001394 <sensorInit>

  /* TODO - Add your application code here */


  /* Infinite loop */
	volatile long i = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  sendValue();
 8001262:	f7ff ff9d 	bl	80011a0 <sendValue>
	  i++;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3301      	adds	r3, #1
 800126a:	607b      	str	r3, [r7, #4]
	  if (i > 100000)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a03      	ldr	r2, [pc, #12]	; (800127c <main+0x30>)
 8001270:	4293      	cmp	r3, r2
 8001272:	ddf6      	ble.n	8001262 <main+0x16>
	  {
		  i = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
	  else stop();*/


	//sendValue();
	//PutcUART2(48);
  }
 8001278:	e7f3      	b.n	8001262 <main+0x16>
 800127a:	bf00      	nop
 800127c:	000186a0 	.word	0x000186a0

08001280 <init_indicator_LED>:

/* Private functions */

//inicializacia indikacnej LED chodu procesora
void init_indicator_LED()
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	init_indicator_LED_pin();
 8001284:	f000 f806 	bl	8001294 <init_indicator_LED_pin>
	init_indicator_LED_trigtim();
 8001288:	f000 f81e 	bl	80012c8 <init_indicator_LED_trigtim>
	init_indicator_LED_trigtim_interrupt();
 800128c:	f000 f84c 	bl	8001328 <init_indicator_LED_trigtim_interrupt>
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}

08001294 <init_indicator_LED_pin>:

//inicializacia portu a pinu LED
void init_indicator_LED_pin()
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800129a:	2101      	movs	r1, #1
 800129c:	2001      	movs	r0, #1
 800129e:	f7ff f9cd 	bl	800063c <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef gpioInitStruc;
	gpioInitStruc.GPIO_Mode = GPIO_Mode_OUT;
 80012a2:	2301      	movs	r3, #1
 80012a4:	713b      	strb	r3, [r7, #4]
	gpioInitStruc.GPIO_OType = GPIO_OType_PP;
 80012a6:	2300      	movs	r3, #0
 80012a8:	71bb      	strb	r3, [r7, #6]
	gpioInitStruc.GPIO_Pin = GPIO_Pin_5;
 80012aa:	2320      	movs	r3, #32
 80012ac:	603b      	str	r3, [r7, #0]
	gpioInitStruc.GPIO_Speed = GPIO_Speed_400KHz;
 80012ae:	2300      	movs	r3, #0
 80012b0:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOA, &gpioInitStruc);
 80012b2:	463b      	mov	r3, r7
 80012b4:	4619      	mov	r1, r3
 80012b6:	4803      	ldr	r0, [pc, #12]	; (80012c4 <init_indicator_LED_pin+0x30>)
 80012b8:	f7fe ffc0 	bl	800023c <GPIO_Init>
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40020000 	.word	0x40020000

080012c8 <init_indicator_LED_trigtim>:

//inicializacia casovaca pre spustanie led LED
void init_indicator_LED_trigtim()
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
	indicatorTimeStamp = 0;
 80012ce:	4a14      	ldr	r2, [pc, #80]	; (8001320 <init_indicator_LED_trigtim+0x58>)
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	f04f 0400 	mov.w	r4, #0
 80012d8:	e882 0018 	stmia.w	r2, {r3, r4}
	unsigned short prescalerValue = (unsigned short) TIM_CLC_PRESCALER;
 80012dc:	f643 637f 	movw	r3, #15999	; 0x3e7f
 80012e0:	81fb      	strh	r3, [r7, #14]

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 80012e2:	2101      	movs	r1, #1
 80012e4:	2010      	movs	r0, #16
 80012e6:	f7ff f9e5 	bl	80006b4 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Period = TIM_PERIOD;
 80012ea:	f240 33e7 	movw	r3, #999	; 0x3e7
 80012ee:	607b      	str	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CLC_DIV;
 80012f0:	2300      	movs	r3, #0
 80012f2:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80012f4:	2300      	movs	r3, #0
 80012f6:	807b      	strh	r3, [r7, #2]
	TIM_TimeBaseStructure.TIM_Prescaler = prescalerValue;
 80012f8:	89fb      	ldrh	r3, [r7, #14]
 80012fa:	803b      	strh	r3, [r7, #0]
	TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 80012fc:	463b      	mov	r3, r7
 80012fe:	4619      	mov	r1, r3
 8001300:	4808      	ldr	r0, [pc, #32]	; (8001324 <init_indicator_LED_trigtim+0x5c>)
 8001302:	f7ff f9f5 	bl	80006f0 <TIM_TimeBaseInit>
	TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);
 8001306:	2201      	movs	r2, #1
 8001308:	2101      	movs	r1, #1
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <init_indicator_LED_trigtim+0x5c>)
 800130c:	f7ff fb4e 	bl	80009ac <TIM_ITConfig>
	TIM_Cmd(TIM6, ENABLE);
 8001310:	2101      	movs	r1, #1
 8001312:	4804      	ldr	r0, [pc, #16]	; (8001324 <init_indicator_LED_trigtim+0x5c>)
 8001314:	f7ff fa3e 	bl	8000794 <TIM_Cmd>
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bd90      	pop	{r4, r7, pc}
 8001320:	20000078 	.word	0x20000078
 8001324:	40001000 	.word	0x40001000

08001328 <init_indicator_LED_trigtim_interrupt>:

//inicializacia prerusenia casovaca
void init_indicator_LED_trigtim_interrupt()
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_InitStructure.NVIC_IRQChannel = TIM6_IRQn;
 800132e:	232b      	movs	r3, #43	; 0x2b
 8001330:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = TIM_INTERRUPT_PREEMP;
 8001332:	2300      	movs	r3, #0
 8001334:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = TIM_INTERRUPT_SUB;
 8001336:	2302      	movs	r3, #2
 8001338:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800133a:	2301      	movs	r3, #1
 800133c:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4618      	mov	r0, r3
 8001342:	f7fe ff1b 	bl	800017c <NVIC_Init>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop

08001350 <TIM6_IRQHandler>:

//spracovanie prerusenia z TIM6, casovaca pre kontrolku
void TIM6_IRQHandler(void)
{
 8001350:	b598      	push	{r3, r4, r7, lr}
 8001352:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) == SET)
 8001354:	2101      	movs	r1, #1
 8001356:	480c      	ldr	r0, [pc, #48]	; (8001388 <TIM6_IRQHandler+0x38>)
 8001358:	f7ff fb4c 	bl	80009f4 <TIM_GetITStatus>
 800135c:	4603      	mov	r3, r0
 800135e:	2b01      	cmp	r3, #1
 8001360:	d10f      	bne.n	8001382 <TIM6_IRQHandler+0x32>
	{
		indicatorTimeStamp++;
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <TIM6_IRQHandler+0x3c>)
 8001364:	cb18      	ldmia	r3, {r3, r4}
 8001366:	3301      	adds	r3, #1
 8001368:	f144 0400 	adc.w	r4, r4, #0
 800136c:	4a07      	ldr	r2, [pc, #28]	; (800138c <TIM6_IRQHandler+0x3c>)
 800136e:	e882 0018 	stmia.w	r2, {r3, r4}
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);//toggle LED PA5
 8001372:	2120      	movs	r1, #32
 8001374:	4806      	ldr	r0, [pc, #24]	; (8001390 <TIM6_IRQHandler+0x40>)
 8001376:	f7ff f82b 	bl	80003d0 <GPIO_ToggleBits>
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 800137a:	2101      	movs	r1, #1
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <TIM6_IRQHandler+0x38>)
 800137e:	f7ff fb63 	bl	8000a48 <TIM_ClearITPendingBit>
	}
}
 8001382:	bf00      	nop
 8001384:	bd98      	pop	{r3, r4, r7, pc}
 8001386:	bf00      	nop
 8001388:	40001000 	.word	0x40001000
 800138c:	20000078 	.word	0x20000078
 8001390:	40020000 	.word	0x40020000

08001394 <sensorInit>:
#define SENSOR_CALL_TIM_SUBPRIORITY 3

//Functions
//inicializacia senzorov vzdialenosti
void sensorInit(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	initSensorCaptureStruc();
 8001398:	f000 f80c 	bl	80013b4 <initSensorCaptureStruc>
	sensorInitTriggerTimer();
 800139c:	f000 f87a 	bl	8001494 <sensorInitTriggerTimer>
	sensorInitTriggerPin();
 80013a0:	f000 f8b0 	bl	8001504 <sensorInitTriggerPin>
	sensorInitCapturePins();
 80013a4:	f000 f93c 	bl	8001620 <sensorInitCapturePins>
	sensorInitCaptureTimer();
 80013a8:	f000 f8d8 	bl	800155c <sensorInitCaptureTimer>
	sensorInitCallTimer();
 80013ac:	f000 f832 	bl	8001414 <sensorInitCallTimer>
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <initSensorCaptureStruc>:
//inicializacia struktur merania vzdialenosti
void initSensorCaptureStruc(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
	LeftSensorCaptureStruc.captureStep = 0;
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <initSensorCaptureStruc+0x54>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
	LeftSensorCaptureStruc.risingTimeCapturing = 0;
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <initSensorCaptureStruc+0x54>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	605a      	str	r2, [r3, #4]
	LeftSensorCaptureStruc.risingTime = 0;
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <initSensorCaptureStruc+0x54>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
	LeftSensorCaptureStruc.fallingTime = 0;
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <initSensorCaptureStruc+0x54>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]

	RightSensorCaptureStruc.captureStep = 0;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <initSensorCaptureStruc+0x58>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
	RightSensorCaptureStruc.risingTimeCapturing = 0;
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <initSensorCaptureStruc+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
	RightSensorCaptureStruc.risingTime = 0;
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <initSensorCaptureStruc+0x58>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
	RightSensorCaptureStruc.fallingTime = 0;
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <initSensorCaptureStruc+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]

	ForwardSensorCaptureStruc.captureStep = 0;
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <initSensorCaptureStruc+0x5c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
	ForwardSensorCaptureStruc.risingTimeCapturing = 0;
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <initSensorCaptureStruc+0x5c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	605a      	str	r2, [r3, #4]
	ForwardSensorCaptureStruc.risingTime = 0;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <initSensorCaptureStruc+0x5c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
	ForwardSensorCaptureStruc.fallingTime = 0;
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <initSensorCaptureStruc+0x5c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]

}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	20000090 	.word	0x20000090
 800140c:	20000080 	.word	0x20000080
 8001410:	200000a0 	.word	0x200000a0

08001414 <sensorInitCallTimer>:
//inicializacia casovaca pravidelne volajuceho meranie vzdialenosti
void sensorInitCallTimer(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
	selectSensor = 0;
 800141a:	4b12      	ldr	r3, [pc, #72]	; (8001464 <sensorInitCallTimer+0x50>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
	//Structure for timer settings
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

	//  clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM10, ENABLE);
 8001420:	2101      	movs	r1, #1
 8001422:	2008      	movs	r0, #8
 8001424:	f7ff f928 	bl	8000678 <RCC_APB2PeriphClockCmd>

	//CALL_TIM init prerusenie
	sensorInitCallTimerInterrupt();
 8001428:	f000 f820 	bl	800146c <sensorInitCallTimerInterrupt>

	TIM_TimeBaseStructure.TIM_Period = SENSOR_CALL_TIM_PERIOD;
 800142c:	2341      	movs	r3, #65	; 0x41
 800142e:	60bb      	str	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_ClockDivision = SENSOR_CALL_TIM_CLOCKDIVISION;
 8001430:	2300      	movs	r3, #0
 8001432:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001434:	2300      	movs	r3, #0
 8001436:	80fb      	strh	r3, [r7, #6]
	TIM_TimeBaseStructure.TIM_Prescaler = SENSOR_CALL_TIM_PRESCALE;
 8001438:	f643 637f 	movw	r3, #15999	; 0x3e7f
 800143c:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseInit(SENSOR_CALL_TIM, &TIM_TimeBaseStructure);
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	4619      	mov	r1, r3
 8001442:	4809      	ldr	r0, [pc, #36]	; (8001468 <sensorInitCallTimer+0x54>)
 8001444:	f7ff f954 	bl	80006f0 <TIM_TimeBaseInit>
	// TIM Interrupts enable
	TIM_ITConfig(SENSOR_CALL_TIM, TIM_IT_Update, ENABLE);
 8001448:	2201      	movs	r2, #1
 800144a:	2101      	movs	r1, #1
 800144c:	4806      	ldr	r0, [pc, #24]	; (8001468 <sensorInitCallTimer+0x54>)
 800144e:	f7ff faad 	bl	80009ac <TIM_ITConfig>
	// enable counter
	TIM_Cmd(SENSOR_CALL_TIM, ENABLE);
 8001452:	2101      	movs	r1, #1
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <sensorInitCallTimer+0x54>)
 8001456:	f7ff f99d 	bl	8000794 <TIM_Cmd>
}
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000003c 	.word	0x2000003c
 8001468:	40010c00 	.word	0x40010c00

0800146c <sensorInitCallTimerInterrupt>:
//inicializacia preruseni casovaca volajuceho meranie dialkomermy
void sensorInitCallTimerInterrupt(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_InitStructure.NVIC_IRQChannel = TIM10_IRQn;
 8001472:	231a      	movs	r3, #26
 8001474:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = SENSOR_CALL_TIM_PREEMPTPRIORITY;
 8001476:	2303      	movs	r3, #3
 8001478:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = SENSOR_CALL_TIM_SUBPRIORITY;
 800147a:	2303      	movs	r3, #3
 800147c:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800147e:	2301      	movs	r3, #1
 8001480:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe fe79 	bl	800017c <NVIC_Init>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop

08001494 <sensorInitTriggerTimer>:

//inicializacia casovaca, ktory generuje spustaci impulz
void sensorInitTriggerTimer(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
	//vypocet delicky pre periodu 10us
	unsigned short prescalerValue = (unsigned short) (STM_SYSTEM_CLOCK / TRIG_TIM_FREQ) - 1;
 800149a:	239f      	movs	r3, #159	; 0x9f
 800149c:	81fb      	strh	r3, [r7, #14]

	//struktura pre zakladny casovac TRIG_TIM
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

	//spustenie hodinovych impulzov pre TRIG_TIM
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 800149e:	2101      	movs	r1, #1
 80014a0:	2020      	movs	r0, #32
 80014a2:	f7ff f907 	bl	80006b4 <RCC_APB1PeriphClockCmd>

	//TRIG_TIM init prerusenie
	sensorInitTriggerTimerInterrup();
 80014a6:	f000 f819 	bl	80014dc <sensorInitTriggerTimerInterrup>

	//init struktura TRIG_TIM
	TIM_TimeBaseStructure.TIM_Period = 1;
 80014aa:	2301      	movs	r3, #1
 80014ac:	607b      	str	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80014b2:	2300      	movs	r3, #0
 80014b4:	807b      	strh	r3, [r7, #2]
	TIM_TimeBaseStructure.TIM_Prescaler = prescalerValue;
 80014b6:	89fb      	ldrh	r3, [r7, #14]
 80014b8:	803b      	strh	r3, [r7, #0]
	TIM_TimeBaseInit(TRIG_TIM, &TIM_TimeBaseStructure);//zapisanie struktury
 80014ba:	463b      	mov	r3, r7
 80014bc:	4619      	mov	r1, r3
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <sensorInitTriggerTimer+0x44>)
 80014c0:	f7ff f916 	bl	80006f0 <TIM_TimeBaseInit>

	//povolenie preruseni TRIG_TIM
	TIM_ITConfig(TRIG_TIM, TIM_IT_Update, ENABLE);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2101      	movs	r1, #1
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <sensorInitTriggerTimer+0x44>)
 80014ca:	f7ff fa6f 	bl	80009ac <TIM_ITConfig>
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40001400 	.word	0x40001400

080014dc <sensorInitTriggerTimerInterrup>:
//inicializacia preruseni casovaca, ktory generuje spustaci impulz
void sensorInitTriggerTimerInterrup(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
	//TRIG_TIM struct prerusenie
	NVIC_InitTypeDef NVIC_InitStructure;

	//init struktura prerusenie
	NVIC_InitStructure.NVIC_IRQChannel = TIM7_IRQn;
 80014e2:	232c      	movs	r3, #44	; 0x2c
 80014e4:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80014ea:	2301      	movs	r3, #1
 80014ec:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80014ee:	2301      	movs	r3, #1
 80014f0:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);//zapisanie struktury
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7fe fe41 	bl	800017c <NVIC_Init>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop

08001504 <sensorInitTriggerPin>:
//inicializacia pinov pre spustanie dialkomerov
void sensorInitTriggerPin(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
	//spusti hodiny pre port A
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800150a:	2101      	movs	r1, #1
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff f895 	bl	800063c <RCC_AHBPeriphClockCmd>

	//vytvorenie struktury GPIO
	GPIO_InitTypeDef gpioInitStruc;
	gpioInitStruc.GPIO_Mode = GPIO_Mode_OUT;
 8001512:	2301      	movs	r3, #1
 8001514:	713b      	strb	r3, [r7, #4]
	gpioInitStruc.GPIO_OType = GPIO_OType_PP;
 8001516:	2300      	movs	r3, #0
 8001518:	71bb      	strb	r3, [r7, #6]
	gpioInitStruc.GPIO_Speed = GPIO_Speed_400KHz;
 800151a:	2300      	movs	r3, #0
 800151c:	717b      	strb	r3, [r7, #5]

	//zapisanie inicializacnej struktury - left
	gpioInitStruc.GPIO_Pin = LEFT_TRIG_PIN;
 800151e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001522:	603b      	str	r3, [r7, #0]
	GPIO_Init(TRIG_PORT, &gpioInitStruc);//errror - remote failure E31
 8001524:	463b      	mov	r3, r7
 8001526:	4619      	mov	r1, r3
 8001528:	480b      	ldr	r0, [pc, #44]	; (8001558 <sensorInitTriggerPin+0x54>)
 800152a:	f7fe fe87 	bl	800023c <GPIO_Init>

	//zapisanie inicializacnej struktury - right
	gpioInitStruc.GPIO_Pin = RIGHT_TRIG_PIN;
 800152e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001532:	603b      	str	r3, [r7, #0]
	GPIO_Init(TRIG_PORT, &gpioInitStruc);
 8001534:	463b      	mov	r3, r7
 8001536:	4619      	mov	r1, r3
 8001538:	4807      	ldr	r0, [pc, #28]	; (8001558 <sensorInitTriggerPin+0x54>)
 800153a:	f7fe fe7f 	bl	800023c <GPIO_Init>

	//zapisanie inicializacnej struktury - forward
	gpioInitStruc.GPIO_Pin = FORWARD_TRIG_PIN;
 800153e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001542:	603b      	str	r3, [r7, #0]
	GPIO_Init(TRIG_PORT, &gpioInitStruc);
 8001544:	463b      	mov	r3, r7
 8001546:	4619      	mov	r1, r3
 8001548:	4803      	ldr	r0, [pc, #12]	; (8001558 <sensorInitTriggerPin+0x54>)
 800154a:	f7fe fe77 	bl	800023c <GPIO_Init>

}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40020000 	.word	0x40020000

0800155c <sensorInitCaptureTimer>:
//inicializacia casovaca pre meranie dlzky impulzu z dialkomera
void sensorInitCaptureTimer(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	//CAPTURE_TIM struct capture
	TIM_ICInitTypeDef  TIM_ICInitStructure;

	//povolenie hodin pre CAPTURE_TIM
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001562:	2101      	movs	r1, #1
 8001564:	2002      	movs	r0, #2
 8001566:	f7ff f8a5 	bl	80006b4 <RCC_APB1PeriphClockCmd>

	//init CAPTURE_TIM struct capture
	TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_BothEdge;
 800156a:	230a      	movs	r3, #10
 800156c:	807b      	strh	r3, [r7, #2]
	TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
 800156e:	2301      	movs	r3, #1
 8001570:	80bb      	strh	r3, [r7, #4]
	TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	80fb      	strh	r3, [r7, #6]
	TIM_ICInitStructure.TIM_ICFilter = 0x0;
 8001576:	2300      	movs	r3, #0
 8001578:	813b      	strh	r3, [r7, #8]

	//CAPTURE_TIM nastavenie kanalov
	TIM_ICInitStructure.TIM_Channel = LEFT_TIM_CHANNEL;//left
 800157a:	2308      	movs	r3, #8
 800157c:	803b      	strh	r3, [r7, #0]
	TIM_ICInit(CAPTURE_TIM, &TIM_ICInitStructure);
 800157e:	463b      	mov	r3, r7
 8001580:	4619      	mov	r1, r3
 8001582:	481c      	ldr	r0, [pc, #112]	; (80015f4 <sensorInitCaptureTimer+0x98>)
 8001584:	f7ff f926 	bl	80007d4 <TIM_ICInit>
	TIM_ICInitStructure.TIM_Channel = RIGHT_TIM_CHANNEL;//right
 8001588:	2300      	movs	r3, #0
 800158a:	803b      	strh	r3, [r7, #0]
	TIM_ICInit(CAPTURE_TIM, &TIM_ICInitStructure);
 800158c:	463b      	mov	r3, r7
 800158e:	4619      	mov	r1, r3
 8001590:	4818      	ldr	r0, [pc, #96]	; (80015f4 <sensorInitCaptureTimer+0x98>)
 8001592:	f7ff f91f 	bl	80007d4 <TIM_ICInit>
	TIM_ICInitStructure.TIM_Channel = FORWARD_TIM_CHANNEL;//forward
 8001596:	230c      	movs	r3, #12
 8001598:	803b      	strh	r3, [r7, #0]
	TIM_ICInit(CAPTURE_TIM, &TIM_ICInitStructure);
 800159a:	463b      	mov	r3, r7
 800159c:	4619      	mov	r1, r3
 800159e:	4815      	ldr	r0, [pc, #84]	; (80015f4 <sensorInitCaptureTimer+0x98>)
 80015a0:	f7ff f918 	bl	80007d4 <TIM_ICInit>

	//nastavenie pocitadla kvoli delicke hodinovych impuzov
	TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 80015a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015a8:	613b      	str	r3, [r7, #16]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80015ae:	2300      	movs	r3, #0
 80015b0:	81fb      	strh	r3, [r7, #14]
	TIM_TimeBaseStructure.TIM_Prescaler = CAPTURE_CLC_PRESCALER;
 80015b2:	239f      	movs	r3, #159	; 0x9f
 80015b4:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(CAPTURE_TIM, &TIM_TimeBaseStructure);
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	4619      	mov	r1, r3
 80015bc:	480d      	ldr	r0, [pc, #52]	; (80015f4 <sensorInitCaptureTimer+0x98>)
 80015be:	f7ff f897 	bl	80006f0 <TIM_TimeBaseInit>

	//CAPTURE_TIM povolenie pocitadla
	TIM_Cmd(CAPTURE_TIM, ENABLE);
 80015c2:	2101      	movs	r1, #1
 80015c4:	480b      	ldr	r0, [pc, #44]	; (80015f4 <sensorInitCaptureTimer+0x98>)
 80015c6:	f7ff f8e5 	bl	8000794 <TIM_Cmd>

	//povolenie CC poziadavky na prerusenie
	TIM_ITConfig(CAPTURE_TIM, LEFT_TIM_CC, ENABLE);//left
 80015ca:	2201      	movs	r2, #1
 80015cc:	2108      	movs	r1, #8
 80015ce:	4809      	ldr	r0, [pc, #36]	; (80015f4 <sensorInitCaptureTimer+0x98>)
 80015d0:	f7ff f9ec 	bl	80009ac <TIM_ITConfig>
	TIM_ITConfig(CAPTURE_TIM, RIGHT_TIM_CC, ENABLE);//right
 80015d4:	2201      	movs	r2, #1
 80015d6:	2102      	movs	r1, #2
 80015d8:	4806      	ldr	r0, [pc, #24]	; (80015f4 <sensorInitCaptureTimer+0x98>)
 80015da:	f7ff f9e7 	bl	80009ac <TIM_ITConfig>
	TIM_ITConfig(CAPTURE_TIM, FORWARD_TIM_CC, ENABLE);//forward
 80015de:	2201      	movs	r2, #1
 80015e0:	2110      	movs	r1, #16
 80015e2:	4804      	ldr	r0, [pc, #16]	; (80015f4 <sensorInitCaptureTimer+0x98>)
 80015e4:	f7ff f9e2 	bl	80009ac <TIM_ITConfig>

	//CAPTURE_TIM prerusenie init
	sensorInitCaptureTimerInterrup();
 80015e8:	f000 f806 	bl	80015f8 <sensorInitCaptureTimerInterrup>
}
 80015ec:	bf00      	nop
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40000400 	.word	0x40000400

080015f8 <sensorInitCaptureTimerInterrup>:

//inicializacia preruseni casovaca pre meranie dlzky impulzu z dialkomera
void sensorInitCaptureTimerInterrup(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
	//CAPTURE_TIM struct prerusenie
	NVIC_InitTypeDef NVIC_InitStructure;

	//init TIM struct prerusenie
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 80015fe:	231d      	movs	r3, #29
 8001600:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 8001606:	2302      	movs	r3, #2
 8001608:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800160a:	2301      	movs	r3, #1
 800160c:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe fdb3 	bl	800017c <NVIC_Init>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop

08001620 <sensorInitCapturePins>:
//inicializacia pinu pre meranie dlzky impulzu z dialkomera
void sensorInitCapturePins(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
	//GPIO struct
	GPIO_InitTypeDef GPIO_InitStructure;

	//GPIOB povolenie hodin
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8001626:	2101      	movs	r1, #1
 8001628:	2002      	movs	r0, #2
 800162a:	f7ff f807 	bl	800063c <RCC_AHBPeriphClockCmd>

	//CAPTURE_TIM struct init
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 800162e:	2302      	movs	r3, #2
 8001630:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001632:	2303      	movs	r3, #3
 8001634:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001636:	2300      	movs	r3, #0
 8001638:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 800163a:	2301      	movs	r3, #1
 800163c:	71fb      	strb	r3, [r7, #7]

	//inicializacia pinu left
	GPIO_InitStructure.GPIO_Pin   = LEFT_CAP_PIN;
 800163e:	2301      	movs	r3, #1
 8001640:	603b      	str	r3, [r7, #0]
	GPIO_Init(CAPTURE_PORT, &GPIO_InitStructure);//zapisanie struktury
 8001642:	463b      	mov	r3, r7
 8001644:	4619      	mov	r1, r3
 8001646:	4812      	ldr	r0, [pc, #72]	; (8001690 <sensorInitCapturePins+0x70>)
 8001648:	f7fe fdf8 	bl	800023c <GPIO_Init>
	GPIO_PinAFConfig(CAPTURE_PORT, LEFT_CAP_PINSOURCE, GPIO_AF_TIM3);
 800164c:	2202      	movs	r2, #2
 800164e:	2100      	movs	r1, #0
 8001650:	480f      	ldr	r0, [pc, #60]	; (8001690 <sensorInitCapturePins+0x70>)
 8001652:	f7fe fed1 	bl	80003f8 <GPIO_PinAFConfig>
	//inicializacia pinu right
	GPIO_InitStructure.GPIO_Pin   = RIGHT_CAP_PIN;
 8001656:	2310      	movs	r3, #16
 8001658:	603b      	str	r3, [r7, #0]
	GPIO_Init(CAPTURE_PORT, &GPIO_InitStructure);//zapisanie struktury
 800165a:	463b      	mov	r3, r7
 800165c:	4619      	mov	r1, r3
 800165e:	480c      	ldr	r0, [pc, #48]	; (8001690 <sensorInitCapturePins+0x70>)
 8001660:	f7fe fdec 	bl	800023c <GPIO_Init>
	GPIO_PinAFConfig(CAPTURE_PORT, RIGHT_CAP_PINSOURCE, GPIO_AF_TIM3);
 8001664:	2202      	movs	r2, #2
 8001666:	2104      	movs	r1, #4
 8001668:	4809      	ldr	r0, [pc, #36]	; (8001690 <sensorInitCapturePins+0x70>)
 800166a:	f7fe fec5 	bl	80003f8 <GPIO_PinAFConfig>
	//inicializacia pinu forward
	GPIO_InitStructure.GPIO_Pin   = FORWARD_CAP_PIN;
 800166e:	2302      	movs	r3, #2
 8001670:	603b      	str	r3, [r7, #0]
	GPIO_Init(CAPTURE_PORT, &GPIO_InitStructure);//zapisanie struktury
 8001672:	463b      	mov	r3, r7
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <sensorInitCapturePins+0x70>)
 8001678:	f7fe fde0 	bl	800023c <GPIO_Init>
	GPIO_PinAFConfig(CAPTURE_PORT, FORWARD_CAP_PINSOURCE, GPIO_AF_TIM3);
 800167c:	2202      	movs	r2, #2
 800167e:	2101      	movs	r1, #1
 8001680:	4803      	ldr	r0, [pc, #12]	; (8001690 <sensorInitCapturePins+0x70>)
 8001682:	f7fe feb9 	bl	80003f8 <GPIO_PinAFConfig>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40020400 	.word	0x40020400

08001694 <leftSensorMeasure>:

//spustenie merania laveho dialkomeru
void leftSensorMeasure(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 8001698:	2101      	movs	r1, #1
 800169a:	4808      	ldr	r0, [pc, #32]	; (80016bc <leftSensorMeasure+0x28>)
 800169c:	f7ff f87a 	bl	8000794 <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, LEFT_TRIG_PIN, Bit_SET);
 80016a0:	2201      	movs	r2, #1
 80016a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016a6:	4806      	ldr	r0, [pc, #24]	; (80016c0 <leftSensorMeasure+0x2c>)
 80016a8:	f7fe fe7a 	bl	80003a0 <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	LeftSensorCaptureStruc.captureStep = 0;
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <leftSensorMeasure+0x30>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = leftSensorCaptureHandler;
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <leftSensorMeasure+0x34>)
 80016b4:	4a05      	ldr	r2, [pc, #20]	; (80016cc <leftSensorMeasure+0x38>)
 80016b6:	601a      	str	r2, [r3, #0]
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40001400 	.word	0x40001400
 80016c0:	40020000 	.word	0x40020000
 80016c4:	20000090 	.word	0x20000090
 80016c8:	200000b0 	.word	0x200000b0
 80016cc:	0800184d 	.word	0x0800184d

080016d0 <rightSensorMeasure>:
//spustenie merania praveho dialkomeru
void rightSensorMeasure(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 80016d4:	2101      	movs	r1, #1
 80016d6:	4808      	ldr	r0, [pc, #32]	; (80016f8 <rightSensorMeasure+0x28>)
 80016d8:	f7ff f85c 	bl	8000794 <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, RIGHT_TRIG_PIN, Bit_SET);
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016e2:	4806      	ldr	r0, [pc, #24]	; (80016fc <rightSensorMeasure+0x2c>)
 80016e4:	f7fe fe5c 	bl	80003a0 <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	RightSensorCaptureStruc.captureStep = 0;
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <rightSensorMeasure+0x30>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = rightSensorCaptureHandler;
 80016ee:	4b05      	ldr	r3, [pc, #20]	; (8001704 <rightSensorMeasure+0x34>)
 80016f0:	4a05      	ldr	r2, [pc, #20]	; (8001708 <rightSensorMeasure+0x38>)
 80016f2:	601a      	str	r2, [r3, #0]
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40001400 	.word	0x40001400
 80016fc:	40020000 	.word	0x40020000
 8001700:	20000080 	.word	0x20000080
 8001704:	200000b0 	.word	0x200000b0
 8001708:	080018ad 	.word	0x080018ad

0800170c <forwardSensorMeasure>:
//spustenie memrania predneho dialkomeru
void forwardSensorMeasure(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 8001710:	2101      	movs	r1, #1
 8001712:	4808      	ldr	r0, [pc, #32]	; (8001734 <forwardSensorMeasure+0x28>)
 8001714:	f7ff f83e 	bl	8000794 <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, FORWARD_TRIG_PIN, Bit_SET);
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800171e:	4806      	ldr	r0, [pc, #24]	; (8001738 <forwardSensorMeasure+0x2c>)
 8001720:	f7fe fe3e 	bl	80003a0 <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	ForwardSensorCaptureStruc.captureStep = 0;
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <forwardSensorMeasure+0x30>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = forwardSensorCaptureHandler;
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <forwardSensorMeasure+0x34>)
 800172c:	4a05      	ldr	r2, [pc, #20]	; (8001744 <forwardSensorMeasure+0x38>)
 800172e:	601a      	str	r2, [r3, #0]
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40001400 	.word	0x40001400
 8001738:	40020000 	.word	0x40020000
 800173c:	200000a0 	.word	0x200000a0
 8001740:	200000b0 	.word	0x200000b0
 8001744:	0800190d 	.word	0x0800190d

08001748 <TIM7_IRQHandler>:

//handlery bude treba dat do suboru, ktory bude urcovat veci specificke pre dany hardver
//samotne funkcie ktore ma vykonat ale ostanu tu
//spracovanie prerusenia z TRIG_TIM, casovac pre spustaci impulz dialkomeru
void TIM7_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
	//tez do samostatnej funkcie alebo mozno bude stacit #define fjdkkdf nazov funkcie
	if (TIM_GetITStatus(TRIG_TIM, TIM_IT_Update) == SET)
 800174c:	2101      	movs	r1, #1
 800174e:	481e      	ldr	r0, [pc, #120]	; (80017c8 <TIM7_IRQHandler+0x80>)
 8001750:	f7ff f950 	bl	80009f4 <TIM_GetITStatus>
 8001754:	4603      	mov	r3, r0
 8001756:	2b01      	cmp	r3, #1
 8001758:	d133      	bne.n	80017c2 <TIM7_IRQHandler+0x7a>
	{
		TIM_Cmd(TRIG_TIM, DISABLE);
 800175a:	2100      	movs	r1, #0
 800175c:	481a      	ldr	r0, [pc, #104]	; (80017c8 <TIM7_IRQHandler+0x80>)
 800175e:	f7ff f819 	bl	8000794 <TIM_Cmd>
		//vypnutie impulzu na prislusnom spustacom pine
		if (GPIO_ReadOutputDataBit(TRIG_PORT, LEFT_TRIG_PIN) == 1)
 8001762:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001766:	4819      	ldr	r0, [pc, #100]	; (80017cc <TIM7_IRQHandler+0x84>)
 8001768:	f7fe fdfe 	bl	8000368 <GPIO_ReadOutputDataBit>
 800176c:	4603      	mov	r3, r0
 800176e:	2b01      	cmp	r3, #1
 8001770:	d106      	bne.n	8001780 <TIM7_IRQHandler+0x38>
		{
			GPIO_WriteBit(TRIG_PORT, LEFT_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu left
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001778:	4814      	ldr	r0, [pc, #80]	; (80017cc <TIM7_IRQHandler+0x84>)
 800177a:	f7fe fe11 	bl	80003a0 <GPIO_WriteBit>
 800177e:	e01c      	b.n	80017ba <TIM7_IRQHandler+0x72>
		}
		else if (GPIO_ReadOutputDataBit(TRIG_PORT, RIGHT_TRIG_PIN) == 1)
 8001780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001784:	4811      	ldr	r0, [pc, #68]	; (80017cc <TIM7_IRQHandler+0x84>)
 8001786:	f7fe fdef 	bl	8000368 <GPIO_ReadOutputDataBit>
 800178a:	4603      	mov	r3, r0
 800178c:	2b01      	cmp	r3, #1
 800178e:	d106      	bne.n	800179e <TIM7_IRQHandler+0x56>
		{
			GPIO_WriteBit(TRIG_PORT, RIGHT_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu right
 8001790:	2200      	movs	r2, #0
 8001792:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001796:	480d      	ldr	r0, [pc, #52]	; (80017cc <TIM7_IRQHandler+0x84>)
 8001798:	f7fe fe02 	bl	80003a0 <GPIO_WriteBit>
 800179c:	e00d      	b.n	80017ba <TIM7_IRQHandler+0x72>
		}
		else if (GPIO_ReadOutputDataBit(TRIG_PORT, FORWARD_TRIG_PIN) == 1)
 800179e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017a2:	480a      	ldr	r0, [pc, #40]	; (80017cc <TIM7_IRQHandler+0x84>)
 80017a4:	f7fe fde0 	bl	8000368 <GPIO_ReadOutputDataBit>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d105      	bne.n	80017ba <TIM7_IRQHandler+0x72>
		{
			GPIO_WriteBit(TRIG_PORT, FORWARD_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu forward
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <TIM7_IRQHandler+0x84>)
 80017b6:	f7fe fdf3 	bl	80003a0 <GPIO_WriteBit>
		}
		TIM_ClearITPendingBit(TRIG_TIM, TIM_IT_Update);
 80017ba:	2101      	movs	r1, #1
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <TIM7_IRQHandler+0x80>)
 80017be:	f7ff f943 	bl	8000a48 <TIM_ClearITPendingBit>
	}
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40001400 	.word	0x40001400
 80017cc:	40020000 	.word	0x40020000

080017d0 <TIM3_IRQHandler>:
//spracovanie prerusenia z TIM3, casovac pre meranie dlzky impulzu z dialialkomerov
void TIM3_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	//spustenie spracovania prerusenia CAPTURE_TIM pre prislusny senzor
	if (sensorCaptureHandler != 0)
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <TIM3_IRQHandler+0x18>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <TIM3_IRQHandler+0x12>
	{
		sensorCaptureHandler();
 80017dc:	4b02      	ldr	r3, [pc, #8]	; (80017e8 <TIM3_IRQHandler+0x18>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4798      	blx	r3
	}
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200000b0 	.word	0x200000b0

080017ec <TIM10_IRQHandler>:
//spracovanie prerusenia z casovaca pre volanie merania vzdialenosti
void TIM10_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(SENSOR_CALL_TIM, TIM_IT_Update) == SET)
 80017f0:	2101      	movs	r1, #1
 80017f2:	4814      	ldr	r0, [pc, #80]	; (8001844 <TIM10_IRQHandler+0x58>)
 80017f4:	f7ff f8fe 	bl	80009f4 <TIM_GetITStatus>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d120      	bne.n	8001840 <TIM10_IRQHandler+0x54>
	{
		//volanie merania senzora, ktory je na rade
		switch (selectSensor)
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <TIM10_IRQHandler+0x5c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d006      	beq.n	8001814 <TIM10_IRQHandler+0x28>
 8001806:	2b02      	cmp	r3, #2
 8001808:	d007      	beq.n	800181a <TIM10_IRQHandler+0x2e>
 800180a:	2b00      	cmp	r3, #0
 800180c:	d108      	bne.n	8001820 <TIM10_IRQHandler+0x34>
		{
		case 0:
			leftSensorMeasure();
 800180e:	f7ff ff41 	bl	8001694 <leftSensorMeasure>
			break;
 8001812:	e005      	b.n	8001820 <TIM10_IRQHandler+0x34>
		case 1:
			forwardSensorMeasure();
 8001814:	f7ff ff7a 	bl	800170c <forwardSensorMeasure>
			break;
 8001818:	e002      	b.n	8001820 <TIM10_IRQHandler+0x34>
		case 2:
			rightSensorMeasure();
 800181a:	f7ff ff59 	bl	80016d0 <rightSensorMeasure>
			break;
 800181e:	bf00      	nop
		}
		//inkrementovanie volaneho senzora
		selectSensor++;
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <TIM10_IRQHandler+0x5c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	4a08      	ldr	r2, [pc, #32]	; (8001848 <TIM10_IRQHandler+0x5c>)
 8001828:	6013      	str	r3, [r2, #0]
		if (selectSensor > 2)
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <TIM10_IRQHandler+0x5c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b02      	cmp	r3, #2
 8001830:	dd02      	ble.n	8001838 <TIM10_IRQHandler+0x4c>
		{
			selectSensor = 0;
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <TIM10_IRQHandler+0x5c>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
		}
		TIM_ClearITPendingBit(SENSOR_CALL_TIM, TIM_IT_Update);
 8001838:	2101      	movs	r1, #1
 800183a:	4802      	ldr	r0, [pc, #8]	; (8001844 <TIM10_IRQHandler+0x58>)
 800183c:	f7ff f904 	bl	8000a48 <TIM_ClearITPendingBit>
	}
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40010c00 	.word	0x40010c00
 8001848:	2000003c 	.word	0x2000003c

0800184c <leftSensorCaptureHandler>:

//meranie dlzky impulzu lavy senzor
void leftSensorCaptureHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, LEFT_TIM_CC) != RESET)
 8001850:	2108      	movs	r1, #8
 8001852:	4814      	ldr	r0, [pc, #80]	; (80018a4 <leftSensorCaptureHandler+0x58>)
 8001854:	f7ff f8ce 	bl	80009f4 <TIM_GetITStatus>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d01f      	beq.n	800189e <leftSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, LEFT_TIM_CC);
 800185e:	2108      	movs	r1, #8
 8001860:	4810      	ldr	r0, [pc, #64]	; (80018a4 <leftSensorCaptureHandler+0x58>)
 8001862:	f7ff f8f1 	bl	8000a48 <TIM_ClearITPendingBit>

		if(LeftSensorCaptureStruc.captureStep == 0)
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <leftSensorCaptureHandler+0x5c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <leftSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			LeftSensorCaptureStruc.risingTimeCapturing = LEFT_TIM_GETCAPTURE;
 800186e:	480d      	ldr	r0, [pc, #52]	; (80018a4 <leftSensorCaptureHandler+0x58>)
 8001870:	f7ff f810 	bl	8000894 <TIM_GetCapture3>
 8001874:	4602      	mov	r2, r0
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <leftSensorCaptureHandler+0x5c>)
 8001878:	605a      	str	r2, [r3, #4]
			LeftSensorCaptureStruc.captureStep = 1;
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <leftSensorCaptureHandler+0x5c>)
 800187c:	2201      	movs	r2, #1
 800187e:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			LeftSensorCaptureStruc.fallingTime = LEFT_TIM_GETCAPTURE;
			LeftSensorCaptureStruc.risingTime = LeftSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 8001880:	e00d      	b.n	800189e <leftSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			LeftSensorCaptureStruc.risingTimeCapturing = LEFT_TIM_GETCAPTURE;
			LeftSensorCaptureStruc.captureStep = 1;
		}
		else if(LeftSensorCaptureStruc.captureStep == 1)
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <leftSensorCaptureHandler+0x5c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d109      	bne.n	800189e <leftSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			LeftSensorCaptureStruc.fallingTime = LEFT_TIM_GETCAPTURE;
 800188a:	4806      	ldr	r0, [pc, #24]	; (80018a4 <leftSensorCaptureHandler+0x58>)
 800188c:	f7ff f802 	bl	8000894 <TIM_GetCapture3>
 8001890:	4602      	mov	r2, r0
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <leftSensorCaptureHandler+0x5c>)
 8001894:	60da      	str	r2, [r3, #12]
			LeftSensorCaptureStruc.risingTime = LeftSensorCaptureStruc.risingTimeCapturing;
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <leftSensorCaptureHandler+0x5c>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4a03      	ldr	r2, [pc, #12]	; (80018a8 <leftSensorCaptureHandler+0x5c>)
 800189c:	6093      	str	r3, [r2, #8]
		}
	}
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40000400 	.word	0x40000400
 80018a8:	20000090 	.word	0x20000090

080018ac <rightSensorCaptureHandler>:
//meranie dlzky impulzu lavy senzor
void rightSensorCaptureHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, RIGHT_TIM_CC) != RESET)
 80018b0:	2102      	movs	r1, #2
 80018b2:	4814      	ldr	r0, [pc, #80]	; (8001904 <rightSensorCaptureHandler+0x58>)
 80018b4:	f7ff f89e 	bl	80009f4 <TIM_GetITStatus>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d01f      	beq.n	80018fe <rightSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, RIGHT_TIM_CC);
 80018be:	2102      	movs	r1, #2
 80018c0:	4810      	ldr	r0, [pc, #64]	; (8001904 <rightSensorCaptureHandler+0x58>)
 80018c2:	f7ff f8c1 	bl	8000a48 <TIM_ClearITPendingBit>

		if(RightSensorCaptureStruc.captureStep == 0)
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <rightSensorCaptureHandler+0x5c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d109      	bne.n	80018e2 <rightSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			RightSensorCaptureStruc.risingTimeCapturing = RIGHT_TIM_GETCAPTURE;
 80018ce:	480d      	ldr	r0, [pc, #52]	; (8001904 <rightSensorCaptureHandler+0x58>)
 80018d0:	f7fe ffd4 	bl	800087c <TIM_GetCapture1>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <rightSensorCaptureHandler+0x5c>)
 80018d8:	605a      	str	r2, [r3, #4]
			RightSensorCaptureStruc.captureStep = 1;
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <rightSensorCaptureHandler+0x5c>)
 80018dc:	2201      	movs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			RightSensorCaptureStruc.fallingTime = RIGHT_TIM_GETCAPTURE;
			RightSensorCaptureStruc.risingTime = RightSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 80018e0:	e00d      	b.n	80018fe <rightSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			RightSensorCaptureStruc.risingTimeCapturing = RIGHT_TIM_GETCAPTURE;
			RightSensorCaptureStruc.captureStep = 1;
		}
		else if(RightSensorCaptureStruc.captureStep == 1)
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <rightSensorCaptureHandler+0x5c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d109      	bne.n	80018fe <rightSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			RightSensorCaptureStruc.fallingTime = RIGHT_TIM_GETCAPTURE;
 80018ea:	4806      	ldr	r0, [pc, #24]	; (8001904 <rightSensorCaptureHandler+0x58>)
 80018ec:	f7fe ffc6 	bl	800087c <TIM_GetCapture1>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <rightSensorCaptureHandler+0x5c>)
 80018f4:	60da      	str	r2, [r3, #12]
			RightSensorCaptureStruc.risingTime = RightSensorCaptureStruc.risingTimeCapturing;
 80018f6:	4b04      	ldr	r3, [pc, #16]	; (8001908 <rightSensorCaptureHandler+0x5c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	4a03      	ldr	r2, [pc, #12]	; (8001908 <rightSensorCaptureHandler+0x5c>)
 80018fc:	6093      	str	r3, [r2, #8]
		}
	}
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40000400 	.word	0x40000400
 8001908:	20000080 	.word	0x20000080

0800190c <forwardSensorCaptureHandler>:
//meranie dlzky impulzu lavy senzor
void forwardSensorCaptureHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, FORWARD_TIM_CC) != RESET)
 8001910:	2110      	movs	r1, #16
 8001912:	4814      	ldr	r0, [pc, #80]	; (8001964 <forwardSensorCaptureHandler+0x58>)
 8001914:	f7ff f86e 	bl	80009f4 <TIM_GetITStatus>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d01f      	beq.n	800195e <forwardSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, FORWARD_TIM_CC);
 800191e:	2110      	movs	r1, #16
 8001920:	4810      	ldr	r0, [pc, #64]	; (8001964 <forwardSensorCaptureHandler+0x58>)
 8001922:	f7ff f891 	bl	8000a48 <TIM_ClearITPendingBit>

		if(ForwardSensorCaptureStruc.captureStep == 0)
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <forwardSensorCaptureHandler+0x5c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <forwardSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			ForwardSensorCaptureStruc.risingTimeCapturing = FORWARD_TIM_GETCAPTURE;
 800192e:	480d      	ldr	r0, [pc, #52]	; (8001964 <forwardSensorCaptureHandler+0x58>)
 8001930:	f7fe ffbc 	bl	80008ac <TIM_GetCapture4>
 8001934:	4602      	mov	r2, r0
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <forwardSensorCaptureHandler+0x5c>)
 8001938:	605a      	str	r2, [r3, #4]
			ForwardSensorCaptureStruc.captureStep = 1;
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <forwardSensorCaptureHandler+0x5c>)
 800193c:	2201      	movs	r2, #1
 800193e:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			ForwardSensorCaptureStruc.fallingTime = FORWARD_TIM_GETCAPTURE;
			ForwardSensorCaptureStruc.risingTime = ForwardSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 8001940:	e00d      	b.n	800195e <forwardSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			ForwardSensorCaptureStruc.risingTimeCapturing = FORWARD_TIM_GETCAPTURE;
			ForwardSensorCaptureStruc.captureStep = 1;
		}
		else if(ForwardSensorCaptureStruc.captureStep == 1)
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <forwardSensorCaptureHandler+0x5c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d109      	bne.n	800195e <forwardSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			ForwardSensorCaptureStruc.fallingTime = FORWARD_TIM_GETCAPTURE;
 800194a:	4806      	ldr	r0, [pc, #24]	; (8001964 <forwardSensorCaptureHandler+0x58>)
 800194c:	f7fe ffae 	bl	80008ac <TIM_GetCapture4>
 8001950:	4602      	mov	r2, r0
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <forwardSensorCaptureHandler+0x5c>)
 8001954:	60da      	str	r2, [r3, #12]
			ForwardSensorCaptureStruc.risingTime = ForwardSensorCaptureStruc.risingTimeCapturing;
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <forwardSensorCaptureHandler+0x5c>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4a03      	ldr	r2, [pc, #12]	; (8001968 <forwardSensorCaptureHandler+0x5c>)
 800195c:	6093      	str	r3, [r2, #8]
		}
	}
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40000400 	.word	0x40000400
 8001968:	200000a0 	.word	0x200000a0

0800196c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800196c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001970:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001972:	e003      	b.n	800197c <LoopCopyDataInit>

08001974 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8001976:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001978:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800197a:	3104      	adds	r1, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800197c:	480b      	ldr	r0, [pc, #44]	; (80019ac <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8001980:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001982:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001984:	d3f6      	bcc.n	8001974 <CopyDataInit>
  ldr r2, =_sbss
 8001986:	4a0b      	ldr	r2, [pc, #44]	; (80019b4 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8001988:	e002      	b.n	8001990 <LoopFillZerobss>

0800198a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800198c:	f842 3b04 	str.w	r3, [r2], #4

08001990 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8001992:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001994:	d3f9      	bcc.n	800198a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001996:	f000 f841 	bl	8001a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800199a:	f000 f903 	bl	8001ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800199e:	f7ff fc55 	bl	800124c <main>
  bx lr
 80019a2:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019a4:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80019a8:	08001c10 	.word	0x08001c10
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80019ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80019b0:	2000001c 	.word	0x2000001c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80019b4:	20000020 	.word	0x20000020
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 80019b8:	200000b4 	.word	0x200000b4

080019bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019bc:	e7fe      	b.n	80019bc <ADC1_IRQHandler>
	...

080019c0 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80019d0:	e7fe      	b.n	80019d0 <HardFault_Handler+0x4>
 80019d2:	bf00      	nop

080019d4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80019d8:	e7fe      	b.n	80019d8 <MemManage_Handler+0x4>
 80019da:	bf00      	nop

080019dc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80019e0:	e7fe      	b.n	80019e0 <BusFault_Handler+0x4>
 80019e2:	bf00      	nop

080019e4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80019e8:	e7fe      	b.n	80019e8 <UsageFault_Handler+0x4>
 80019ea:	bf00      	nop

080019ec <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001a20:	4a15      	ldr	r2, [pc, #84]	; (8001a78 <SystemInit+0x5c>)
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <SystemInit+0x5c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001a2c:	4912      	ldr	r1, [pc, #72]	; (8001a78 <SystemInit+0x5c>)
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <SystemInit+0x5c>)
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <SystemInit+0x60>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001a38:	4a0f      	ldr	r2, [pc, #60]	; (8001a78 <SystemInit+0x5c>)
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <SystemInit+0x5c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001a42:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001a46:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a48:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <SystemInit+0x5c>)
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <SystemInit+0x5c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a52:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001a54:	4a08      	ldr	r2, [pc, #32]	; (8001a78 <SystemInit+0x5c>)
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <SystemInit+0x5c>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001a5e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SystemInit+0x5c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8001a66:	f000 f80d 	bl	8001a84 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <SystemInit+0x64>)
 8001a6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a70:	609a      	str	r2, [r3, #8]
#endif
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	88ffc00c 	.word	0x88ffc00c
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001a92:	4a41      	ldr	r2, [pc, #260]	; (8001b98 <SetSysClock+0x114>)
 8001a94:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <SetSysClock+0x114>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001a9e:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <SetSysClock+0x114>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d103      	bne.n	8001abc <SetSysClock+0x38>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001aba:	d1f0      	bne.n	8001a9e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001abc:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <SetSysClock+0x114>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	e001      	b.n	8001ad2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d15a      	bne.n	8001b8e <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001ad8:	4a30      	ldr	r2, [pc, #192]	; (8001b9c <SetSysClock+0x118>)
 8001ada:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <SetSysClock+0x118>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f043 0304 	orr.w	r3, r3, #4
 8001ae2:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8001ae4:	4a2d      	ldr	r2, [pc, #180]	; (8001b9c <SetSysClock+0x118>)
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <SetSysClock+0x118>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f043 0302 	orr.w	r3, r3, #2
 8001aee:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8001af0:	4a2a      	ldr	r2, [pc, #168]	; (8001b9c <SetSysClock+0x118>)
 8001af2:	4b2a      	ldr	r3, [pc, #168]	; (8001b9c <SetSysClock+0x118>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001afc:	4a26      	ldr	r2, [pc, #152]	; (8001b98 <SetSysClock+0x114>)
 8001afe:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <SetSysClock+0x114>)
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b06:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8001b08:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <SetSysClock+0x11c>)
 8001b0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b0e:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8001b10:	bf00      	nop
 8001b12:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <SetSysClock+0x11c>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f9      	bne.n	8001b12 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <SetSysClock+0x114>)
 8001b20:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <SetSysClock+0x114>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001b26:	4a1c      	ldr	r2, [pc, #112]	; (8001b98 <SetSysClock+0x114>)
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <SetSysClock+0x114>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001b2e:	4a1a      	ldr	r2, [pc, #104]	; (8001b98 <SetSysClock+0x114>)
 8001b30:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <SetSysClock+0x114>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8001b36:	4a18      	ldr	r2, [pc, #96]	; (8001b98 <SetSysClock+0x114>)
 8001b38:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <SetSysClock+0x114>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001b40:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8001b42:	4a15      	ldr	r2, [pc, #84]	; (8001b98 <SetSysClock+0x114>)
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <SetSysClock+0x114>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8001b4c:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <SetSysClock+0x114>)
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <SetSysClock+0x114>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b58:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001b5a:	bf00      	nop
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <SetSysClock+0x114>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f9      	beq.n	8001b5c <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001b68:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <SetSysClock+0x114>)
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <SetSysClock+0x114>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f023 0303 	bic.w	r3, r3, #3
 8001b72:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001b74:	4a08      	ldr	r2, [pc, #32]	; (8001b98 <SetSysClock+0x114>)
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <SetSysClock+0x114>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f043 0303 	orr.w	r3, r3, #3
 8001b7e:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001b80:	bf00      	nop
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <SetSysClock+0x114>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d1f9      	bne.n	8001b82 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40023c00 	.word	0x40023c00
 8001ba0:	40007000 	.word	0x40007000

08001ba4 <__libc_init_array>:
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <__libc_init_array+0x3c>)
 8001ba6:	b570      	push	{r4, r5, r6, lr}
 8001ba8:	461e      	mov	r6, r3
 8001baa:	4c0e      	ldr	r4, [pc, #56]	; (8001be4 <__libc_init_array+0x40>)
 8001bac:	2500      	movs	r5, #0
 8001bae:	1ae4      	subs	r4, r4, r3
 8001bb0:	10a4      	asrs	r4, r4, #2
 8001bb2:	42a5      	cmp	r5, r4
 8001bb4:	d004      	beq.n	8001bc0 <__libc_init_array+0x1c>
 8001bb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bba:	4798      	blx	r3
 8001bbc:	3501      	adds	r5, #1
 8001bbe:	e7f8      	b.n	8001bb2 <__libc_init_array+0xe>
 8001bc0:	f000 f816 	bl	8001bf0 <_init>
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <__libc_init_array+0x44>)
 8001bc6:	4c09      	ldr	r4, [pc, #36]	; (8001bec <__libc_init_array+0x48>)
 8001bc8:	461e      	mov	r6, r3
 8001bca:	1ae4      	subs	r4, r4, r3
 8001bcc:	10a4      	asrs	r4, r4, #2
 8001bce:	2500      	movs	r5, #0
 8001bd0:	42a5      	cmp	r5, r4
 8001bd2:	d004      	beq.n	8001bde <__libc_init_array+0x3a>
 8001bd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bd8:	4798      	blx	r3
 8001bda:	3501      	adds	r5, #1
 8001bdc:	e7f8      	b.n	8001bd0 <__libc_init_array+0x2c>
 8001bde:	bd70      	pop	{r4, r5, r6, pc}
 8001be0:	08001c08 	.word	0x08001c08
 8001be4:	08001c08 	.word	0x08001c08
 8001be8:	08001c08 	.word	0x08001c08
 8001bec:	08001c0c 	.word	0x08001c0c

08001bf0 <_init>:
 8001bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bf2:	bf00      	nop
 8001bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bf6:	bc08      	pop	{r3}
 8001bf8:	469e      	mov	lr, r3
 8001bfa:	4770      	bx	lr

08001bfc <_fini>:
 8001bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bfe:	bf00      	nop
 8001c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c02:	bc08      	pop	{r3}
 8001c04:	469e      	mov	lr, r3
 8001c06:	4770      	bx	lr
