
vrs_projekt_bug0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000109c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080011d8  080011e0  000111e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080011d8  080011d8  000111d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080011dc  080011dc  000111dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000111e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000dc  20000000  080011e0  00020000  2**3
                  ALLOC
  7 ._user_heap_stack 00000400  200000dc  080011e0  000200dc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000111e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006760  00000000  00000000  00011209  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000111d  00000000  00000000  00017969  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000850  00000000  00000000  00018a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b8  00000000  00000000  000192d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002b30  00000000  00000000  00019a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002587  00000000  00000000  0001c5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0001eb47  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000224c  00000000  00000000  0001ebc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00020e14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000000 	.word	0x20000000
 8000158:	00000000 	.word	0x00000000
 800015c:	080011c0 	.word	0x080011c0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000004 	.word	0x20000004
 8000178:	080011c0 	.word	0x080011c0

0800017c <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800017c:	b480      	push	{r7}
 800017e:	b087      	sub	sp, #28
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000186:	2300      	movs	r3, #0
 8000188:	617b      	str	r3, [r7, #20]
 800018a:	2300      	movs	r3, #0
 800018c:	613b      	str	r3, [r7, #16]
 800018e:	2300      	movs	r3, #0
 8000190:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000192:	2300      	movs	r3, #0
 8000194:	617b      	str	r3, [r7, #20]
 8000196:	e07e      	b.n	8000296 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000198:	2201      	movs	r2, #1
 800019a:	697b      	ldr	r3, [r7, #20]
 800019c:	fa02 f303 	lsl.w	r3, r2, r3
 80001a0:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001a2:	683b      	ldr	r3, [r7, #0]
 80001a4:	681a      	ldr	r2, [r3, #0]
 80001a6:	693b      	ldr	r3, [r7, #16]
 80001a8:	4013      	ands	r3, r2
 80001aa:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80001ac:	68fa      	ldr	r2, [r7, #12]
 80001ae:	693b      	ldr	r3, [r7, #16]
 80001b0:	429a      	cmp	r2, r3
 80001b2:	d16d      	bne.n	8000290 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	681a      	ldr	r2, [r3, #0]
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	005b      	lsls	r3, r3, #1
 80001bc:	2103      	movs	r1, #3
 80001be:	fa01 f303 	lsl.w	r3, r1, r3
 80001c2:	43db      	mvns	r3, r3
 80001c4:	401a      	ands	r2, r3
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	681a      	ldr	r2, [r3, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]
 80001d0:	791b      	ldrb	r3, [r3, #4]
 80001d2:	4619      	mov	r1, r3
 80001d4:	697b      	ldr	r3, [r7, #20]
 80001d6:	005b      	lsls	r3, r3, #1
 80001d8:	fa01 f303 	lsl.w	r3, r1, r3
 80001dc:	431a      	orrs	r2, r3
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	791b      	ldrb	r3, [r3, #4]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d003      	beq.n	80001f2 <GPIO_Init+0x76>
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	791b      	ldrb	r3, [r3, #4]
 80001ee:	2b02      	cmp	r3, #2
 80001f0:	d136      	bne.n	8000260 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	689a      	ldr	r2, [r3, #8]
 80001f6:	697b      	ldr	r3, [r7, #20]
 80001f8:	005b      	lsls	r3, r3, #1
 80001fa:	2103      	movs	r1, #3
 80001fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000200:	43db      	mvns	r3, r3
 8000202:	401a      	ands	r2, r3
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	689a      	ldr	r2, [r3, #8]
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	795b      	ldrb	r3, [r3, #5]
 8000210:	4619      	mov	r1, r3
 8000212:	697b      	ldr	r3, [r7, #20]
 8000214:	005b      	lsls	r3, r3, #1
 8000216:	fa01 f303 	lsl.w	r3, r1, r3
 800021a:	431a      	orrs	r2, r3
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	889b      	ldrh	r3, [r3, #4]
 8000224:	b29a      	uxth	r2, r3
 8000226:	697b      	ldr	r3, [r7, #20]
 8000228:	b29b      	uxth	r3, r3
 800022a:	2101      	movs	r1, #1
 800022c:	fa01 f303 	lsl.w	r3, r1, r3
 8000230:	b29b      	uxth	r3, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	b29b      	uxth	r3, r3
 8000236:	4013      	ands	r3, r2
 8000238:	b29a      	uxth	r2, r3
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	889b      	ldrh	r3, [r3, #4]
 8000242:	b29b      	uxth	r3, r3
 8000244:	b21a      	sxth	r2, r3
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	799b      	ldrb	r3, [r3, #6]
 800024a:	4619      	mov	r1, r3
 800024c:	697b      	ldr	r3, [r7, #20]
 800024e:	b29b      	uxth	r3, r3
 8000250:	fa01 f303 	lsl.w	r3, r1, r3
 8000254:	b21b      	sxth	r3, r3
 8000256:	4313      	orrs	r3, r2
 8000258:	b21b      	sxth	r3, r3
 800025a:	b29a      	uxth	r2, r3
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	68da      	ldr	r2, [r3, #12]
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	b29b      	uxth	r3, r3
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	2103      	movs	r1, #3
 800026c:	fa01 f303 	lsl.w	r3, r1, r3
 8000270:	43db      	mvns	r3, r3
 8000272:	401a      	ands	r2, r3
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	68da      	ldr	r2, [r3, #12]
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	79db      	ldrb	r3, [r3, #7]
 8000280:	4619      	mov	r1, r3
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	fa01 f303 	lsl.w	r3, r1, r3
 800028a:	431a      	orrs	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	3301      	adds	r3, #1
 8000294:	617b      	str	r3, [r7, #20]
 8000296:	697b      	ldr	r3, [r7, #20]
 8000298:	2b0f      	cmp	r3, #15
 800029a:	f67f af7d 	bls.w	8000198 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800029e:	bf00      	nop
 80002a0:	371c      	adds	r7, #28
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr

080002a8 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: Specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	460b      	mov	r3, r1
 80002b2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80002b4:	2300      	movs	r3, #0
 80002b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	8a9b      	ldrh	r3, [r3, #20]
 80002bc:	b29a      	uxth	r2, r3
 80002be:	887b      	ldrh	r3, [r7, #2]
 80002c0:	4013      	ands	r3, r2
 80002c2:	b29b      	uxth	r3, r3
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d002      	beq.n	80002ce <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 80002c8:	2301      	movs	r3, #1
 80002ca:	73fb      	strb	r3, [r7, #15]
 80002cc:	e001      	b.n	80002d2 <GPIO_ReadOutputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80002ce:	2300      	movs	r3, #0
 80002d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80002d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	460b      	mov	r3, r1
 80002ea:	807b      	strh	r3, [r7, #2]
 80002ec:	4613      	mov	r3, r2
 80002ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 80002f0:	787b      	ldrb	r3, [r7, #1]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d003      	beq.n	80002fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	887a      	ldrh	r2, [r7, #2]
 80002fa:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 80002fc:	e002      	b.n	8000304 <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	887a      	ldrh	r2, [r7, #2]
 8000302:	835a      	strh	r2, [r3, #26]
  }
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..H) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	460b      	mov	r3, r1
 800031a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	8a9b      	ldrh	r3, [r3, #20]
 8000320:	b29a      	uxth	r2, r3
 8000322:	887b      	ldrh	r3, [r7, #2]
 8000324:	4053      	eors	r3, r2
 8000326:	b29a      	uxth	r2, r3
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	829a      	strh	r2, [r3, #20]
}
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	bc80      	pop	{r7}
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop

08000338 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	460b      	mov	r3, r1
 8000342:	807b      	strh	r3, [r7, #2]
 8000344:	4613      	mov	r3, r2
 8000346:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800034c:	2300      	movs	r3, #0
 800034e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000350:	787a      	ldrb	r2, [r7, #1]
 8000352:	887b      	ldrh	r3, [r7, #2]
 8000354:	f003 0307 	and.w	r3, r3, #7
 8000358:	009b      	lsls	r3, r3, #2
 800035a:	fa02 f303 	lsl.w	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000360:	887b      	ldrh	r3, [r7, #2]
 8000362:	08db      	lsrs	r3, r3, #3
 8000364:	b29b      	uxth	r3, r3
 8000366:	4618      	mov	r0, r3
 8000368:	887b      	ldrh	r3, [r7, #2]
 800036a:	08db      	lsrs	r3, r3, #3
 800036c:	b29b      	uxth	r3, r3
 800036e:	461a      	mov	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	3208      	adds	r2, #8
 8000374:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000378:	887b      	ldrh	r3, [r7, #2]
 800037a:	f003 0307 	and.w	r3, r3, #7
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	210f      	movs	r1, #15
 8000382:	fa01 f303 	lsl.w	r3, r1, r3
 8000386:	43db      	mvns	r3, r3
 8000388:	ea02 0103 	and.w	r1, r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	f100 0208 	add.w	r2, r0, #8
 8000392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000396:	887b      	ldrh	r3, [r7, #2]
 8000398:	08db      	lsrs	r3, r3, #3
 800039a:	b29b      	uxth	r3, r3
 800039c:	461a      	mov	r2, r3
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	3208      	adds	r2, #8
 80003a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	4313      	orrs	r3, r2
 80003aa:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80003ac:	887b      	ldrh	r3, [r7, #2]
 80003ae:	08db      	lsrs	r3, r3, #3
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	461a      	mov	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	3208      	adds	r2, #8
 80003b8:	68b9      	ldr	r1, [r7, #8]
 80003ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80003be:	bf00      	nop
 80003c0:	3714      	adds	r7, #20
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr

080003c8 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	460b      	mov	r3, r1
 80003d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80003d4:	78fb      	ldrb	r3, [r7, #3]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d006      	beq.n	80003e8 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80003da:	4909      	ldr	r1, [pc, #36]	; (8000400 <RCC_AHBPeriphClockCmd+0x38>)
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <RCC_AHBPeriphClockCmd+0x38>)
 80003de:	69da      	ldr	r2, [r3, #28]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4313      	orrs	r3, r2
 80003e4:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80003e6:	e006      	b.n	80003f6 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80003e8:	4905      	ldr	r1, [pc, #20]	; (8000400 <RCC_AHBPeriphClockCmd+0x38>)
 80003ea:	4b05      	ldr	r3, [pc, #20]	; (8000400 <RCC_AHBPeriphClockCmd+0x38>)
 80003ec:	69da      	ldr	r2, [r3, #28]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	43db      	mvns	r3, r3
 80003f2:	4013      	ands	r3, r2
 80003f4:	61cb      	str	r3, [r1, #28]
  }
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	40023800 	.word	0x40023800

08000404 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	460b      	mov	r3, r1
 800040e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000410:	78fb      	ldrb	r3, [r7, #3]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d006      	beq.n	8000424 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000416:	4909      	ldr	r1, [pc, #36]	; (800043c <RCC_APB1PeriphClockCmd+0x38>)
 8000418:	4b08      	ldr	r3, [pc, #32]	; (800043c <RCC_APB1PeriphClockCmd+0x38>)
 800041a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4313      	orrs	r3, r2
 8000420:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000422:	e006      	b.n	8000432 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000424:	4905      	ldr	r1, [pc, #20]	; (800043c <RCC_APB1PeriphClockCmd+0x38>)
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <RCC_APB1PeriphClockCmd+0x38>)
 8000428:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	43db      	mvns	r3, r3
 800042e:	4013      	ands	r3, r2
 8000430:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40023800 	.word	0x40023800

08000440 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	881b      	ldrh	r3, [r3, #0]
 8000452:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800045a:	d00b      	beq.n	8000474 <TIM_TimeBaseInit+0x34>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a1c      	ldr	r2, [pc, #112]	; (80004d0 <TIM_TimeBaseInit+0x90>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d007      	beq.n	8000474 <TIM_TimeBaseInit+0x34>
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4a1b      	ldr	r2, [pc, #108]	; (80004d4 <TIM_TimeBaseInit+0x94>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d003      	beq.n	8000474 <TIM_TimeBaseInit+0x34>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a1a      	ldr	r2, [pc, #104]	; (80004d8 <TIM_TimeBaseInit+0x98>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d108      	bne.n	8000486 <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000474:	89fb      	ldrh	r3, [r7, #14]
 8000476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800047a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	885a      	ldrh	r2, [r3, #2]
 8000480:	89fb      	ldrh	r3, [r7, #14]
 8000482:	4313      	orrs	r3, r2
 8000484:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a14      	ldr	r2, [pc, #80]	; (80004dc <TIM_TimeBaseInit+0x9c>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d00c      	beq.n	80004a8 <TIM_TimeBaseInit+0x68>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a13      	ldr	r2, [pc, #76]	; (80004e0 <TIM_TimeBaseInit+0xa0>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d008      	beq.n	80004a8 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000496:	89fb      	ldrh	r3, [r7, #14]
 8000498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800049c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	891a      	ldrh	r2, [r3, #8]
 80004a2:	89fb      	ldrh	r3, [r7, #14]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	89fa      	ldrh	r2, [r7, #14]
 80004ac:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	685a      	ldr	r2, [r3, #4]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	881a      	ldrh	r2, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2201      	movs	r2, #1
 80004c2:	829a      	strh	r2, [r3, #20]
}
 80004c4:	bf00      	nop
 80004c6:	3714      	adds	r7, #20
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40000400 	.word	0x40000400
 80004d4:	40000800 	.word	0x40000800
 80004d8:	40000c00 	.word	0x40000c00
 80004dc:	40001000 	.word	0x40001000
 80004e0:	40001400 	.word	0x40001400

080004e4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	460b      	mov	r3, r1
 80004ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80004f0:	78fb      	ldrb	r3, [r7, #3]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d008      	beq.n	8000508 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	881b      	ldrh	r3, [r3, #0]
 80004fa:	b29b      	uxth	r3, r3
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	b29a      	uxth	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000506:	e007      	b.n	8000518 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	881b      	ldrh	r3, [r3, #0]
 800050c:	b29b      	uxth	r3, r3
 800050e:	f023 0301 	bic.w	r3, r3, #1
 8000512:	b29a      	uxth	r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	801a      	strh	r2, [r3, #0]
  }
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <TIM_OC3Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	81fb      	strh	r3, [r7, #14]
 8000532:	2300      	movs	r3, #0
 8000534:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	8c1b      	ldrh	r3, [r3, #32]
 800053a:	b29b      	uxth	r3, r3
 800053c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000540:	b29a      	uxth	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	8c1b      	ldrh	r3, [r3, #32]
 800054a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	8b9b      	ldrh	r3, [r3, #28]
 8000550:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 8000552:	89fb      	ldrh	r3, [r7, #14]
 8000554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000558:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	881a      	ldrh	r2, [r3, #0]
 800055e:	89fb      	ldrh	r3, [r7, #14]
 8000560:	4313      	orrs	r3, r2
 8000562:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8000564:	89bb      	ldrh	r3, [r7, #12]
 8000566:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800056a:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	891b      	ldrh	r3, [r3, #8]
 8000570:	021b      	lsls	r3, r3, #8
 8000572:	b29a      	uxth	r2, r3
 8000574:	89bb      	ldrh	r3, [r7, #12]
 8000576:	4313      	orrs	r3, r2
 8000578:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	885b      	ldrh	r3, [r3, #2]
 800057e:	021b      	lsls	r3, r3, #8
 8000580:	b29a      	uxth	r2, r3
 8000582:	89bb      	ldrh	r3, [r7, #12]
 8000584:	4313      	orrs	r3, r2
 8000586:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	685a      	ldr	r2, [r3, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	89fa      	ldrh	r2, [r7, #14]
 8000594:	839a      	strh	r2, [r3, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	89ba      	ldrh	r2, [r7, #12]
 800059a:	841a      	strh	r2, [r3, #32]
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <TIM_OC4Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	81fb      	strh	r3, [r7, #14]
 80005b6:	2300      	movs	r3, #0
 80005b8:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	8c1b      	ldrh	r3, [r3, #32]
 80005be:	b29b      	uxth	r3, r3
 80005c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	8c1b      	ldrh	r3, [r3, #32]
 80005ce:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	8b9b      	ldrh	r3, [r3, #28]
 80005d4:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 80005d6:	89fb      	ldrh	r3, [r7, #14]
 80005d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80005dc:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	021b      	lsls	r3, r3, #8
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	89fb      	ldrh	r3, [r7, #14]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 80005ec:	89bb      	ldrh	r3, [r7, #12]
 80005ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80005f2:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	891b      	ldrh	r3, [r3, #8]
 80005f8:	031b      	lsls	r3, r3, #12
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	89bb      	ldrh	r3, [r7, #12]
 80005fe:	4313      	orrs	r3, r2
 8000600:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	885b      	ldrh	r3, [r3, #2]
 8000606:	031b      	lsls	r3, r3, #12
 8000608:	b29a      	uxth	r2, r3
 800060a:	89bb      	ldrh	r3, [r7, #12]
 800060c:	4313      	orrs	r3, r2
 800060e:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	685a      	ldr	r2, [r3, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	89fa      	ldrh	r2, [r7, #14]
 800061c:	839a      	strh	r2, [r3, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	89ba      	ldrh	r2, [r7, #12]
 8000622:	841a      	strh	r2, [r3, #32]
}
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	8b9b      	ldrh	r3, [r3, #28]
 8000644:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8000646:	89fb      	ldrh	r3, [r7, #14]
 8000648:	f023 0308 	bic.w	r3, r3, #8
 800064c:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800064e:	89fa      	ldrh	r2, [r7, #14]
 8000650:	887b      	ldrh	r3, [r7, #2]
 8000652:	4313      	orrs	r3, r2
 8000654:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	89fa      	ldrh	r2, [r7, #14]
 800065a:	839a      	strh	r2, [r3, #28]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	460b      	mov	r3, r1
 8000672:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	8b9b      	ldrh	r3, [r3, #28]
 800067c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 800067e:	89fb      	ldrh	r3, [r7, #14]
 8000680:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000684:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8000686:	887b      	ldrh	r3, [r7, #2]
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	b29a      	uxth	r2, r3
 800068c:	89fb      	ldrh	r3, [r7, #14]
 800068e:	4313      	orrs	r3, r2
 8000690:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	89fa      	ldrh	r2, [r7, #14]
 8000696:	839a      	strh	r2, [r3, #28]
}
 8000698:	bf00      	nop
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 2, 3, 4, 5, 9, 10 or 11 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 2, 3, 4 or 5 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop

080006d4 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 2, 3, 4 or 5 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	81bb      	strh	r3, [r7, #12]
 8000700:	2300      	movs	r3, #0
 8000702:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	8a1b      	ldrh	r3, [r3, #16]
 8000708:	b29a      	uxth	r2, r3
 800070a:	887b      	ldrh	r3, [r7, #2]
 800070c:	4013      	ands	r3, r2
 800070e:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	899b      	ldrh	r3, [r3, #12]
 8000714:	b29a      	uxth	r2, r3
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	4013      	ands	r3, r2
 800071a:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800071c:	89bb      	ldrh	r3, [r7, #12]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d005      	beq.n	800072e <TIM_GetITStatus+0x42>
 8000722:	897b      	ldrh	r3, [r7, #10]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d002      	beq.n	800072e <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000728:	2301      	movs	r3, #1
 800072a:	73fb      	strb	r3, [r7, #15]
 800072c:	e001      	b.n	8000732 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000732:	7bfb      	ldrb	r3, [r7, #15]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800074c:	887b      	ldrh	r3, [r7, #2]
 800074e:	43db      	mvns	r3, r3
 8000750:	b29a      	uxth	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	821a      	strh	r2, [r3, #16]
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None.
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800076c:	887b      	ldrh	r3, [r7, #2]
 800076e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000772:	b29a      	uxth	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	809a      	strh	r2, [r3, #4]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop

08000784 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	889b      	ldrh	r3, [r3, #4]
 8000790:	b29b      	uxth	r3, r3
 8000792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000796:	b29b      	uxth	r3, r3
}
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop

080007a4 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag.
  *     @arg USART_FLAG_PE:   Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	887b      	ldrh	r3, [r7, #2]
 80007bc:	4013      	ands	r3, r2
 80007be:	b29b      	uxth	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d002      	beq.n	80007ca <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80007c4:	2301      	movs	r3, #1
 80007c6:	73fb      	strb	r3, [r7, #15]
 80007c8:	e001      	b.n	80007ce <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop

080007dc <USART_ClearFlag>:
  * @note TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 80007e8:	887b      	ldrh	r3, [r7, #2]
 80007ea:	43db      	mvns	r3, r3
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	801a      	strh	r2, [r3, #0]
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000818:	887b      	ldrh	r3, [r7, #2]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	095b      	lsrs	r3, r3, #5
 800081e:	b2db      	uxtb	r3, r3
 8000820:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000822:	887b      	ldrh	r3, [r7, #2]
 8000824:	f003 031f 	and.w	r3, r3, #31
 8000828:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800082a:	2201      	movs	r2, #1
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d107      	bne.n	800084a <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	899b      	ldrh	r3, [r3, #12]
 800083e:	b29b      	uxth	r3, r3
 8000840:	461a      	mov	r2, r3
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	4013      	ands	r3, r2
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	e011      	b.n	800086e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d107      	bne.n	8000860 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	8a1b      	ldrh	r3, [r3, #16]
 8000854:	b29b      	uxth	r3, r3
 8000856:	461a      	mov	r2, r3
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	4013      	ands	r3, r2
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	e006      	b.n	800086e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	8a9b      	ldrh	r3, [r3, #20]
 8000864:	b29b      	uxth	r3, r3
 8000866:	461a      	mov	r2, r3
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	4013      	ands	r3, r2
 800086c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800086e:	887b      	ldrh	r3, [r7, #2]
 8000870:	0a1b      	lsrs	r3, r3, #8
 8000872:	b29b      	uxth	r3, r3
 8000874:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000876:	2201      	movs	r2, #1
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	b29b      	uxth	r3, r3
 8000886:	461a      	mov	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4013      	ands	r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d005      	beq.n	80008a0 <USART_GetITStatus+0xa4>
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800089a:	2301      	movs	r3, #1
 800089c:	74fb      	strb	r3, [r7, #19]
 800089e:	e001      	b.n	80008a4 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80008a4:	7cfb      	ldrb	r3, [r7, #19]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	371c      	adds	r7, #28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <USART_ClearITPendingBit>:
  * @note TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 80008bc:	2300      	movs	r3, #0
 80008be:	81fb      	strh	r3, [r7, #14]
 80008c0:	2300      	movs	r3, #0
 80008c2:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 80008c4:	887b      	ldrh	r3, [r7, #2]
 80008c6:	0a1b      	lsrs	r3, r3, #8
 80008c8:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80008ca:	89fb      	ldrh	r3, [r7, #14]
 80008cc:	2201      	movs	r2, #1
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80008d4:	89bb      	ldrh	r3, [r7, #12]
 80008d6:	43db      	mvns	r3, r3
 80008d8:	b29a      	uxth	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	801a      	strh	r2, [r3, #0]
}
 80008de:	bf00      	nop
 80008e0:	3714      	adds	r7, #20
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <USART2_IRQHandler>:
void PutcUART2(char ch){
	USART_SendData(USART2, (uint8_t) ch);

}

void USART2_IRQHandler(void){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0

	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 80008ee:	f240 5125 	movw	r1, #1317	; 0x525
 80008f2:	481b      	ldr	r0, [pc, #108]	; (8000960 <USART2_IRQHandler+0x78>)
 80008f4:	f7ff ff82 	bl	80007fc <USART_GetITStatus>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d02c      	beq.n	8000958 <USART2_IRQHandler+0x70>
	{
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 80008fe:	f240 5125 	movw	r1, #1317	; 0x525
 8000902:	4817      	ldr	r0, [pc, #92]	; (8000960 <USART2_IRQHandler+0x78>)
 8000904:	f7ff ffd4 	bl	80008b0 <USART_ClearITPendingBit>
		char znak = USART_ReceiveData(USART2);
 8000908:	4815      	ldr	r0, [pc, #84]	; (8000960 <USART2_IRQHandler+0x78>)
 800090a:	f7ff ff3b 	bl	8000784 <USART_ReceiveData>
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]

		//ak v predoslom byte bola poziadavka na zmenu ziadaneho uhla,
		//tak ciel zmeni ak dalsi byte je v zadanom rozsahu
		if (change_goal_request){
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <USART2_IRQHandler+0x7c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d008      	beq.n	800092c <USART2_IRQHandler+0x44>

			if (znak >= 0 && znak <= GOAL_RANGE)
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b08      	cmp	r3, #8
 800091e:	d802      	bhi.n	8000926 <USART2_IRQHandler+0x3e>
			goal_bearing = znak;
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	4a11      	ldr	r2, [pc, #68]	; (8000968 <USART2_IRQHandler+0x80>)
 8000924:	6013      	str	r3, [r2, #0]

			change_goal_request = 0;
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <USART2_IRQHandler+0x7c>)
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
		}

		switch (znak){
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	2baa      	cmp	r3, #170	; 0xaa
 8000930:	d002      	beq.n	8000938 <USART2_IRQHandler+0x50>
 8000932:	2bbb      	cmp	r3, #187	; 0xbb
 8000934:	d00c      	beq.n	8000950 <USART2_IRQHandler+0x68>
		if (retazec[counter] != '\0'){
			PutcUART2(retazec[counter]);
			counter++;
		}*/
    }
}
 8000936:	e00f      	b.n	8000958 <USART2_IRQHandler+0x70>
			change_goal_request = 0;
		}

		switch (znak){
		case 0xAA:   // vypinanie/zapinanie pohybu
			if (running)
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <USART2_IRQHandler+0x84>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d003      	beq.n	8000948 <USART2_IRQHandler+0x60>
					running = 0;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <USART2_IRQHandler+0x84>)
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
				else running = 1;
			break;
 8000946:	e007      	b.n	8000958 <USART2_IRQHandler+0x70>

		switch (znak){
		case 0xAA:   // vypinanie/zapinanie pohybu
			if (running)
					running = 0;
				else running = 1;
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <USART2_IRQHandler+0x84>)
 800094a:	2201      	movs	r2, #1
 800094c:	601a      	str	r2, [r3, #0]
			break;
 800094e:	e003      	b.n	8000958 <USART2_IRQHandler+0x70>
		case 0xBB: //poziadavka na zmenu ciela, v dalsom byte sa precita, aky bude novy ciel
			change_goal_request = 1;
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <USART2_IRQHandler+0x7c>)
 8000952:	2201      	movs	r2, #1
 8000954:	601a      	str	r2, [r3, #0]
		if (retazec[counter] != '\0'){
			PutcUART2(retazec[counter]);
			counter++;
		}*/
    }
}
 8000956:	e7ff      	b.n	8000958 <USART2_IRQHandler+0x70>
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40004400 	.word	0x40004400
 8000964:	20000028 	.word	0x20000028
 8000968:	20000020 	.word	0x20000020
 800096c:	20000024 	.word	0x20000024

08000970 <main>:
**
**===========================================================================
*/
int main(void)

{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
/*	init_indicator_LED();
	sensorInit();
	Motor_init();
	inicializaciaPrerusenieUSART();
	inicializaciaUSART();*/
	Motor_init();
 8000976:	f000 f8b7 	bl	8000ae8 <Motor_init>

  /* TODO - Add your application code here */


  /* Infinite loop */
	volatile long i = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
	right_motor_set_speed(10);
 800097e:	200a      	movs	r0, #10
 8000980:	f000 f8ba 	bl	8000af8 <right_motor_set_speed>
	left_motor_set_speed(10);
 8000984:	200a      	movs	r0, #10
 8000986:	f000 f8dd 	bl	8000b44 <left_motor_set_speed>

  while (1)
  {

	  i++;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3301      	adds	r3, #1
 800098e:	607b      	str	r3, [r7, #4]
	  if (i == 1000000)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <main+0x80>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d106      	bne.n	80009a6 <main+0x36>
	  {
			right_motor_set_speed(-10);
 8000998:	f06f 0009 	mvn.w	r0, #9
 800099c:	f000 f8ac 	bl	8000af8 <right_motor_set_speed>
			left_motor_set_speed(10);
 80009a0:	200a      	movs	r0, #10
 80009a2:	f000 f8cf 	bl	8000b44 <left_motor_set_speed>
		//  sensorMessageAll(leftSensorGetDistance(), rightSensorGetDistance(), forwardSensorGetDistance());
	  }
	  if (i == 2000000)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <main+0x84>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d107      	bne.n	80009be <main+0x4e>
	  	  {
	  			right_motor_set_speed(-10);
 80009ae:	f06f 0009 	mvn.w	r0, #9
 80009b2:	f000 f8a1 	bl	8000af8 <right_motor_set_speed>
	  			left_motor_set_speed(-10);
 80009b6:	f06f 0009 	mvn.w	r0, #9
 80009ba:	f000 f8c3 	bl	8000b44 <left_motor_set_speed>
	  		//  sensorMessageAll(leftSensorGetDistance(), rightSensorGetDistance(), forwardSensorGetDistance());
	  	  }

	  if (i == 3000000)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <main+0x88>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d106      	bne.n	80009d4 <main+0x64>
	  	  {
	  			right_motor_set_speed(10);
 80009c6:	200a      	movs	r0, #10
 80009c8:	f000 f896 	bl	8000af8 <right_motor_set_speed>
	  			left_motor_set_speed(-10);
 80009cc:	f06f 0009 	mvn.w	r0, #9
 80009d0:	f000 f8b8 	bl	8000b44 <left_motor_set_speed>

	  		//  sensorMessageAll(leftSensorGetDistance(), rightSensorGetDistance(), forwardSensorGetDistance());
	  	  }
	  if (i == 4000000)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a09      	ldr	r2, [pc, #36]	; (80009fc <main+0x8c>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d1d6      	bne.n	800098a <main+0x1a>
	 	  	  {
	 	  			right_motor_set_speed(10);
 80009dc:	200a      	movs	r0, #10
 80009de:	f000 f88b 	bl	8000af8 <right_motor_set_speed>
	 	  			left_motor_set_speed(10);
 80009e2:	200a      	movs	r0, #10
 80009e4:	f000 f8ae 	bl	8000b44 <left_motor_set_speed>
	 	  			i=0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
	  else stop();*/


	//sendValue();
	//PutcUART2(48);
  }
 80009ec:	e7cd      	b.n	800098a <main+0x1a>
 80009ee:	bf00      	nop
 80009f0:	000f4240 	.word	0x000f4240
 80009f4:	001e8480 	.word	0x001e8480
 80009f8:	002dc6c0 	.word	0x002dc6c0
 80009fc:	003d0900 	.word	0x003d0900

08000a00 <InitializeOutput>:
int volatile counter2=0;
//int volatile counter3=0;

TIM_OCInitTypeDef  TIM_OCInitStructure;
void InitializeOutput()
{GPIO_InitTypeDef GPIO_InitStructure;
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
	/* --------------------------- System Clocks Configuration ---------------------*/
		  /* TIM3 clock enable */
		  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000a06:	2101      	movs	r1, #1
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f7ff fcfb 	bl	8000404 <RCC_APB1PeriphClockCmd>
		  /* GPIOA and GPIOB clock enable */
		  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000a0e:	2101      	movs	r1, #1
 8000a10:	2002      	movs	r0, #2
 8000a12:	f7ff fcd9 	bl	80003c8 <RCC_AHBPeriphClockCmd>

		  /*--------------------------------- GPIO Configuration -------------------------*/

		  /* GPIOB Configuration: Pin 10 and 11 */
		  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10|GPIO_Pin_11;
 8000a16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a1a:	603b      	str	r3, [r7, #0]
		  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	713b      	strb	r3, [r7, #4]
		  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000a20:	2300      	movs	r3, #0
 8000a22:	71bb      	strb	r3, [r7, #6]
		  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	71fb      	strb	r3, [r7, #7]
		  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	717b      	strb	r3, [r7, #5]

		  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4808      	ldr	r0, [pc, #32]	; (8000a54 <InitializeOutput+0x54>)
 8000a32:	f7ff fba3 	bl	800017c <GPIO_Init>
		  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_TIM2);
 8000a36:	2201      	movs	r2, #1
 8000a38:	210a      	movs	r1, #10
 8000a3a:	4806      	ldr	r0, [pc, #24]	; (8000a54 <InitializeOutput+0x54>)
 8000a3c:	f7ff fc7c 	bl	8000338 <GPIO_PinAFConfig>
		  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 8000a40:	2201      	movs	r2, #1
 8000a42:	210b      	movs	r1, #11
 8000a44:	4803      	ldr	r0, [pc, #12]	; (8000a54 <InitializeOutput+0x54>)
 8000a46:	f7ff fc77 	bl	8000338 <GPIO_PinAFConfig>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40020400 	.word	0x40020400

08000a58 <InitializeTimer>:

void InitializeTimer()
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;

	uint16_t pwmvalue = 150;
 8000a5e:	2396      	movs	r3, #150	; 0x96
 8000a60:	83fb      	strh	r3, [r7, #30]
	uint16_t pwmvalueL = 150;
 8000a62:	2396      	movs	r3, #150	; 0x96
 8000a64:	83bb      	strh	r3, [r7, #28]
	uint16_t myperiod = 1000;
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	837b      	strh	r3, [r7, #26]
	uint16_t PrescalerValue = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	833b      	strh	r3, [r7, #24]

	 PrescalerValue = (uint16_t)(16000000/100000) - 1;
 8000a70:	239f      	movs	r3, #159	; 0x9f
 8000a72:	833b      	strh	r3, [r7, #24]
		  /* Time base configuration */
		  TIM_TimeBaseStructure.TIM_Period = myperiod - 1;
 8000a74:	8b7b      	ldrh	r3, [r7, #26]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	613b      	str	r3, [r7, #16]
		  TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 8000a7a:	8b3b      	ldrh	r3, [r7, #24]
 8000a7c:	81bb      	strh	r3, [r7, #12]
		  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	82bb      	strh	r3, [r7, #20]
		  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000a82:	2300      	movs	r3, #0
 8000a84:	81fb      	strh	r3, [r7, #14]

		  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000a90:	f7ff fcd6 	bl	8000440 <TIM_TimeBaseInit>

		  /* PWM1 Mode configuration: Channel3 */
		  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000a94:	2360      	movs	r3, #96	; 0x60
 8000a96:	803b      	strh	r3, [r7, #0]

		  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	807b      	strh	r3, [r7, #2]
		  TIM_OCInitStructure.TIM_Pulse = pwmvalue;
 8000a9c:	8bfb      	ldrh	r3, [r7, #30]
 8000a9e:	607b      	str	r3, [r7, #4]
		  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	813b      	strh	r3, [r7, #8]


		  TIM_OC3Init(TIM2, &TIM_OCInitStructure);//pravy
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000aac:	f7ff fd3a 	bl	8000524 <TIM_OC3Init>

		  TIM_OCInitStructure.TIM_Pulse = pwmvalueL;//lavy
 8000ab0:	8bbb      	ldrh	r3, [r7, #28]
 8000ab2:	607b      	str	r3, [r7, #4]
		  TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000abc:	f7ff fd74 	bl	80005a8 <TIM_OC4Init>


		  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8000ac0:	2108      	movs	r1, #8
 8000ac2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ac6:	f7ff fdb3 	bl	8000630 <TIM_OC3PreloadConfig>
		  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8000aca:	2108      	movs	r1, #8
 8000acc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ad0:	f7ff fdca 	bl	8000668 <TIM_OC4PreloadConfig>



		  /* TIM3 enable counter */
		  TIM_Cmd(TIM2, ENABLE);
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ada:	f7ff fd03 	bl	80004e4 <TIM_Cmd>

}
 8000ade:	bf00      	nop
 8000ae0:	3720      	adds	r7, #32
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop

08000ae8 <Motor_init>:
void Motor_init()
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	InitializeOutput();
 8000aec:	f7ff ff88 	bl	8000a00 <InitializeOutput>
InitializeTimer();
 8000af0:	f7ff ffb2 	bl	8000a58 <InitializeTimer>

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <right_motor_set_speed>:

void right_motor_set_speed(int a){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000b00:	2360      	movs	r3, #96	; 0x60
 8000b02:	81bb      	strh	r3, [r7, #12]

			  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8000b04:	2301      	movs	r3, #1
 8000b06:	81fb      	strh	r3, [r7, #14]

			  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	82bb      	strh	r3, [r7, #20]

	if(a>20){a=20;}
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b14      	cmp	r3, #20
 8000b10:	dd01      	ble.n	8000b16 <right_motor_set_speed+0x1e>
 8000b12:	2314      	movs	r3, #20
 8000b14:	607b      	str	r3, [r7, #4]
	if(a<-20){a=-20;}
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f113 0f14 	cmn.w	r3, #20
 8000b1c:	da02      	bge.n	8000b24 <right_motor_set_speed+0x2c>
 8000b1e:	f06f 0313 	mvn.w	r3, #19
 8000b22:	607b      	str	r3, [r7, #4]

	  TIM_OCInitStructure.TIM_Pulse = 150-a;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8000b2a:	613b      	str	r3, [r7, #16]
	  TIM_OC3Init(TIM2, &TIM_OCInitStructure);//pravy pwm update
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	4619      	mov	r1, r3
 8000b32:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b36:	f7ff fcf5 	bl	8000524 <TIM_OC3Init>
}
 8000b3a:	bf00      	nop
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop

08000b44 <left_motor_set_speed>:

void left_motor_set_speed(int a){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000b4c:	2360      	movs	r3, #96	; 0x60
 8000b4e:	81bb      	strh	r3, [r7, #12]

			  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8000b50:	2301      	movs	r3, #1
 8000b52:	81fb      	strh	r3, [r7, #14]

			  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8000b54:	2300      	movs	r3, #0
 8000b56:	82bb      	strh	r3, [r7, #20]
	if(a>20){a=20;}
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b14      	cmp	r3, #20
 8000b5c:	dd01      	ble.n	8000b62 <left_motor_set_speed+0x1e>
 8000b5e:	2314      	movs	r3, #20
 8000b60:	607b      	str	r3, [r7, #4]
	if(a<-20){a=-20;}
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f113 0f14 	cmn.w	r3, #20
 8000b68:	da02      	bge.n	8000b70 <left_motor_set_speed+0x2c>
 8000b6a:	f06f 0313 	mvn.w	r3, #19
 8000b6e:	607b      	str	r3, [r7, #4]
	 TIM_OCInitStructure.TIM_Pulse = 150+a;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3396      	adds	r3, #150	; 0x96
 8000b74:	613b      	str	r3, [r7, #16]
	 TIM_OC4Init(TIM2, &TIM_OCInitStructure);//lavy pwm update
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b80:	f7ff fd12 	bl	80005a8 <TIM_OC4Init>
}
 8000b84:	bf00      	nop
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <TIM6_IRQHandler>:
	NVIC_Init(&NVIC_InitStructure);
}

//spracovanie prerusenia z TIM6, casovaca pre kontrolku
void TIM6_IRQHandler(void)
{
 8000b8c:	b598      	push	{r3, r4, r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) == SET)
 8000b90:	2101      	movs	r1, #1
 8000b92:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <TIM6_IRQHandler+0x38>)
 8000b94:	f7ff fdaa 	bl	80006ec <TIM_GetITStatus>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d10f      	bne.n	8000bbe <TIM6_IRQHandler+0x32>
	{
		indicatorTimeStamp++;
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <TIM6_IRQHandler+0x3c>)
 8000ba0:	cb18      	ldmia	r3, {r3, r4}
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	f144 0400 	adc.w	r4, r4, #0
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <TIM6_IRQHandler+0x3c>)
 8000baa:	e882 0018 	stmia.w	r2, {r3, r4}
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);//toggle LED PA5
 8000bae:	2120      	movs	r1, #32
 8000bb0:	4806      	ldr	r0, [pc, #24]	; (8000bcc <TIM6_IRQHandler+0x40>)
 8000bb2:	f7ff fbad 	bl	8000310 <GPIO_ToggleBits>
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <TIM6_IRQHandler+0x38>)
 8000bba:	f7ff fdc1 	bl	8000740 <TIM_ClearITPendingBit>
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	bd98      	pop	{r3, r4, r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40001000 	.word	0x40001000
 8000bc8:	200000a0 	.word	0x200000a0
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <leftSensorMeasure>:
	GPIO_PinAFConfig(CAPTURE_PORT, FORWARD_CAP_PINSOURCE, GPIO_AF_TIM3);
}

//spustenie merania laveho dialkomeru
void leftSensorMeasure(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <leftSensorMeasure+0x28>)
 8000bd8:	f7ff fc84 	bl	80004e4 <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, LEFT_TRIG_PIN, Bit_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <leftSensorMeasure+0x2c>)
 8000be4:	f7ff fb7c 	bl	80002e0 <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	LeftSensorCaptureStruc.captureStep = 0;
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <leftSensorMeasure+0x30>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = leftSensorCaptureHandler;
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <leftSensorMeasure+0x34>)
 8000bf0:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <leftSensorMeasure+0x38>)
 8000bf2:	601a      	str	r2, [r3, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40001400 	.word	0x40001400
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	200000b8 	.word	0x200000b8
 8000c04:	200000d8 	.word	0x200000d8
 8000c08:	08000d89 	.word	0x08000d89

08000c0c <rightSensorMeasure>:
//spustenie merania praveho dialkomeru
void rightSensorMeasure(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 8000c10:	2101      	movs	r1, #1
 8000c12:	4808      	ldr	r0, [pc, #32]	; (8000c34 <rightSensorMeasure+0x28>)
 8000c14:	f7ff fc66 	bl	80004e4 <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, RIGHT_TRIG_PIN, Bit_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c1e:	4806      	ldr	r0, [pc, #24]	; (8000c38 <rightSensorMeasure+0x2c>)
 8000c20:	f7ff fb5e 	bl	80002e0 <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	RightSensorCaptureStruc.captureStep = 0;
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <rightSensorMeasure+0x30>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = rightSensorCaptureHandler;
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <rightSensorMeasure+0x34>)
 8000c2c:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <rightSensorMeasure+0x38>)
 8000c2e:	601a      	str	r2, [r3, #0]
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40001400 	.word	0x40001400
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	200000a8 	.word	0x200000a8
 8000c40:	200000d8 	.word	0x200000d8
 8000c44:	08000de9 	.word	0x08000de9

08000c48 <forwardSensorMeasure>:
//spustenie memrania predneho dialkomeru
void forwardSensorMeasure(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	4808      	ldr	r0, [pc, #32]	; (8000c70 <forwardSensorMeasure+0x28>)
 8000c50:	f7ff fc48 	bl	80004e4 <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, FORWARD_TRIG_PIN, Bit_SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <forwardSensorMeasure+0x2c>)
 8000c5c:	f7ff fb40 	bl	80002e0 <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	ForwardSensorCaptureStruc.captureStep = 0;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <forwardSensorMeasure+0x30>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = forwardSensorCaptureHandler;
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <forwardSensorMeasure+0x34>)
 8000c68:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <forwardSensorMeasure+0x38>)
 8000c6a:	601a      	str	r2, [r3, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40001400 	.word	0x40001400
 8000c74:	40020000 	.word	0x40020000
 8000c78:	200000c8 	.word	0x200000c8
 8000c7c:	200000d8 	.word	0x200000d8
 8000c80:	08000e49 	.word	0x08000e49

08000c84 <TIM7_IRQHandler>:

//handlery bude treba dat do suboru, ktory bude urcovat veci specificke pre dany hardver
//samotne funkcie ktore ma vykonat ale ostanu tu
//spracovanie prerusenia z TRIG_TIM, casovac pre spustaci impulz dialkomeru
void TIM7_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	//tez do samostatnej funkcie alebo mozno bude stacit #define fjdkkdf nazov funkcie
	if (TIM_GetITStatus(TRIG_TIM, TIM_IT_Update) == SET)
 8000c88:	2101      	movs	r1, #1
 8000c8a:	481e      	ldr	r0, [pc, #120]	; (8000d04 <TIM7_IRQHandler+0x80>)
 8000c8c:	f7ff fd2e 	bl	80006ec <TIM_GetITStatus>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d133      	bne.n	8000cfe <TIM7_IRQHandler+0x7a>
	{
		TIM_Cmd(TRIG_TIM, DISABLE);
 8000c96:	2100      	movs	r1, #0
 8000c98:	481a      	ldr	r0, [pc, #104]	; (8000d04 <TIM7_IRQHandler+0x80>)
 8000c9a:	f7ff fc23 	bl	80004e4 <TIM_Cmd>
		//vypnutie impulzu na prislusnom spustacom pine
		if (GPIO_ReadOutputDataBit(TRIG_PORT, LEFT_TRIG_PIN) == 1)
 8000c9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca2:	4819      	ldr	r0, [pc, #100]	; (8000d08 <TIM7_IRQHandler+0x84>)
 8000ca4:	f7ff fb00 	bl	80002a8 <GPIO_ReadOutputDataBit>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d106      	bne.n	8000cbc <TIM7_IRQHandler+0x38>
		{
			GPIO_WriteBit(TRIG_PORT, LEFT_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu left
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb4:	4814      	ldr	r0, [pc, #80]	; (8000d08 <TIM7_IRQHandler+0x84>)
 8000cb6:	f7ff fb13 	bl	80002e0 <GPIO_WriteBit>
 8000cba:	e01c      	b.n	8000cf6 <TIM7_IRQHandler+0x72>
		}
		else if (GPIO_ReadOutputDataBit(TRIG_PORT, RIGHT_TRIG_PIN) == 1)
 8000cbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc0:	4811      	ldr	r0, [pc, #68]	; (8000d08 <TIM7_IRQHandler+0x84>)
 8000cc2:	f7ff faf1 	bl	80002a8 <GPIO_ReadOutputDataBit>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d106      	bne.n	8000cda <TIM7_IRQHandler+0x56>
		{
			GPIO_WriteBit(TRIG_PORT, RIGHT_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu right
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd2:	480d      	ldr	r0, [pc, #52]	; (8000d08 <TIM7_IRQHandler+0x84>)
 8000cd4:	f7ff fb04 	bl	80002e0 <GPIO_WriteBit>
 8000cd8:	e00d      	b.n	8000cf6 <TIM7_IRQHandler+0x72>
		}
		else if (GPIO_ReadOutputDataBit(TRIG_PORT, FORWARD_TRIG_PIN) == 1)
 8000cda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cde:	480a      	ldr	r0, [pc, #40]	; (8000d08 <TIM7_IRQHandler+0x84>)
 8000ce0:	f7ff fae2 	bl	80002a8 <GPIO_ReadOutputDataBit>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d105      	bne.n	8000cf6 <TIM7_IRQHandler+0x72>
		{
			GPIO_WriteBit(TRIG_PORT, FORWARD_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu forward
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <TIM7_IRQHandler+0x84>)
 8000cf2:	f7ff faf5 	bl	80002e0 <GPIO_WriteBit>
		}
		TIM_ClearITPendingBit(TRIG_TIM, TIM_IT_Update);
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <TIM7_IRQHandler+0x80>)
 8000cfa:	f7ff fd21 	bl	8000740 <TIM_ClearITPendingBit>
	}
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40001400 	.word	0x40001400
 8000d08:	40020000 	.word	0x40020000

08000d0c <TIM3_IRQHandler>:
//spracovanie prerusenia z TIM3, casovac pre meranie dlzky impulzu z dialialkomerov
void TIM3_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	//spustenie spracovania prerusenia CAPTURE_TIM pre prislusny senzor
	if (sensorCaptureHandler != 0)
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <TIM3_IRQHandler+0x18>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d002      	beq.n	8000d1e <TIM3_IRQHandler+0x12>
	{
		sensorCaptureHandler();
 8000d18:	4b02      	ldr	r3, [pc, #8]	; (8000d24 <TIM3_IRQHandler+0x18>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4798      	blx	r3
	}
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200000d8 	.word	0x200000d8

08000d28 <TIM10_IRQHandler>:
//spracovanie prerusenia z casovaca pre volanie merania vzdialenosti
void TIM10_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(SENSOR_CALL_TIM, TIM_IT_Update) == SET)
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	4814      	ldr	r0, [pc, #80]	; (8000d80 <TIM10_IRQHandler+0x58>)
 8000d30:	f7ff fcdc 	bl	80006ec <TIM_GetITStatus>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d120      	bne.n	8000d7c <TIM10_IRQHandler+0x54>
	{
		//volanie merania senzora, ktory je na rade
		switch (selectSensor)
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <TIM10_IRQHandler+0x5c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d006      	beq.n	8000d50 <TIM10_IRQHandler+0x28>
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d007      	beq.n	8000d56 <TIM10_IRQHandler+0x2e>
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d108      	bne.n	8000d5c <TIM10_IRQHandler+0x34>
		{
		case 0:
			leftSensorMeasure();
 8000d4a:	f7ff ff41 	bl	8000bd0 <leftSensorMeasure>
			break;
 8000d4e:	e005      	b.n	8000d5c <TIM10_IRQHandler+0x34>
		case 1:
			forwardSensorMeasure();
 8000d50:	f7ff ff7a 	bl	8000c48 <forwardSensorMeasure>
			break;
 8000d54:	e002      	b.n	8000d5c <TIM10_IRQHandler+0x34>
		case 2:
			rightSensorMeasure();
 8000d56:	f7ff ff59 	bl	8000c0c <rightSensorMeasure>
			break;
 8000d5a:	bf00      	nop
		}
		//inkrementovanie volaneho senzora
		selectSensor++;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <TIM10_IRQHandler+0x5c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <TIM10_IRQHandler+0x5c>)
 8000d64:	6013      	str	r3, [r2, #0]
		if (selectSensor > 2)
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <TIM10_IRQHandler+0x5c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	dd02      	ble.n	8000d74 <TIM10_IRQHandler+0x4c>
		{
			selectSensor = 0;
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <TIM10_IRQHandler+0x5c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
		}
		TIM_ClearITPendingBit(SENSOR_CALL_TIM, TIM_IT_Update);
 8000d74:	2101      	movs	r1, #1
 8000d76:	4802      	ldr	r0, [pc, #8]	; (8000d80 <TIM10_IRQHandler+0x58>)
 8000d78:	f7ff fce2 	bl	8000740 <TIM_ClearITPendingBit>
	}
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40010c00 	.word	0x40010c00
 8000d84:	2000001c 	.word	0x2000001c

08000d88 <leftSensorCaptureHandler>:

//meranie dlzky impulzu lavy senzor
void leftSensorCaptureHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, LEFT_TIM_CC) != RESET)
 8000d8c:	2108      	movs	r1, #8
 8000d8e:	4814      	ldr	r0, [pc, #80]	; (8000de0 <leftSensorCaptureHandler+0x58>)
 8000d90:	f7ff fcac 	bl	80006ec <TIM_GetITStatus>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d01f      	beq.n	8000dda <leftSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, LEFT_TIM_CC);
 8000d9a:	2108      	movs	r1, #8
 8000d9c:	4810      	ldr	r0, [pc, #64]	; (8000de0 <leftSensorCaptureHandler+0x58>)
 8000d9e:	f7ff fccf 	bl	8000740 <TIM_ClearITPendingBit>

		if(LeftSensorCaptureStruc.captureStep == 0)
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <leftSensorCaptureHandler+0x5c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d109      	bne.n	8000dbe <leftSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			LeftSensorCaptureStruc.risingTimeCapturing = LEFT_TIM_GETCAPTURE;
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <leftSensorCaptureHandler+0x58>)
 8000dac:	f7ff fc86 	bl	80006bc <TIM_GetCapture3>
 8000db0:	4602      	mov	r2, r0
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <leftSensorCaptureHandler+0x5c>)
 8000db4:	605a      	str	r2, [r3, #4]
			LeftSensorCaptureStruc.captureStep = 1;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <leftSensorCaptureHandler+0x5c>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			LeftSensorCaptureStruc.fallingTime = LEFT_TIM_GETCAPTURE;
			LeftSensorCaptureStruc.risingTime = LeftSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 8000dbc:	e00d      	b.n	8000dda <leftSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			LeftSensorCaptureStruc.risingTimeCapturing = LEFT_TIM_GETCAPTURE;
			LeftSensorCaptureStruc.captureStep = 1;
		}
		else if(LeftSensorCaptureStruc.captureStep == 1)
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <leftSensorCaptureHandler+0x5c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d109      	bne.n	8000dda <leftSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			LeftSensorCaptureStruc.fallingTime = LEFT_TIM_GETCAPTURE;
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <leftSensorCaptureHandler+0x58>)
 8000dc8:	f7ff fc78 	bl	80006bc <TIM_GetCapture3>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <leftSensorCaptureHandler+0x5c>)
 8000dd0:	60da      	str	r2, [r3, #12]
			LeftSensorCaptureStruc.risingTime = LeftSensorCaptureStruc.risingTimeCapturing;
 8000dd2:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <leftSensorCaptureHandler+0x5c>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <leftSensorCaptureHandler+0x5c>)
 8000dd8:	6093      	str	r3, [r2, #8]
		}
	}
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40000400 	.word	0x40000400
 8000de4:	200000b8 	.word	0x200000b8

08000de8 <rightSensorCaptureHandler>:
//meranie dlzky impulzu lavy senzor
void rightSensorCaptureHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, RIGHT_TIM_CC) != RESET)
 8000dec:	2102      	movs	r1, #2
 8000dee:	4814      	ldr	r0, [pc, #80]	; (8000e40 <rightSensorCaptureHandler+0x58>)
 8000df0:	f7ff fc7c 	bl	80006ec <TIM_GetITStatus>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d01f      	beq.n	8000e3a <rightSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, RIGHT_TIM_CC);
 8000dfa:	2102      	movs	r1, #2
 8000dfc:	4810      	ldr	r0, [pc, #64]	; (8000e40 <rightSensorCaptureHandler+0x58>)
 8000dfe:	f7ff fc9f 	bl	8000740 <TIM_ClearITPendingBit>

		if(RightSensorCaptureStruc.captureStep == 0)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <rightSensorCaptureHandler+0x5c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d109      	bne.n	8000e1e <rightSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			RightSensorCaptureStruc.risingTimeCapturing = RIGHT_TIM_GETCAPTURE;
 8000e0a:	480d      	ldr	r0, [pc, #52]	; (8000e40 <rightSensorCaptureHandler+0x58>)
 8000e0c:	f7ff fc4a 	bl	80006a4 <TIM_GetCapture1>
 8000e10:	4602      	mov	r2, r0
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <rightSensorCaptureHandler+0x5c>)
 8000e14:	605a      	str	r2, [r3, #4]
			RightSensorCaptureStruc.captureStep = 1;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <rightSensorCaptureHandler+0x5c>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			RightSensorCaptureStruc.fallingTime = RIGHT_TIM_GETCAPTURE;
			RightSensorCaptureStruc.risingTime = RightSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 8000e1c:	e00d      	b.n	8000e3a <rightSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			RightSensorCaptureStruc.risingTimeCapturing = RIGHT_TIM_GETCAPTURE;
			RightSensorCaptureStruc.captureStep = 1;
		}
		else if(RightSensorCaptureStruc.captureStep == 1)
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <rightSensorCaptureHandler+0x5c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d109      	bne.n	8000e3a <rightSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			RightSensorCaptureStruc.fallingTime = RIGHT_TIM_GETCAPTURE;
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <rightSensorCaptureHandler+0x58>)
 8000e28:	f7ff fc3c 	bl	80006a4 <TIM_GetCapture1>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <rightSensorCaptureHandler+0x5c>)
 8000e30:	60da      	str	r2, [r3, #12]
			RightSensorCaptureStruc.risingTime = RightSensorCaptureStruc.risingTimeCapturing;
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <rightSensorCaptureHandler+0x5c>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	4a03      	ldr	r2, [pc, #12]	; (8000e44 <rightSensorCaptureHandler+0x5c>)
 8000e38:	6093      	str	r3, [r2, #8]
		}
	}
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40000400 	.word	0x40000400
 8000e44:	200000a8 	.word	0x200000a8

08000e48 <forwardSensorCaptureHandler>:
//meranie dlzky impulzu lavy senzor
void forwardSensorCaptureHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, FORWARD_TIM_CC) != RESET)
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	4814      	ldr	r0, [pc, #80]	; (8000ea0 <forwardSensorCaptureHandler+0x58>)
 8000e50:	f7ff fc4c 	bl	80006ec <TIM_GetITStatus>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d01f      	beq.n	8000e9a <forwardSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, FORWARD_TIM_CC);
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4810      	ldr	r0, [pc, #64]	; (8000ea0 <forwardSensorCaptureHandler+0x58>)
 8000e5e:	f7ff fc6f 	bl	8000740 <TIM_ClearITPendingBit>

		if(ForwardSensorCaptureStruc.captureStep == 0)
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <forwardSensorCaptureHandler+0x5c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d109      	bne.n	8000e7e <forwardSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			ForwardSensorCaptureStruc.risingTimeCapturing = FORWARD_TIM_GETCAPTURE;
 8000e6a:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <forwardSensorCaptureHandler+0x58>)
 8000e6c:	f7ff fc32 	bl	80006d4 <TIM_GetCapture4>
 8000e70:	4602      	mov	r2, r0
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <forwardSensorCaptureHandler+0x5c>)
 8000e74:	605a      	str	r2, [r3, #4]
			ForwardSensorCaptureStruc.captureStep = 1;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <forwardSensorCaptureHandler+0x5c>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			ForwardSensorCaptureStruc.fallingTime = FORWARD_TIM_GETCAPTURE;
			ForwardSensorCaptureStruc.risingTime = ForwardSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 8000e7c:	e00d      	b.n	8000e9a <forwardSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			ForwardSensorCaptureStruc.risingTimeCapturing = FORWARD_TIM_GETCAPTURE;
			ForwardSensorCaptureStruc.captureStep = 1;
		}
		else if(ForwardSensorCaptureStruc.captureStep == 1)
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <forwardSensorCaptureHandler+0x5c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d109      	bne.n	8000e9a <forwardSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			ForwardSensorCaptureStruc.fallingTime = FORWARD_TIM_GETCAPTURE;
 8000e86:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <forwardSensorCaptureHandler+0x58>)
 8000e88:	f7ff fc24 	bl	80006d4 <TIM_GetCapture4>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <forwardSensorCaptureHandler+0x5c>)
 8000e90:	60da      	str	r2, [r3, #12]
			ForwardSensorCaptureStruc.risingTime = ForwardSensorCaptureStruc.risingTimeCapturing;
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <forwardSensorCaptureHandler+0x5c>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	4a03      	ldr	r2, [pc, #12]	; (8000ea4 <forwardSensorCaptureHandler+0x5c>)
 8000e98:	6093      	str	r3, [r2, #8]
		}
	}
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40000400 	.word	0x40000400
 8000ea4:	200000c8 	.word	0x200000c8

08000ea8 <USART3_IRQHandler>:

	return 0;
}

void PRN_USART_IRQHANDLER(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(PRN_USART, USART_IT_RXNE) != RESET)
 8000eac:	f240 5125 	movw	r1, #1317	; 0x525
 8000eb0:	481d      	ldr	r0, [pc, #116]	; (8000f28 <USART3_IRQHandler+0x80>)
 8000eb2:	f7ff fca3 	bl	80007fc <USART_GetITStatus>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d00b      	beq.n	8000ed4 <USART3_IRQHandler+0x2c>
	{
		USART_ClearITPendingBit(PRN_USART, USART_IT_RXNE);
 8000ebc:	f240 5125 	movw	r1, #1317	; 0x525
 8000ec0:	4819      	ldr	r0, [pc, #100]	; (8000f28 <USART3_IRQHandler+0x80>)
 8000ec2:	f7ff fcf5 	bl	80008b0 <USART_ClearITPendingBit>
		receivedChar = USART_ReceiveData(PRN_USART);
 8000ec6:	4818      	ldr	r0, [pc, #96]	; (8000f28 <USART3_IRQHandler+0x80>)
 8000ec8:	f7ff fc5c 	bl	8000784 <USART_ReceiveData>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <USART3_IRQHandler+0x84>)
 8000ed2:	801a      	strh	r2, [r3, #0]
	}
	if(USART_GetFlagStatus(PRN_USART, USART_FLAG_TC) != RESET)
 8000ed4:	2140      	movs	r1, #64	; 0x40
 8000ed6:	4814      	ldr	r0, [pc, #80]	; (8000f28 <USART3_IRQHandler+0x80>)
 8000ed8:	f7ff fc64 	bl	80007a4 <USART_GetFlagStatus>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d020      	beq.n	8000f24 <USART3_IRQHandler+0x7c>
	{
		USART_ClearFlag(PRN_USART, USART_FLAG_TC);
 8000ee2:	2140      	movs	r1, #64	; 0x40
 8000ee4:	4810      	ldr	r0, [pc, #64]	; (8000f28 <USART3_IRQHandler+0x80>)
 8000ee6:	f7ff fc79 	bl	80007dc <USART_ClearFlag>
		USARTbufferInkr++;
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <USART3_IRQHandler+0x88>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <USART3_IRQHandler+0x88>)
 8000ef2:	6013      	str	r3, [r2, #0]
		if( USARTbufferOut[USARTbufferInkr] != '\0')
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <USART3_IRQHandler+0x88>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <USART3_IRQHandler+0x8c>)
 8000efa:	5cd3      	ldrb	r3, [r2, r3]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00a      	beq.n	8000f18 <USART3_IRQHandler+0x70>
		{
			USART_SendData(PRN_USART, USARTbufferOut[USARTbufferInkr]);
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <USART3_IRQHandler+0x88>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <USART3_IRQHandler+0x8c>)
 8000f08:	5cd3      	ldrb	r3, [r2, r3]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <USART3_IRQHandler+0x80>)
 8000f12:	f7ff fc25 	bl	8000760 <USART_SendData>
		{
			USARTbufferInkr = 0;
			USARTbufferRDY = 1;
		}
	}
}
 8000f16:	e005      	b.n	8000f24 <USART3_IRQHandler+0x7c>
		{
			USART_SendData(PRN_USART, USARTbufferOut[USARTbufferInkr]);
		}
		else
		{
			USARTbufferInkr = 0;
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <USART3_IRQHandler+0x88>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
			USARTbufferRDY = 1;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <USART3_IRQHandler+0x90>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40004800 	.word	0x40004800
 8000f2c:	20000034 	.word	0x20000034
 8000f30:	20000030 	.word	0x20000030
 8000f34:	20000038 	.word	0x20000038
 8000f38:	2000002c 	.word	0x2000002c

08000f3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f40:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f42:	e003      	b.n	8000f4c <LoopCopyDataInit>

08000f44 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8000f46:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f48:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f4a:	3104      	adds	r1, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f4c:	480b      	ldr	r0, [pc, #44]	; (8000f7c <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8000f50:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f52:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f54:	d3f6      	bcc.n	8000f44 <CopyDataInit>
  ldr r2, =_sbss
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8000f58:	e002      	b.n	8000f60 <LoopFillZerobss>

08000f5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f5c:	f842 3b04 	str.w	r3, [r2], #4

08000f60 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8000f62:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f64:	d3f9      	bcc.n	8000f5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f66:	f000 f841 	bl	8000fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f000 f903 	bl	8001174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f6e:	f7ff fcff 	bl	8000970 <main>
  bx lr
 8000f72:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f74:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000f78:	080011e0 	.word	0x080011e0
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f80:	20000000 	.word	0x20000000
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000f84:	20000000 	.word	0x20000000
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000f88:	200000dc 	.word	0x200000dc

08000f8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC1_IRQHandler>
	...

08000f90 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000fa0:	e7fe      	b.n	8000fa0 <HardFault_Handler+0x4>
 8000fa2:	bf00      	nop

08000fa4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000fa8:	e7fe      	b.n	8000fa8 <MemManage_Handler+0x4>
 8000faa:	bf00      	nop

08000fac <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000fb0:	e7fe      	b.n	8000fb0 <BusFault_Handler+0x4>
 8000fb2:	bf00      	nop

08000fb4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000fb8:	e7fe      	b.n	8000fb8 <UsageFault_Handler+0x4>
 8000fba:	bf00      	nop

08000fbc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000ff0:	4a15      	ldr	r2, [pc, #84]	; (8001048 <SystemInit+0x5c>)
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <SystemInit+0x5c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffa:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000ffc:	4912      	ldr	r1, [pc, #72]	; (8001048 <SystemInit+0x5c>)
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <SystemInit+0x5c>)
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <SystemInit+0x60>)
 8001004:	4013      	ands	r3, r2
 8001006:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001008:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <SystemInit+0x5c>)
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <SystemInit+0x5c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001012:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001016:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001018:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <SystemInit+0x5c>)
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <SystemInit+0x5c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001022:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001024:	4a08      	ldr	r2, [pc, #32]	; (8001048 <SystemInit+0x5c>)
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <SystemInit+0x5c>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800102e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SystemInit+0x5c>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8001036:	f000 f80d 	bl	8001054 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <SystemInit+0x64>)
 800103c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001040:	609a      	str	r2, [r3, #8]
#endif
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	88ffc00c 	.word	0x88ffc00c
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	2300      	movs	r3, #0
 8001060:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001062:	4a41      	ldr	r2, [pc, #260]	; (8001168 <SetSysClock+0x114>)
 8001064:	4b40      	ldr	r3, [pc, #256]	; (8001168 <SetSysClock+0x114>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800106e:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <SetSysClock+0x114>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3301      	adds	r3, #1
 800107c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d103      	bne.n	800108c <SetSysClock+0x38>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800108a:	d1f0      	bne.n	800106e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800108c:	4b36      	ldr	r3, [pc, #216]	; (8001168 <SetSysClock+0x114>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d002      	beq.n	800109e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001098:	2301      	movs	r3, #1
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	e001      	b.n	80010a2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d15a      	bne.n	800115e <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 80010a8:	4a30      	ldr	r2, [pc, #192]	; (800116c <SetSysClock+0x118>)
 80010aa:	4b30      	ldr	r3, [pc, #192]	; (800116c <SetSysClock+0x118>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 80010b4:	4a2d      	ldr	r2, [pc, #180]	; (800116c <SetSysClock+0x118>)
 80010b6:	4b2d      	ldr	r3, [pc, #180]	; (800116c <SetSysClock+0x118>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f043 0302 	orr.w	r3, r3, #2
 80010be:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 80010c0:	4a2a      	ldr	r2, [pc, #168]	; (800116c <SetSysClock+0x118>)
 80010c2:	4b2a      	ldr	r3, [pc, #168]	; (800116c <SetSysClock+0x118>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80010cc:	4a26      	ldr	r2, [pc, #152]	; (8001168 <SetSysClock+0x114>)
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <SetSysClock+0x114>)
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d6:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <SetSysClock+0x11c>)
 80010da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010de:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 80010e0:	bf00      	nop
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <SetSysClock+0x11c>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f9      	bne.n	80010e2 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80010ee:	4a1e      	ldr	r2, [pc, #120]	; (8001168 <SetSysClock+0x114>)
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <SetSysClock+0x114>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80010f6:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <SetSysClock+0x114>)
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <SetSysClock+0x114>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 80010fe:	4a1a      	ldr	r2, [pc, #104]	; (8001168 <SetSysClock+0x114>)
 8001100:	4b19      	ldr	r3, [pc, #100]	; (8001168 <SetSysClock+0x114>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8001106:	4a18      	ldr	r2, [pc, #96]	; (8001168 <SetSysClock+0x114>)
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <SetSysClock+0x114>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001110:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8001112:	4a15      	ldr	r2, [pc, #84]	; (8001168 <SetSysClock+0x114>)
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <SetSysClock+0x114>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 800111c:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800111e:	4a12      	ldr	r2, [pc, #72]	; (8001168 <SetSysClock+0x114>)
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <SetSysClock+0x114>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001128:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800112a:	bf00      	nop
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <SetSysClock+0x114>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f9      	beq.n	800112c <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001138:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <SetSysClock+0x114>)
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <SetSysClock+0x114>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f023 0303 	bic.w	r3, r3, #3
 8001142:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001144:	4a08      	ldr	r2, [pc, #32]	; (8001168 <SetSysClock+0x114>)
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <SetSysClock+0x114>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f043 0303 	orr.w	r3, r3, #3
 800114e:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001150:	bf00      	nop
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <SetSysClock+0x114>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b0c      	cmp	r3, #12
 800115c:	d1f9      	bne.n	8001152 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	40023800 	.word	0x40023800
 800116c:	40023c00 	.word	0x40023c00
 8001170:	40007000 	.word	0x40007000

08001174 <__libc_init_array>:
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <__libc_init_array+0x3c>)
 8001176:	b570      	push	{r4, r5, r6, lr}
 8001178:	461e      	mov	r6, r3
 800117a:	4c0e      	ldr	r4, [pc, #56]	; (80011b4 <__libc_init_array+0x40>)
 800117c:	2500      	movs	r5, #0
 800117e:	1ae4      	subs	r4, r4, r3
 8001180:	10a4      	asrs	r4, r4, #2
 8001182:	42a5      	cmp	r5, r4
 8001184:	d004      	beq.n	8001190 <__libc_init_array+0x1c>
 8001186:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800118a:	4798      	blx	r3
 800118c:	3501      	adds	r5, #1
 800118e:	e7f8      	b.n	8001182 <__libc_init_array+0xe>
 8001190:	f000 f816 	bl	80011c0 <_init>
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <__libc_init_array+0x44>)
 8001196:	4c09      	ldr	r4, [pc, #36]	; (80011bc <__libc_init_array+0x48>)
 8001198:	461e      	mov	r6, r3
 800119a:	1ae4      	subs	r4, r4, r3
 800119c:	10a4      	asrs	r4, r4, #2
 800119e:	2500      	movs	r5, #0
 80011a0:	42a5      	cmp	r5, r4
 80011a2:	d004      	beq.n	80011ae <__libc_init_array+0x3a>
 80011a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011a8:	4798      	blx	r3
 80011aa:	3501      	adds	r5, #1
 80011ac:	e7f8      	b.n	80011a0 <__libc_init_array+0x2c>
 80011ae:	bd70      	pop	{r4, r5, r6, pc}
 80011b0:	080011d8 	.word	0x080011d8
 80011b4:	080011d8 	.word	0x080011d8
 80011b8:	080011d8 	.word	0x080011d8
 80011bc:	080011dc 	.word	0x080011dc

080011c0 <_init>:
 80011c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011c2:	bf00      	nop
 80011c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011c6:	bc08      	pop	{r3}
 80011c8:	469e      	mov	lr, r3
 80011ca:	4770      	bx	lr

080011cc <_fini>:
 80011cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ce:	bf00      	nop
 80011d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011d2:	bc08      	pop	{r3}
 80011d4:	469e      	mov	lr, r3
 80011d6:	4770      	bx	lr
