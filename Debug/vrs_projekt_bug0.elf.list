
vrs_projekt_bug0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000126c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080013a8  080013a8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080013a8  080013a8  000113a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080013ac  080013ac  000113ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  080013b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000104  20000020  080013cc  00020020  2**3
                  ALLOC
  7 ._user_heap_stack 00000400  20000124  080013cc  00020124  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006674  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000011d5  00000000  00000000  000266b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000870  00000000  00000000  00027890  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c8  00000000  00000000  00028100  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002c62  00000000  00000000  000288c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000025be  00000000  00000000  0002b52a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002dae8  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000228c  00000000  00000000  0002db68  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002fdf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000020 	.word	0x20000020
 8000158:	00000000 	.word	0x00000000
 800015c:	08001390 	.word	0x08001390

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000024 	.word	0x20000024
 8000178:	08001390 	.word	0x08001390

0800017c <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for preemption priority.
  *                                0 bits for subpriority.
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000184:	4a05      	ldr	r2, [pc, #20]	; (800019c <NVIC_PriorityGroupConfig+0x20>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800018c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000190:	60d3      	str	r3, [r2, #12]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	e000ed00 	.word	0xe000ed00

080001a0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b085      	sub	sp, #20
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001a8:	2300      	movs	r3, #0
 80001aa:	73fb      	strb	r3, [r7, #15]
 80001ac:	2300      	movs	r3, #0
 80001ae:	73bb      	strb	r3, [r7, #14]
 80001b0:	230f      	movs	r3, #15
 80001b2:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	78db      	ldrb	r3, [r3, #3]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d038      	beq.n	800022e <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001bc:	4b26      	ldr	r3, [pc, #152]	; (8000258 <NVIC_Init+0xb8>)
 80001be:	68db      	ldr	r3, [r3, #12]
 80001c0:	43db      	mvns	r3, r3
 80001c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001c6:	0a1b      	lsrs	r3, r3, #8
 80001c8:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	f1c3 0304 	rsb	r3, r3, #4
 80001d0:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001d2:	7b7a      	ldrb	r2, [r7, #13]
 80001d4:	7bfb      	ldrb	r3, [r7, #15]
 80001d6:	fa42 f303 	asr.w	r3, r2, r3
 80001da:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	785b      	ldrb	r3, [r3, #1]
 80001e0:	461a      	mov	r2, r3
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	fa02 f303 	lsl.w	r3, r2, r3
 80001e8:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	789a      	ldrb	r2, [r3, #2]
 80001ee:	7b7b      	ldrb	r3, [r7, #13]
 80001f0:	4013      	ands	r3, r2
 80001f2:	b2da      	uxtb	r2, r3
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	4313      	orrs	r3, r2
 80001f8:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 80001fa:	7bfb      	ldrb	r3, [r7, #15]
 80001fc:	011b      	lsls	r3, r3, #4
 80001fe:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000200:	4a16      	ldr	r2, [pc, #88]	; (800025c <NVIC_Init+0xbc>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	4413      	add	r3, r2
 8000208:	7bfa      	ldrb	r2, [r7, #15]
 800020a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <NVIC_Init+0xbc>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	095b      	lsrs	r3, r3, #5
 8000216:	b2db      	uxtb	r3, r3
 8000218:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	f003 031f 	and.w	r3, r3, #31
 8000222:	2101      	movs	r1, #1
 8000224:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000228:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800022c:	e00f      	b.n	800024e <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800022e:	490b      	ldr	r1, [pc, #44]	; (800025c <NVIC_Init+0xbc>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	095b      	lsrs	r3, r3, #5
 8000236:	b2db      	uxtb	r3, r3
 8000238:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	f003 031f 	and.w	r3, r3, #31
 8000242:	2201      	movs	r2, #1
 8000244:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000246:	f100 0320 	add.w	r3, r0, #32
 800024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800024e:	bf00      	nop
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	e000ed00 	.word	0xe000ed00
 800025c:	e000e100 	.word	0xe000e100

08000260 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000260:	b480      	push	{r7}
 8000262:	b087      	sub	sp, #28
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800026a:	2300      	movs	r3, #0
 800026c:	617b      	str	r3, [r7, #20]
 800026e:	2300      	movs	r3, #0
 8000270:	613b      	str	r3, [r7, #16]
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
 800027a:	e07e      	b.n	800037a <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800027c:	2201      	movs	r2, #1
 800027e:	697b      	ldr	r3, [r7, #20]
 8000280:	fa02 f303 	lsl.w	r3, r2, r3
 8000284:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	693b      	ldr	r3, [r7, #16]
 800028c:	4013      	ands	r3, r2
 800028e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000290:	68fa      	ldr	r2, [r7, #12]
 8000292:	693b      	ldr	r3, [r7, #16]
 8000294:	429a      	cmp	r2, r3
 8000296:	d16d      	bne.n	8000374 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	697b      	ldr	r3, [r7, #20]
 800029e:	005b      	lsls	r3, r3, #1
 80002a0:	2103      	movs	r1, #3
 80002a2:	fa01 f303 	lsl.w	r3, r1, r3
 80002a6:	43db      	mvns	r3, r3
 80002a8:	401a      	ands	r2, r3
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	791b      	ldrb	r3, [r3, #4]
 80002b6:	4619      	mov	r1, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	005b      	lsls	r3, r3, #1
 80002bc:	fa01 f303 	lsl.w	r3, r1, r3
 80002c0:	431a      	orrs	r2, r3
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	791b      	ldrb	r3, [r3, #4]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d003      	beq.n	80002d6 <GPIO_Init+0x76>
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	791b      	ldrb	r3, [r3, #4]
 80002d2:	2b02      	cmp	r3, #2
 80002d4:	d136      	bne.n	8000344 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	689a      	ldr	r2, [r3, #8]
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	2103      	movs	r1, #3
 80002e0:	fa01 f303 	lsl.w	r3, r1, r3
 80002e4:	43db      	mvns	r3, r3
 80002e6:	401a      	ands	r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	689a      	ldr	r2, [r3, #8]
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	795b      	ldrb	r3, [r3, #5]
 80002f4:	4619      	mov	r1, r3
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	fa01 f303 	lsl.w	r3, r1, r3
 80002fe:	431a      	orrs	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	889b      	ldrh	r3, [r3, #4]
 8000308:	b29a      	uxth	r2, r3
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	b29b      	uxth	r3, r3
 800030e:	2101      	movs	r1, #1
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	b29b      	uxth	r3, r3
 8000316:	43db      	mvns	r3, r3
 8000318:	b29b      	uxth	r3, r3
 800031a:	4013      	ands	r3, r2
 800031c:	b29a      	uxth	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	889b      	ldrh	r3, [r3, #4]
 8000326:	b29b      	uxth	r3, r3
 8000328:	b21a      	sxth	r2, r3
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	799b      	ldrb	r3, [r3, #6]
 800032e:	4619      	mov	r1, r3
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	b29b      	uxth	r3, r3
 8000334:	fa01 f303 	lsl.w	r3, r1, r3
 8000338:	b21b      	sxth	r3, r3
 800033a:	4313      	orrs	r3, r2
 800033c:	b21b      	sxth	r3, r3
 800033e:	b29a      	uxth	r2, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	68da      	ldr	r2, [r3, #12]
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	b29b      	uxth	r3, r3
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	2103      	movs	r1, #3
 8000350:	fa01 f303 	lsl.w	r3, r1, r3
 8000354:	43db      	mvns	r3, r3
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	68da      	ldr	r2, [r3, #12]
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	79db      	ldrb	r3, [r3, #7]
 8000364:	4619      	mov	r1, r3
 8000366:	697b      	ldr	r3, [r7, #20]
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	fa01 f303 	lsl.w	r3, r1, r3
 800036e:	431a      	orrs	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	3301      	adds	r3, #1
 8000378:	617b      	str	r3, [r7, #20]
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	2b0f      	cmp	r3, #15
 800037e:	f67f af7d 	bls.w	800027c <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000382:	bf00      	nop
 8000384:	371c      	adds	r7, #28
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: Specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	460b      	mov	r3, r1
 8000396:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000398:	2300      	movs	r3, #0
 800039a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	8a9b      	ldrh	r3, [r3, #20]
 80003a0:	b29a      	uxth	r2, r3
 80003a2:	887b      	ldrh	r3, [r7, #2]
 80003a4:	4013      	ands	r3, r2
 80003a6:	b29b      	uxth	r3, r3
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d002      	beq.n	80003b2 <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 80003ac:	2301      	movs	r3, #1
 80003ae:	73fb      	strb	r3, [r7, #15]
 80003b0:	e001      	b.n	80003b6 <GPIO_ReadOutputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80003b2:	2300      	movs	r3, #0
 80003b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80003b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	3714      	adds	r7, #20
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop

080003c4 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	460b      	mov	r3, r1
 80003ce:	807b      	strh	r3, [r7, #2]
 80003d0:	4613      	mov	r3, r2
 80003d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 80003d4:	787b      	ldrb	r3, [r7, #1]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d003      	beq.n	80003e2 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	887a      	ldrh	r2, [r7, #2]
 80003de:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 80003e0:	e002      	b.n	80003e8 <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	887a      	ldrh	r2, [r7, #2]
 80003e6:	835a      	strh	r2, [r3, #26]
  }
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop

080003f4 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..H) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	460b      	mov	r3, r1
 80003fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	8a9b      	ldrh	r3, [r3, #20]
 8000404:	b29a      	uxth	r2, r3
 8000406:	887b      	ldrh	r3, [r7, #2]
 8000408:	4053      	eors	r3, r2
 800040a:	b29a      	uxth	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	829a      	strh	r2, [r3, #20]
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop

0800041c <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	460b      	mov	r3, r1
 8000426:	807b      	strh	r3, [r7, #2]
 8000428:	4613      	mov	r3, r2
 800042a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800042c:	2300      	movs	r3, #0
 800042e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000430:	2300      	movs	r3, #0
 8000432:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000434:	787a      	ldrb	r2, [r7, #1]
 8000436:	887b      	ldrh	r3, [r7, #2]
 8000438:	f003 0307 	and.w	r3, r3, #7
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	fa02 f303 	lsl.w	r3, r2, r3
 8000442:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000444:	887b      	ldrh	r3, [r7, #2]
 8000446:	08db      	lsrs	r3, r3, #3
 8000448:	b29b      	uxth	r3, r3
 800044a:	4618      	mov	r0, r3
 800044c:	887b      	ldrh	r3, [r7, #2]
 800044e:	08db      	lsrs	r3, r3, #3
 8000450:	b29b      	uxth	r3, r3
 8000452:	461a      	mov	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	3208      	adds	r2, #8
 8000458:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800045c:	887b      	ldrh	r3, [r7, #2]
 800045e:	f003 0307 	and.w	r3, r3, #7
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	210f      	movs	r1, #15
 8000466:	fa01 f303 	lsl.w	r3, r1, r3
 800046a:	43db      	mvns	r3, r3
 800046c:	ea02 0103 	and.w	r1, r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	f100 0208 	add.w	r2, r0, #8
 8000476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800047a:	887b      	ldrh	r3, [r7, #2]
 800047c:	08db      	lsrs	r3, r3, #3
 800047e:	b29b      	uxth	r3, r3
 8000480:	461a      	mov	r2, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	3208      	adds	r2, #8
 8000486:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	4313      	orrs	r3, r2
 800048e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000490:	887b      	ldrh	r3, [r7, #2]
 8000492:	08db      	lsrs	r3, r3, #3
 8000494:	b29b      	uxth	r3, r3
 8000496:	461a      	mov	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	3208      	adds	r2, #8
 800049c:	68b9      	ldr	r1, [r7, #8]
 800049e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b089      	sub	sp, #36	; 0x24
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61fb      	str	r3, [r7, #28]
 80004b8:	2300      	movs	r3, #0
 80004ba:	61bb      	str	r3, [r7, #24]
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]
 80004c0:	2300      	movs	r3, #0
 80004c2:	613b      	str	r3, [r7, #16]
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	2300      	movs	r3, #0
 80004ca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004cc:	4b5f      	ldr	r3, [pc, #380]	; (800064c <RCC_GetClocksFreq+0x1a0>)
 80004ce:	689b      	ldr	r3, [r3, #8]
 80004d0:	f003 030c 	and.w	r3, r3, #12
 80004d4:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 80004d6:	69fb      	ldr	r3, [r7, #28]
 80004d8:	2b0c      	cmp	r3, #12
 80004da:	d865      	bhi.n	80005a8 <RCC_GetClocksFreq+0xfc>
 80004dc:	a201      	add	r2, pc, #4	; (adr r2, 80004e4 <RCC_GetClocksFreq+0x38>)
 80004de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e2:	bf00      	nop
 80004e4:	08000519 	.word	0x08000519
 80004e8:	080005a9 	.word	0x080005a9
 80004ec:	080005a9 	.word	0x080005a9
 80004f0:	080005a9 	.word	0x080005a9
 80004f4:	08000539 	.word	0x08000539
 80004f8:	080005a9 	.word	0x080005a9
 80004fc:	080005a9 	.word	0x080005a9
 8000500:	080005a9 	.word	0x080005a9
 8000504:	08000541 	.word	0x08000541
 8000508:	080005a9 	.word	0x080005a9
 800050c:	080005a9 	.word	0x080005a9
 8000510:	080005a9 	.word	0x080005a9
 8000514:	08000549 	.word	0x08000549
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8000518:	4b4c      	ldr	r3, [pc, #304]	; (800064c <RCC_GetClocksFreq+0x1a0>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000520:	0b5b      	lsrs	r3, r3, #13
 8000522:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	3301      	adds	r3, #1
 8000528:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800052c:	fa02 f303 	lsl.w	r3, r2, r3
 8000530:	461a      	mov	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	601a      	str	r2, [r3, #0]
      break;
 8000536:	e047      	b.n	80005c8 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a45      	ldr	r2, [pc, #276]	; (8000650 <RCC_GetClocksFreq+0x1a4>)
 800053c:	601a      	str	r2, [r3, #0]
      break;
 800053e:	e043      	b.n	80005c8 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a44      	ldr	r2, [pc, #272]	; (8000654 <RCC_GetClocksFreq+0x1a8>)
 8000544:	601a      	str	r2, [r3, #0]
      break;
 8000546:	e03f      	b.n	80005c8 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000548:	4b40      	ldr	r3, [pc, #256]	; (800064c <RCC_GetClocksFreq+0x1a0>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000550:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8000552:	4b3e      	ldr	r3, [pc, #248]	; (800064c <RCC_GetClocksFreq+0x1a0>)
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800055a:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 800055c:	69bb      	ldr	r3, [r7, #24]
 800055e:	0c9b      	lsrs	r3, r3, #18
 8000560:	4a3d      	ldr	r2, [pc, #244]	; (8000658 <RCC_GetClocksFreq+0x1ac>)
 8000562:	5cd3      	ldrb	r3, [r2, r3]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	0d9b      	lsrs	r3, r3, #22
 800056c:	3301      	adds	r3, #1
 800056e:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000570:	4b36      	ldr	r3, [pc, #216]	; (800064c <RCC_GetClocksFreq+0x1a0>)
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000578:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d109      	bne.n	8000594 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 8000580:	69bb      	ldr	r3, [r7, #24]
 8000582:	4a33      	ldr	r2, [pc, #204]	; (8000650 <RCC_GetClocksFreq+0x1a4>)
 8000584:	fb02 f203 	mul.w	r2, r2, r3
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	fbb2 f2f3 	udiv	r2, r2, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000592:	e019      	b.n	80005c8 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 8000594:	69bb      	ldr	r3, [r7, #24]
 8000596:	4a2f      	ldr	r2, [pc, #188]	; (8000654 <RCC_GetClocksFreq+0x1a8>)
 8000598:	fb02 f203 	mul.w	r2, r2, r3
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	fbb2 f2f3 	udiv	r2, r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	601a      	str	r2, [r3, #0]
      }
      break;
 80005a6:	e00f      	b.n	80005c8 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 80005a8:	4b28      	ldr	r3, [pc, #160]	; (800064c <RCC_GetClocksFreq+0x1a0>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80005b0:	0b5b      	lsrs	r3, r3, #13
 80005b2:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	3301      	adds	r3, #1
 80005b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005bc:	fa02 f303 	lsl.w	r3, r2, r3
 80005c0:	461a      	mov	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	601a      	str	r2, [r3, #0]
      break;
 80005c6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80005c8:	4b20      	ldr	r3, [pc, #128]	; (800064c <RCC_GetClocksFreq+0x1a0>)
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005d0:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	091b      	lsrs	r3, r3, #4
 80005d6:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 80005d8:	4a20      	ldr	r2, [pc, #128]	; (800065c <RCC_GetClocksFreq+0x1b0>)
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	4413      	add	r3, r2
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	40da      	lsrs	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <RCC_GetClocksFreq+0x1a0>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80005f8:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000600:	4a16      	ldr	r2, [pc, #88]	; (800065c <RCC_GetClocksFreq+0x1b0>)
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	4413      	add	r3, r2
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	685a      	ldr	r2, [r3, #4]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	40da      	lsrs	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <RCC_GetClocksFreq+0x1a0>)
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000620:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	0adb      	lsrs	r3, r3, #11
 8000626:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000628:	4a0c      	ldr	r2, [pc, #48]	; (800065c <RCC_GetClocksFreq+0x1b0>)
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	4413      	add	r3, r2
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	685a      	ldr	r2, [r3, #4]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	40da      	lsrs	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	60da      	str	r2, [r3, #12]
}
 8000640:	bf00      	nop
 8000642:	3724      	adds	r7, #36	; 0x24
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	00f42400 	.word	0x00f42400
 8000654:	007a1200 	.word	0x007a1200
 8000658:	20000000 	.word	0x20000000
 800065c:	2000000c 	.word	0x2000000c

08000660 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800066c:	78fb      	ldrb	r3, [r7, #3]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d006      	beq.n	8000680 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000672:	4909      	ldr	r1, [pc, #36]	; (8000698 <RCC_AHBPeriphClockCmd+0x38>)
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <RCC_AHBPeriphClockCmd+0x38>)
 8000676:	69da      	ldr	r2, [r3, #28]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4313      	orrs	r3, r2
 800067c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800067e:	e006      	b.n	800068e <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000680:	4905      	ldr	r1, [pc, #20]	; (8000698 <RCC_AHBPeriphClockCmd+0x38>)
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <RCC_AHBPeriphClockCmd+0x38>)
 8000684:	69da      	ldr	r2, [r3, #28]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	43db      	mvns	r3, r3
 800068a:	4013      	ands	r3, r2
 800068c:	61cb      	str	r3, [r1, #28]
  }
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	40023800 	.word	0x40023800

0800069c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006a8:	78fb      	ldrb	r3, [r7, #3]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d006      	beq.n	80006bc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80006ae:	4909      	ldr	r1, [pc, #36]	; (80006d4 <RCC_APB1PeriphClockCmd+0x38>)
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <RCC_APB1PeriphClockCmd+0x38>)
 80006b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80006ba:	e006      	b.n	80006ca <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80006bc:	4905      	ldr	r1, [pc, #20]	; (80006d4 <RCC_APB1PeriphClockCmd+0x38>)
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <RCC_APB1PeriphClockCmd+0x38>)
 80006c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	43db      	mvns	r3, r3
 80006c6:	4013      	ands	r3, r2
 80006c8:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	40023800 	.word	0x40023800

080006d8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d008      	beq.n	80006fc <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 80006fa:	e007      	b.n	800070c <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	b29b      	uxth	r3, r3
 8000702:	f023 0301 	bic.w	r3, r3, #1
 8000706:	b29a      	uxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	801a      	strh	r2, [r3, #0]
  }
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop

08000718 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 2, 3, 4, 5, 9, 10 or 11 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8000724:	4618      	mov	r0, r3
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop

08000730 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 2, 3, 4 or 5 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800073c:	4618      	mov	r0, r3
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop

08000748 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 2, 3, 4 or 5 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000754:	4618      	mov	r0, r3
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop

08000760 <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800076c:	2300      	movs	r3, #0
 800076e:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000770:	2300      	movs	r3, #0
 8000772:	81bb      	strh	r3, [r7, #12]
 8000774:	2300      	movs	r3, #0
 8000776:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	8a1b      	ldrh	r3, [r3, #16]
 800077c:	b29a      	uxth	r2, r3
 800077e:	887b      	ldrh	r3, [r7, #2]
 8000780:	4013      	ands	r3, r2
 8000782:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	899b      	ldrh	r3, [r3, #12]
 8000788:	b29a      	uxth	r2, r3
 800078a:	887b      	ldrh	r3, [r7, #2]
 800078c:	4013      	ands	r3, r2
 800078e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000790:	89bb      	ldrh	r3, [r7, #12]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d005      	beq.n	80007a2 <TIM_GetITStatus+0x42>
 8000796:	897b      	ldrh	r3, [r7, #10]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d002      	beq.n	80007a2 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 800079c:	2301      	movs	r3, #1
 800079e:	73fb      	strb	r3, [r7, #15]
 80007a0:	e001      	b.n	80007a6 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80007a2:	2300      	movs	r3, #0
 80007a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop

080007b4 <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80007c0:	887b      	ldrh	r3, [r7, #2]
 80007c2:	43db      	mvns	r3, r3
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	821a      	strh	r2, [r3, #16]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that 
  *        contains the configuration information for the specified USART peripheral.
  * @retval None.
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }
   
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	8a1b      	ldrh	r3, [r3, #16]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80007f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	88db      	ldrh	r3, [r3, #6]
 8000802:	461a      	mov	r2, r3
 8000804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000806:	4313      	orrs	r3, r2
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800080a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080c:	b29a      	uxth	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	899b      	ldrh	r3, [r3, #12]
 8000816:	b29b      	uxth	r3, r3
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800081a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000820:	f023 030c 	bic.w	r3, r3, #12
 8000824:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	889a      	ldrh	r2, [r3, #4]
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	891b      	ldrh	r3, [r3, #8]
 800082e:	4313      	orrs	r3, r2
 8000830:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000836:	4313      	orrs	r3, r2
 8000838:	b29b      	uxth	r3, r3
 800083a:	461a      	mov	r2, r3
 800083c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083e:	4313      	orrs	r3, r2
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000844:	b29a      	uxth	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	8a9b      	ldrh	r3, [r3, #20]
 800084e:	b29b      	uxth	r3, r3
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000858:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	899b      	ldrh	r3, [r3, #12]
 800085e:	461a      	mov	r2, r3
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	4313      	orrs	r3, r2
 8000864:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000868:	b29a      	uxth	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fe1a 	bl	80004ac <RCC_GetClocksFreq>
  if (USARTx == USART1) 
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a2e      	ldr	r2, [pc, #184]	; (8000934 <USART_Init+0x160>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d102      	bne.n	8000886 <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	623b      	str	r3, [r7, #32]
 8000884:	e001      	b.n	800088a <USART_Init+0xb6>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	623b      	str	r3, [r7, #32]
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	899b      	ldrh	r3, [r3, #12]
 800088e:	b29b      	uxth	r3, r3
 8000890:	b21b      	sxth	r3, r3
 8000892:	2b00      	cmp	r3, #0
 8000894:	da0c      	bge.n	80008b0 <USART_Init+0xdc>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000896:	6a3a      	ldr	r2, [r7, #32]
 8000898:	4613      	mov	r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	009a      	lsls	r2, r3, #2
 80008a0:	441a      	add	r2, r3
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ac:	61fb      	str	r3, [r7, #28]
 80008ae:	e00b      	b.n	80008c8 <USART_Init+0xf4>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80008b0:	6a3a      	ldr	r2, [r7, #32]
 80008b2:	4613      	mov	r3, r2
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	4413      	add	r3, r2
 80008b8:	009a      	lsls	r2, r3, #2
 80008ba:	441a      	add	r2, r3
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c6:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	4a1b      	ldr	r2, [pc, #108]	; (8000938 <USART_Init+0x164>)
 80008cc:	fba2 2303 	umull	r2, r3, r2, r3
 80008d0:	095b      	lsrs	r3, r3, #5
 80008d2:	011b      	lsls	r3, r3, #4
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80008d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d8:	091b      	lsrs	r3, r3, #4
 80008da:	2264      	movs	r2, #100	; 0x64
 80008dc:	fb02 f303 	mul.w	r3, r2, r3
 80008e0:	69fa      	ldr	r2, [r7, #28]
 80008e2:	1ad3      	subs	r3, r2, r3
 80008e4:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	899b      	ldrh	r3, [r3, #12]
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	da0c      	bge.n	800090c <USART_Init+0x138>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80008f2:	69bb      	ldr	r3, [r7, #24]
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	3332      	adds	r3, #50	; 0x32
 80008f8:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <USART_Init+0x164>)
 80008fa:	fba2 2303 	umull	r2, r3, r2, r3
 80008fe:	095b      	lsrs	r3, r3, #5
 8000900:	f003 0307 	and.w	r3, r3, #7
 8000904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000906:	4313      	orrs	r3, r2
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
 800090a:	e00b      	b.n	8000924 <USART_Init+0x150>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	011b      	lsls	r3, r3, #4
 8000910:	3332      	adds	r3, #50	; 0x32
 8000912:	4a09      	ldr	r2, [pc, #36]	; (8000938 <USART_Init+0x164>)
 8000914:	fba2 2303 	umull	r2, r3, r2, r3
 8000918:	095b      	lsrs	r3, r3, #5
 800091a:	f003 030f 	and.w	r3, r3, #15
 800091e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000920:	4313      	orrs	r3, r2
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  }
 
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000926:	b29a      	uxth	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	811a      	strh	r2, [r3, #8]
}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40013800 	.word	0x40013800
 8000938:	51eb851f 	.word	0x51eb851f

0800093c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000948:	78fb      	ldrb	r3, [r7, #3]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d008      	beq.n	8000960 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	899b      	ldrh	r3, [r3, #12]
 8000952:	b29b      	uxth	r3, r3
 8000954:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000958:	b29a      	uxth	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800095e:	e007      	b.n	8000970 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	899b      	ldrh	r3, [r3, #12]
 8000964:	b29b      	uxth	r3, r3
 8000966:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800096a:	b29a      	uxth	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	819a      	strh	r2, [r3, #12]
  }
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop

0800097c <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None.
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000988:	887b      	ldrh	r3, [r7, #2]
 800098a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800098e:	b29a      	uxth	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	809a      	strh	r2, [r3, #4]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	889b      	ldrh	r3, [r3, #4]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009b2:	b29b      	uxth	r3, r3
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop

080009c0 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b087      	sub	sp, #28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	807b      	strh	r3, [r7, #2]
 80009cc:	4613      	mov	r3, r2
 80009ce:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80009e4:	887b      	ldrh	r3, [r7, #2]
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	095b      	lsrs	r3, r3, #5
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80009ee:	887b      	ldrh	r3, [r7, #2]
 80009f0:	f003 031f 	and.w	r3, r3, #31
 80009f4:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80009f6:	2201      	movs	r2, #1
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d103      	bne.n	8000a0e <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	330c      	adds	r3, #12
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e009      	b.n	8000a22 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d103      	bne.n	8000a1c <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	3310      	adds	r3, #16
 8000a18:	617b      	str	r3, [r7, #20]
 8000a1a:	e002      	b.n	8000a22 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	3314      	adds	r3, #20
 8000a20:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000a22:	787b      	ldrb	r3, [r7, #1]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d006      	beq.n	8000a36 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	697a      	ldr	r2, [r7, #20]
 8000a2c:	6811      	ldr	r1, [r2, #0]
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	430a      	orrs	r2, r1
 8000a32:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000a34:	e006      	b.n	8000a44 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	6811      	ldr	r1, [r2, #0]
 8000a3c:	68ba      	ldr	r2, [r7, #8]
 8000a3e:	43d2      	mvns	r2, r2
 8000a40:	400a      	ands	r2, r1
 8000a42:	601a      	str	r2, [r3, #0]
  }
}
 8000a44:	bf00      	nop
 8000a46:	371c      	adds	r7, #28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag.
  *     @arg USART_FLAG_PE:   Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	887b      	ldrh	r3, [r7, #2]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d002      	beq.n	8000a76 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000a70:	2301      	movs	r3, #1
 8000a72:	73fb      	strb	r3, [r7, #15]
 8000a74:	e001      	b.n	8000a7a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000a76:	2300      	movs	r3, #0
 8000a78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <USART_ClearFlag>:
  * @note TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8000a94:	887b      	ldrh	r3, [r7, #2]
 8000a96:	43db      	mvns	r3, r3
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	801a      	strh	r2, [r3, #0]
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000ac4:	887b      	ldrh	r3, [r7, #2]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	095b      	lsrs	r3, r3, #5
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000ace:	887b      	ldrh	r3, [r7, #2]
 8000ad0:	f003 031f 	and.w	r3, r3, #31
 8000ad4:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d107      	bne.n	8000af6 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	899b      	ldrh	r3, [r3, #12]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	461a      	mov	r2, r3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	4013      	ands	r3, r2
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	e011      	b.n	8000b1a <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d107      	bne.n	8000b0c <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	8a1b      	ldrh	r3, [r3, #16]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	461a      	mov	r2, r3
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	4013      	ands	r3, r2
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	e006      	b.n	8000b1a <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	8a9b      	ldrh	r3, [r3, #20]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	461a      	mov	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	4013      	ands	r3, r2
 8000b18:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	0a1b      	lsrs	r3, r3, #8
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000b22:	2201      	movs	r2, #1
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	461a      	mov	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4013      	ands	r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d005      	beq.n	8000b4c <USART_GetITStatus+0xa4>
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000b46:	2301      	movs	r3, #1
 8000b48:	74fb      	strb	r3, [r7, #19]
 8000b4a:	e001      	b.n	8000b50 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000b50:	7cfb      	ldrb	r3, [r7, #19]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	371c      	adds	r7, #28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <USART_ClearITPendingBit>:
  * @note TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	81fb      	strh	r3, [r7, #14]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000b70:	887b      	ldrh	r3, [r7, #2]
 8000b72:	0a1b      	lsrs	r3, r3, #8
 8000b74:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000b76:	89fb      	ldrh	r3, [r7, #14]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8000b80:	89bb      	ldrh	r3, [r7, #12]
 8000b82:	43db      	mvns	r3, r3
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	801a      	strh	r2, [r3, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <initUSART2>:
 */


#include <bluetooth.h>

void initUSART2(){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0

	running = 0;
 8000b9a:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <initUSART2+0xc0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
	change_goal_request = 0;
 8000ba0:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <initUSART2+0xc4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
	goal_bearing = 0;
 8000ba6:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <initUSART2+0xc8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000bac:	2101      	movs	r1, #1
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f7ff fd56 	bl	8000660 <RCC_AHBPeriphClockCmd>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8000bb4:	2207      	movs	r2, #7
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	4829      	ldr	r0, [pc, #164]	; (8000c60 <initUSART2+0xcc>)
 8000bba:	f7ff fc2f 	bl	800041c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 8000bbe:	2207      	movs	r2, #7
 8000bc0:	2103      	movs	r1, #3
 8000bc2:	4827      	ldr	r0, [pc, #156]	; (8000c60 <initUSART2+0xcc>)
 8000bc4:	f7ff fc2a 	bl	800041c <GPIO_PinAFConfig>

	GPIO_InitTypeDef GPIO_usrt;

	GPIO_usrt.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8000bc8:	230c      	movs	r3, #12
 8000bca:	61bb      	str	r3, [r7, #24]
	GPIO_usrt.GPIO_Mode = GPIO_Mode_AF;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	773b      	strb	r3, [r7, #28]
	GPIO_usrt.GPIO_OType = GPIO_OType_PP;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	77bb      	strb	r3, [r7, #30]
	GPIO_usrt.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	77fb      	strb	r3, [r7, #31]
	GPIO_usrt.GPIO_Speed = GPIO_Speed_40MHz;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	777b      	strb	r3, [r7, #29]

	GPIO_Init(GPIOA,&GPIO_usrt);
 8000bdc:	f107 0318 	add.w	r3, r7, #24
 8000be0:	4619      	mov	r1, r3
 8000be2:	481f      	ldr	r0, [pc, #124]	; (8000c60 <initUSART2+0xcc>)
 8000be4:	f7ff fb3c 	bl	8000260 <GPIO_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000be8:	2101      	movs	r1, #1
 8000bea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bee:	f7ff fd55 	bl	800069c <RCC_APB1PeriphClockCmd>

	USART_InitTypeDef USART_InitStructure;
	USART_InitStructure.USART_BaudRate = 9600;
 8000bf2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000bf6:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8000c00:	2300      	movs	r3, #0
 8000c02:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000c04:	2300      	movs	r3, #0
 8000c06:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000c08:	230c      	movs	r3, #12
 8000c0a:	827b      	strh	r3, [r7, #18]
	USART_Init(USART2, &USART_InitStructure);
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	4619      	mov	r1, r3
 8000c12:	4814      	ldr	r0, [pc, #80]	; (8000c64 <initUSART2+0xd0>)
 8000c14:	f7ff fdde 	bl	80007d4 <USART_Init>
	USART_Cmd(USART2, ENABLE);
 8000c18:	2101      	movs	r1, #1
 8000c1a:	4812      	ldr	r0, [pc, #72]	; (8000c64 <initUSART2+0xd0>)
 8000c1c:	f7ff fe8e 	bl	800093c <USART_Cmd>

	//interrupt
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000c20:	2201      	movs	r2, #1
 8000c22:	f240 5125 	movw	r1, #1317	; 0x525
 8000c26:	480f      	ldr	r0, [pc, #60]	; (8000c64 <initUSART2+0xd0>)
 8000c28:	f7ff feca 	bl	80009c0 <USART_ITConfig>
	//USART_ITConfig(USART2, USART_IT_TC, ENABLE);

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8000c2c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000c30:	f7ff faa4 	bl	800017c <NVIC_PriorityGroupConfig>

	  /* Enable the USARTx Interrupt */
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8000c34:	2326      	movs	r3, #38	; 0x26
 8000c36:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000c40:	2301      	movs	r3, #1
 8000c42:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff faaa 	bl	80001a0 <NVIC_Init>
}
 8000c4c:	bf00      	nop
 8000c4e:	3720      	adds	r7, #32
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000044 	.word	0x20000044
 8000c58:	20000048 	.word	0x20000048
 8000c5c:	20000040 	.word	0x20000040
 8000c60:	40020000 	.word	0x40020000
 8000c64:	40004400 	.word	0x40004400

08000c68 <USART2_IRQHandler>:
void PutcUART2(char ch){
	USART_SendData(USART2, (uint8_t) ch);

}

void USART2_IRQHandler(void){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0

	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000c6e:	f240 5125 	movw	r1, #1317	; 0x525
 8000c72:	481b      	ldr	r0, [pc, #108]	; (8000ce0 <USART2_IRQHandler+0x78>)
 8000c74:	f7ff ff18 	bl	8000aa8 <USART_GetITStatus>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d02c      	beq.n	8000cd8 <USART2_IRQHandler+0x70>
	{
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8000c7e:	f240 5125 	movw	r1, #1317	; 0x525
 8000c82:	4817      	ldr	r0, [pc, #92]	; (8000ce0 <USART2_IRQHandler+0x78>)
 8000c84:	f7ff ff6a 	bl	8000b5c <USART_ClearITPendingBit>
		char znak = USART_ReceiveData(USART2);
 8000c88:	4815      	ldr	r0, [pc, #84]	; (8000ce0 <USART2_IRQHandler+0x78>)
 8000c8a:	f7ff fe89 	bl	80009a0 <USART_ReceiveData>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]

		//ak v predoslom byte bola poziadavka na zmenu ziadaneho uhla,
		//tak ciel zmeni ak dalsi byte je v zadanom rozsahu
		if (change_goal_request){
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <USART2_IRQHandler+0x7c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d008      	beq.n	8000cac <USART2_IRQHandler+0x44>

			if (znak >= 0 && znak <= GOAL_RANGE)
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2b08      	cmp	r3, #8
 8000c9e:	d802      	bhi.n	8000ca6 <USART2_IRQHandler+0x3e>
			goal_bearing = znak;
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4a11      	ldr	r2, [pc, #68]	; (8000ce8 <USART2_IRQHandler+0x80>)
 8000ca4:	6013      	str	r3, [r2, #0]

			change_goal_request = 0;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <USART2_IRQHandler+0x7c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
		}

		switch (znak){
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	2baa      	cmp	r3, #170	; 0xaa
 8000cb0:	d002      	beq.n	8000cb8 <USART2_IRQHandler+0x50>
 8000cb2:	2bbb      	cmp	r3, #187	; 0xbb
 8000cb4:	d00c      	beq.n	8000cd0 <USART2_IRQHandler+0x68>
		if (retazec[counter] != '\0'){
			PutcUART2(retazec[counter]);
			counter++;
		}*/
    }
}
 8000cb6:	e00f      	b.n	8000cd8 <USART2_IRQHandler+0x70>
			change_goal_request = 0;
		}

		switch (znak){
		case 0xAA:   // vypinanie/zapinanie pohybu
			if (running)
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <USART2_IRQHandler+0x84>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d003      	beq.n	8000cc8 <USART2_IRQHandler+0x60>
					running = 0;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <USART2_IRQHandler+0x84>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
				else running = 1;
			break;
 8000cc6:	e007      	b.n	8000cd8 <USART2_IRQHandler+0x70>

		switch (znak){
		case 0xAA:   // vypinanie/zapinanie pohybu
			if (running)
					running = 0;
				else running = 1;
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <USART2_IRQHandler+0x84>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
			break;
 8000cce:	e003      	b.n	8000cd8 <USART2_IRQHandler+0x70>
		case 0xBB: //poziadavka na zmenu ciela, v dalsom byte sa precita, aky bude novy ciel
			change_goal_request = 1;
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <USART2_IRQHandler+0x7c>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
		if (retazec[counter] != '\0'){
			PutcUART2(retazec[counter]);
			counter++;
		}*/
    }
}
 8000cd6:	e7ff      	b.n	8000cd8 <USART2_IRQHandler+0x70>
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40004400 	.word	0x40004400
 8000ce4:	20000048 	.word	0x20000048
 8000ce8:	20000040 	.word	0x20000040
 8000cec:	20000044 	.word	0x20000044

08000cf0 <init>:
 */

#include <bug_0.h>


int init(){
 8000cf0:	b598      	push	{r3, r4, r7, lr}
 8000cf2:	af00      	add	r7, sp, #0

	//inicializacia premennych
	obstacle_forward = 0;
 8000cf4:	4a11      	ldr	r2, [pc, #68]	; (8000d3c <init+0x4c>)
 8000cf6:	f04f 0300 	mov.w	r3, #0
 8000cfa:	f04f 0400 	mov.w	r4, #0
 8000cfe:	e882 0018 	stmia.w	r2, {r3, r4}
	obstacleRight = 0;
 8000d02:	4a0f      	ldr	r2, [pc, #60]	; (8000d40 <init+0x50>)
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	f04f 0400 	mov.w	r4, #0
 8000d0c:	e882 0018 	stmia.w	r2, {r3, r4}
	obstacleLeft = 0;
 8000d10:	4a0c      	ldr	r2, [pc, #48]	; (8000d44 <init+0x54>)
 8000d12:	f04f 0300 	mov.w	r3, #0
 8000d16:	f04f 0400 	mov.w	r4, #0
 8000d1a:	e882 0018 	stmia.w	r2, {r3, r4}
	bearing = 0;
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <init+0x58>)
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	f04f 0400 	mov.w	r4, #0
 8000d28:	e882 0018 	stmia.w	r2, {r3, r4}
	bearing_error = 0;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <init+0x5c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]

	  initUSART2();
 8000d32:	f7ff ff2f 	bl	8000b94 <initUSART2>
	//inicializacia zvukacov, kompasu a motorov
	return 1;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	bd98      	pop	{r3, r4, r7, pc}
 8000d3c:	20000050 	.word	0x20000050
 8000d40:	20000058 	.word	0x20000058
 8000d44:	20000068 	.word	0x20000068
 8000d48:	20000070 	.word	0x20000070
 8000d4c:	20000060 	.word	0x20000060

08000d50 <TIM6_IRQHandler>:
	return 0;
}

//spracovanie prerusenia z TIM6, casovaca pre kontrolku
void TIM6_IRQHandler(void)
{
 8000d50:	b598      	push	{r3, r4, r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) == SET)
 8000d54:	2101      	movs	r1, #1
 8000d56:	480c      	ldr	r0, [pc, #48]	; (8000d88 <TIM6_IRQHandler+0x38>)
 8000d58:	f7ff fd02 	bl	8000760 <TIM_GetITStatus>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d10f      	bne.n	8000d82 <TIM6_IRQHandler+0x32>
	{
		gTimeStamp++;
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <TIM6_IRQHandler+0x3c>)
 8000d64:	cb18      	ldmia	r3, {r3, r4}
 8000d66:	3301      	adds	r3, #1
 8000d68:	f144 0400 	adc.w	r4, r4, #0
 8000d6c:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <TIM6_IRQHandler+0x3c>)
 8000d6e:	e882 0018 	stmia.w	r2, {r3, r4}
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);//toggle LED PA5
 8000d72:	2120      	movs	r1, #32
 8000d74:	4806      	ldr	r0, [pc, #24]	; (8000d90 <TIM6_IRQHandler+0x40>)
 8000d76:	f7ff fb3d 	bl	80003f4 <GPIO_ToggleBits>
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <TIM6_IRQHandler+0x38>)
 8000d7e:	f7ff fd19 	bl	80007b4 <TIM_ClearITPendingBit>
	}
}
 8000d82:	bf00      	nop
 8000d84:	bd98      	pop	{r3, r4, r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40001000 	.word	0x40001000
 8000d8c:	20000078 	.word	0x20000078
 8000d90:	40020000 	.word	0x40020000

08000d94 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0



	init();
 8000d98:	f7ff ffaa 	bl	8000cf0 <init>

  /* Infinite loop */
	while (1)
	{

	}
 8000d9c:	e7fe      	b.n	8000d9c <main+0x8>
 8000d9e:	bf00      	nop

08000da0 <leftSensorMeasure>:
	GPIO_PinAFConfig(CAPTURE_PORT, FORWARD_CAP_PINSOURCE, GPIO_AF_TIM3);
}

//spustenie merania laveho dialkomeru
void leftSensorMeasure(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 8000da4:	2101      	movs	r1, #1
 8000da6:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <leftSensorMeasure+0x28>)
 8000da8:	f7ff fc96 	bl	80006d8 <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, LEFT_TRIG_PIN, Bit_SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <leftSensorMeasure+0x2c>)
 8000db4:	f7ff fb06 	bl	80003c4 <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	LeftSensorCaptureStruc.captureStep = 0;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <leftSensorMeasure+0x30>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = leftSensorCaptureHandler;
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <leftSensorMeasure+0x34>)
 8000dc0:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <leftSensorMeasure+0x38>)
 8000dc2:	601a      	str	r2, [r3, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40001400 	.word	0x40001400
 8000dcc:	40020000 	.word	0x40020000
 8000dd0:	20000098 	.word	0x20000098
 8000dd4:	200000bc 	.word	0x200000bc
 8000dd8:	08000f59 	.word	0x08000f59

08000ddc <rightSensorMeasure>:
//spustenie merania praveho dialkomeru
void rightSensorMeasure(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 8000de0:	2101      	movs	r1, #1
 8000de2:	4808      	ldr	r0, [pc, #32]	; (8000e04 <rightSensorMeasure+0x28>)
 8000de4:	f7ff fc78 	bl	80006d8 <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, RIGHT_TRIG_PIN, Bit_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dee:	4806      	ldr	r0, [pc, #24]	; (8000e08 <rightSensorMeasure+0x2c>)
 8000df0:	f7ff fae8 	bl	80003c4 <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	RightSensorCaptureStruc.captureStep = 0;
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <rightSensorMeasure+0x30>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = rightSensorCaptureHandler;
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <rightSensorMeasure+0x34>)
 8000dfc:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <rightSensorMeasure+0x38>)
 8000dfe:	601a      	str	r2, [r3, #0]
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40001400 	.word	0x40001400
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	20000088 	.word	0x20000088
 8000e10:	200000bc 	.word	0x200000bc
 8000e14:	08000fb9 	.word	0x08000fb9

08000e18 <forwardSensorMeasure>:
//spustenie memrania predneho dialkomeru
void forwardSensorMeasure(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4808      	ldr	r0, [pc, #32]	; (8000e40 <forwardSensorMeasure+0x28>)
 8000e20:	f7ff fc5a 	bl	80006d8 <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, FORWARD_TRIG_PIN, Bit_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e2a:	4806      	ldr	r0, [pc, #24]	; (8000e44 <forwardSensorMeasure+0x2c>)
 8000e2c:	f7ff faca 	bl	80003c4 <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	ForwardSensorCaptureStruc.captureStep = 0;
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <forwardSensorMeasure+0x30>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = forwardSensorCaptureHandler;
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <forwardSensorMeasure+0x34>)
 8000e38:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <forwardSensorMeasure+0x38>)
 8000e3a:	601a      	str	r2, [r3, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40001400 	.word	0x40001400
 8000e44:	40020000 	.word	0x40020000
 8000e48:	200000a8 	.word	0x200000a8
 8000e4c:	200000bc 	.word	0x200000bc
 8000e50:	08001019 	.word	0x08001019

08000e54 <TIM7_IRQHandler>:

//handlery bude treba dat do suboru, ktory bude urcovat veci specificke pre dany hardver
//samotne funkcie ktore ma vykonat ale ostanu tu
//spracovanie prerusenia z TRIG_TIM, casovac pre spustaci impulz dialkomeru
void TIM7_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	//tez do samostatnej funkcie alebo mozno bude stacit #define fjdkkdf nazov funkcie
	if (TIM_GetITStatus(TRIG_TIM, TIM_IT_Update) == SET)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	481e      	ldr	r0, [pc, #120]	; (8000ed4 <TIM7_IRQHandler+0x80>)
 8000e5c:	f7ff fc80 	bl	8000760 <TIM_GetITStatus>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d133      	bne.n	8000ece <TIM7_IRQHandler+0x7a>
	{
		TIM_Cmd(TRIG_TIM, DISABLE);
 8000e66:	2100      	movs	r1, #0
 8000e68:	481a      	ldr	r0, [pc, #104]	; (8000ed4 <TIM7_IRQHandler+0x80>)
 8000e6a:	f7ff fc35 	bl	80006d8 <TIM_Cmd>
		//vypnutie impulzu na prislusnom spustacom pine
		if (GPIO_ReadOutputDataBit(TRIG_PORT, LEFT_TRIG_PIN) == 1)
 8000e6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e72:	4819      	ldr	r0, [pc, #100]	; (8000ed8 <TIM7_IRQHandler+0x84>)
 8000e74:	f7ff fa8a 	bl	800038c <GPIO_ReadOutputDataBit>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d106      	bne.n	8000e8c <TIM7_IRQHandler+0x38>
		{
			GPIO_WriteBit(TRIG_PORT, LEFT_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu left
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e84:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <TIM7_IRQHandler+0x84>)
 8000e86:	f7ff fa9d 	bl	80003c4 <GPIO_WriteBit>
 8000e8a:	e01c      	b.n	8000ec6 <TIM7_IRQHandler+0x72>
		}
		else if (GPIO_ReadOutputDataBit(TRIG_PORT, RIGHT_TRIG_PIN) == 1)
 8000e8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e90:	4811      	ldr	r0, [pc, #68]	; (8000ed8 <TIM7_IRQHandler+0x84>)
 8000e92:	f7ff fa7b 	bl	800038c <GPIO_ReadOutputDataBit>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d106      	bne.n	8000eaa <TIM7_IRQHandler+0x56>
		{
			GPIO_WriteBit(TRIG_PORT, RIGHT_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu right
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea2:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <TIM7_IRQHandler+0x84>)
 8000ea4:	f7ff fa8e 	bl	80003c4 <GPIO_WriteBit>
 8000ea8:	e00d      	b.n	8000ec6 <TIM7_IRQHandler+0x72>
		}
		else if (GPIO_ReadOutputDataBit(TRIG_PORT, FORWARD_TRIG_PIN) == 1)
 8000eaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eae:	480a      	ldr	r0, [pc, #40]	; (8000ed8 <TIM7_IRQHandler+0x84>)
 8000eb0:	f7ff fa6c 	bl	800038c <GPIO_ReadOutputDataBit>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d105      	bne.n	8000ec6 <TIM7_IRQHandler+0x72>
		{
			GPIO_WriteBit(TRIG_PORT, FORWARD_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu forward
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <TIM7_IRQHandler+0x84>)
 8000ec2:	f7ff fa7f 	bl	80003c4 <GPIO_WriteBit>
		}
		TIM_ClearITPendingBit(TRIG_TIM, TIM_IT_Update);
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <TIM7_IRQHandler+0x80>)
 8000eca:	f7ff fc73 	bl	80007b4 <TIM_ClearITPendingBit>
	}
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40001400 	.word	0x40001400
 8000ed8:	40020000 	.word	0x40020000

08000edc <TIM3_IRQHandler>:
//spracovanie prerusenia z TIM3, casovac pre meranie dlzky impulzu z dialialkomerov
void TIM3_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	//spustenie spracovania prerusenia CAPTURE_TIM pre prislusny senzor
	if (sensorCaptureHandler != 0)
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <TIM3_IRQHandler+0x18>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d002      	beq.n	8000eee <TIM3_IRQHandler+0x12>
	{
		sensorCaptureHandler();
 8000ee8:	4b02      	ldr	r3, [pc, #8]	; (8000ef4 <TIM3_IRQHandler+0x18>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4798      	blx	r3
	}
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200000bc 	.word	0x200000bc

08000ef8 <TIM10_IRQHandler>:
//spracovanie prerusenia z casovaca pre volanie merania vzdialenosti
void TIM10_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(SENSOR_CALL_TIM, TIM_IT_Update) == SET)
 8000efc:	2101      	movs	r1, #1
 8000efe:	4814      	ldr	r0, [pc, #80]	; (8000f50 <TIM10_IRQHandler+0x58>)
 8000f00:	f7ff fc2e 	bl	8000760 <TIM_GetITStatus>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d120      	bne.n	8000f4c <TIM10_IRQHandler+0x54>
	{
		//volanie merania senzora, ktory je na rade
		switch (selectSensor)
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <TIM10_IRQHandler+0x5c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d006      	beq.n	8000f20 <TIM10_IRQHandler+0x28>
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d007      	beq.n	8000f26 <TIM10_IRQHandler+0x2e>
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d108      	bne.n	8000f2c <TIM10_IRQHandler+0x34>
		{
		case 0:
			leftSensorMeasure();
 8000f1a:	f7ff ff41 	bl	8000da0 <leftSensorMeasure>
			break;
 8000f1e:	e005      	b.n	8000f2c <TIM10_IRQHandler+0x34>
		case 1:
			forwardSensorMeasure();
 8000f20:	f7ff ff7a 	bl	8000e18 <forwardSensorMeasure>
			break;
 8000f24:	e002      	b.n	8000f2c <TIM10_IRQHandler+0x34>
		case 2:
			rightSensorMeasure();
 8000f26:	f7ff ff59 	bl	8000ddc <rightSensorMeasure>
			break;
 8000f2a:	bf00      	nop
		}
		//inkrementovanie volaneho senzora
		selectSensor++;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <TIM10_IRQHandler+0x5c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	3301      	adds	r3, #1
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <TIM10_IRQHandler+0x5c>)
 8000f34:	6013      	str	r3, [r2, #0]
		if (selectSensor > 2)
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <TIM10_IRQHandler+0x5c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	dd02      	ble.n	8000f44 <TIM10_IRQHandler+0x4c>
		{
			selectSensor = 0;
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <TIM10_IRQHandler+0x5c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
		}
		TIM_ClearITPendingBit(SENSOR_CALL_TIM, TIM_IT_Update);
 8000f44:	2101      	movs	r1, #1
 8000f46:	4802      	ldr	r0, [pc, #8]	; (8000f50 <TIM10_IRQHandler+0x58>)
 8000f48:	f7ff fc34 	bl	80007b4 <TIM_ClearITPendingBit>
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40010c00 	.word	0x40010c00
 8000f54:	2000003c 	.word	0x2000003c

08000f58 <leftSensorCaptureHandler>:

//meranie dlzky impulzu lavy senzor
void leftSensorCaptureHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, LEFT_TIM_CC) != RESET)
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	4814      	ldr	r0, [pc, #80]	; (8000fb0 <leftSensorCaptureHandler+0x58>)
 8000f60:	f7ff fbfe 	bl	8000760 <TIM_GetITStatus>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d01f      	beq.n	8000faa <leftSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, LEFT_TIM_CC);
 8000f6a:	2108      	movs	r1, #8
 8000f6c:	4810      	ldr	r0, [pc, #64]	; (8000fb0 <leftSensorCaptureHandler+0x58>)
 8000f6e:	f7ff fc21 	bl	80007b4 <TIM_ClearITPendingBit>

		if(LeftSensorCaptureStruc.captureStep == 0)
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <leftSensorCaptureHandler+0x5c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d109      	bne.n	8000f8e <leftSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			LeftSensorCaptureStruc.risingTimeCapturing = LEFT_TIM_GETCAPTURE;
 8000f7a:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <leftSensorCaptureHandler+0x58>)
 8000f7c:	f7ff fbd8 	bl	8000730 <TIM_GetCapture3>
 8000f80:	4602      	mov	r2, r0
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <leftSensorCaptureHandler+0x5c>)
 8000f84:	605a      	str	r2, [r3, #4]
			LeftSensorCaptureStruc.captureStep = 1;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <leftSensorCaptureHandler+0x5c>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			LeftSensorCaptureStruc.fallingTime = LEFT_TIM_GETCAPTURE;
			LeftSensorCaptureStruc.risingTime = LeftSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 8000f8c:	e00d      	b.n	8000faa <leftSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			LeftSensorCaptureStruc.risingTimeCapturing = LEFT_TIM_GETCAPTURE;
			LeftSensorCaptureStruc.captureStep = 1;
		}
		else if(LeftSensorCaptureStruc.captureStep == 1)
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <leftSensorCaptureHandler+0x5c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d109      	bne.n	8000faa <leftSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			LeftSensorCaptureStruc.fallingTime = LEFT_TIM_GETCAPTURE;
 8000f96:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <leftSensorCaptureHandler+0x58>)
 8000f98:	f7ff fbca 	bl	8000730 <TIM_GetCapture3>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <leftSensorCaptureHandler+0x5c>)
 8000fa0:	60da      	str	r2, [r3, #12]
			LeftSensorCaptureStruc.risingTime = LeftSensorCaptureStruc.risingTimeCapturing;
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <leftSensorCaptureHandler+0x5c>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	4a03      	ldr	r2, [pc, #12]	; (8000fb4 <leftSensorCaptureHandler+0x5c>)
 8000fa8:	6093      	str	r3, [r2, #8]
		}
	}
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40000400 	.word	0x40000400
 8000fb4:	20000098 	.word	0x20000098

08000fb8 <rightSensorCaptureHandler>:
//meranie dlzky impulzu lavy senzor
void rightSensorCaptureHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, RIGHT_TIM_CC) != RESET)
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	4814      	ldr	r0, [pc, #80]	; (8001010 <rightSensorCaptureHandler+0x58>)
 8000fc0:	f7ff fbce 	bl	8000760 <TIM_GetITStatus>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d01f      	beq.n	800100a <rightSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, RIGHT_TIM_CC);
 8000fca:	2102      	movs	r1, #2
 8000fcc:	4810      	ldr	r0, [pc, #64]	; (8001010 <rightSensorCaptureHandler+0x58>)
 8000fce:	f7ff fbf1 	bl	80007b4 <TIM_ClearITPendingBit>

		if(RightSensorCaptureStruc.captureStep == 0)
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <rightSensorCaptureHandler+0x5c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d109      	bne.n	8000fee <rightSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			RightSensorCaptureStruc.risingTimeCapturing = RIGHT_TIM_GETCAPTURE;
 8000fda:	480d      	ldr	r0, [pc, #52]	; (8001010 <rightSensorCaptureHandler+0x58>)
 8000fdc:	f7ff fb9c 	bl	8000718 <TIM_GetCapture1>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <rightSensorCaptureHandler+0x5c>)
 8000fe4:	605a      	str	r2, [r3, #4]
			RightSensorCaptureStruc.captureStep = 1;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <rightSensorCaptureHandler+0x5c>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			RightSensorCaptureStruc.fallingTime = RIGHT_TIM_GETCAPTURE;
			RightSensorCaptureStruc.risingTime = RightSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 8000fec:	e00d      	b.n	800100a <rightSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			RightSensorCaptureStruc.risingTimeCapturing = RIGHT_TIM_GETCAPTURE;
			RightSensorCaptureStruc.captureStep = 1;
		}
		else if(RightSensorCaptureStruc.captureStep == 1)
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <rightSensorCaptureHandler+0x5c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d109      	bne.n	800100a <rightSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			RightSensorCaptureStruc.fallingTime = RIGHT_TIM_GETCAPTURE;
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <rightSensorCaptureHandler+0x58>)
 8000ff8:	f7ff fb8e 	bl	8000718 <TIM_GetCapture1>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <rightSensorCaptureHandler+0x5c>)
 8001000:	60da      	str	r2, [r3, #12]
			RightSensorCaptureStruc.risingTime = RightSensorCaptureStruc.risingTimeCapturing;
 8001002:	4b04      	ldr	r3, [pc, #16]	; (8001014 <rightSensorCaptureHandler+0x5c>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	4a03      	ldr	r2, [pc, #12]	; (8001014 <rightSensorCaptureHandler+0x5c>)
 8001008:	6093      	str	r3, [r2, #8]
		}
	}
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40000400 	.word	0x40000400
 8001014:	20000088 	.word	0x20000088

08001018 <forwardSensorCaptureHandler>:
//meranie dlzky impulzu lavy senzor
void forwardSensorCaptureHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, FORWARD_TIM_CC) != RESET)
 800101c:	2110      	movs	r1, #16
 800101e:	4814      	ldr	r0, [pc, #80]	; (8001070 <forwardSensorCaptureHandler+0x58>)
 8001020:	f7ff fb9e 	bl	8000760 <TIM_GetITStatus>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d01f      	beq.n	800106a <forwardSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, FORWARD_TIM_CC);
 800102a:	2110      	movs	r1, #16
 800102c:	4810      	ldr	r0, [pc, #64]	; (8001070 <forwardSensorCaptureHandler+0x58>)
 800102e:	f7ff fbc1 	bl	80007b4 <TIM_ClearITPendingBit>

		if(ForwardSensorCaptureStruc.captureStep == 0)
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <forwardSensorCaptureHandler+0x5c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d109      	bne.n	800104e <forwardSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			ForwardSensorCaptureStruc.risingTimeCapturing = FORWARD_TIM_GETCAPTURE;
 800103a:	480d      	ldr	r0, [pc, #52]	; (8001070 <forwardSensorCaptureHandler+0x58>)
 800103c:	f7ff fb84 	bl	8000748 <TIM_GetCapture4>
 8001040:	4602      	mov	r2, r0
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <forwardSensorCaptureHandler+0x5c>)
 8001044:	605a      	str	r2, [r3, #4]
			ForwardSensorCaptureStruc.captureStep = 1;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <forwardSensorCaptureHandler+0x5c>)
 8001048:	2201      	movs	r2, #1
 800104a:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			ForwardSensorCaptureStruc.fallingTime = FORWARD_TIM_GETCAPTURE;
			ForwardSensorCaptureStruc.risingTime = ForwardSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 800104c:	e00d      	b.n	800106a <forwardSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			ForwardSensorCaptureStruc.risingTimeCapturing = FORWARD_TIM_GETCAPTURE;
			ForwardSensorCaptureStruc.captureStep = 1;
		}
		else if(ForwardSensorCaptureStruc.captureStep == 1)
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <forwardSensorCaptureHandler+0x5c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d109      	bne.n	800106a <forwardSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			ForwardSensorCaptureStruc.fallingTime = FORWARD_TIM_GETCAPTURE;
 8001056:	4806      	ldr	r0, [pc, #24]	; (8001070 <forwardSensorCaptureHandler+0x58>)
 8001058:	f7ff fb76 	bl	8000748 <TIM_GetCapture4>
 800105c:	4602      	mov	r2, r0
 800105e:	4b05      	ldr	r3, [pc, #20]	; (8001074 <forwardSensorCaptureHandler+0x5c>)
 8001060:	60da      	str	r2, [r3, #12]
			ForwardSensorCaptureStruc.risingTime = ForwardSensorCaptureStruc.risingTimeCapturing;
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <forwardSensorCaptureHandler+0x5c>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	4a03      	ldr	r2, [pc, #12]	; (8001074 <forwardSensorCaptureHandler+0x5c>)
 8001068:	6093      	str	r3, [r2, #8]
		}
	}
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40000400 	.word	0x40000400
 8001074:	200000a8 	.word	0x200000a8

08001078 <USART3_IRQHandler>:

	return 0;
}

void PRN_USART_IRQHANDLER(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(PRN_USART, USART_IT_RXNE) != RESET)
 800107c:	f240 5125 	movw	r1, #1317	; 0x525
 8001080:	481d      	ldr	r0, [pc, #116]	; (80010f8 <USART3_IRQHandler+0x80>)
 8001082:	f7ff fd11 	bl	8000aa8 <USART_GetITStatus>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00b      	beq.n	80010a4 <USART3_IRQHandler+0x2c>
	{
		USART_ClearITPendingBit(PRN_USART, USART_IT_RXNE);
 800108c:	f240 5125 	movw	r1, #1317	; 0x525
 8001090:	4819      	ldr	r0, [pc, #100]	; (80010f8 <USART3_IRQHandler+0x80>)
 8001092:	f7ff fd63 	bl	8000b5c <USART_ClearITPendingBit>
		receivedChar = USART_ReceiveData(PRN_USART);
 8001096:	4818      	ldr	r0, [pc, #96]	; (80010f8 <USART3_IRQHandler+0x80>)
 8001098:	f7ff fc82 	bl	80009a0 <USART_ReceiveData>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <USART3_IRQHandler+0x84>)
 80010a2:	801a      	strh	r2, [r3, #0]
	}
	if(USART_GetFlagStatus(PRN_USART, USART_FLAG_TC) != RESET)
 80010a4:	2140      	movs	r1, #64	; 0x40
 80010a6:	4814      	ldr	r0, [pc, #80]	; (80010f8 <USART3_IRQHandler+0x80>)
 80010a8:	f7ff fcd2 	bl	8000a50 <USART_GetFlagStatus>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d020      	beq.n	80010f4 <USART3_IRQHandler+0x7c>
	{
		USART_ClearFlag(PRN_USART, USART_FLAG_TC);
 80010b2:	2140      	movs	r1, #64	; 0x40
 80010b4:	4810      	ldr	r0, [pc, #64]	; (80010f8 <USART3_IRQHandler+0x80>)
 80010b6:	f7ff fce7 	bl	8000a88 <USART_ClearFlag>
		USARTbufferInkr++;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <USART3_IRQHandler+0x88>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <USART3_IRQHandler+0x88>)
 80010c2:	6013      	str	r3, [r2, #0]
		if( USARTbufferOut[USARTbufferInkr] != '\0')
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <USART3_IRQHandler+0x88>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <USART3_IRQHandler+0x8c>)
 80010ca:	5cd3      	ldrb	r3, [r2, r3]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00a      	beq.n	80010e8 <USART3_IRQHandler+0x70>
		{
			USART_SendData(PRN_USART, USARTbufferOut[USARTbufferInkr]);
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <USART3_IRQHandler+0x88>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <USART3_IRQHandler+0x8c>)
 80010d8:	5cd3      	ldrb	r3, [r2, r3]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <USART3_IRQHandler+0x80>)
 80010e2:	f7ff fc4b 	bl	800097c <USART_SendData>
		{
			USARTbufferInkr = 0;
			USARTbufferRDY = 1;
		}
	}
}
 80010e6:	e005      	b.n	80010f4 <USART3_IRQHandler+0x7c>
		{
			USART_SendData(PRN_USART, USARTbufferOut[USARTbufferInkr]);
		}
		else
		{
			USARTbufferInkr = 0;
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <USART3_IRQHandler+0x88>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
			USARTbufferRDY = 1;
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <USART3_IRQHandler+0x90>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40004800 	.word	0x40004800
 80010fc:	200000b8 	.word	0x200000b8
 8001100:	20000084 	.word	0x20000084
 8001104:	200000c0 	.word	0x200000c0
 8001108:	20000080 	.word	0x20000080

0800110c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001144 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001110:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001112:	e003      	b.n	800111c <LoopCopyDataInit>

08001114 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8001116:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001118:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800111a:	3104      	adds	r1, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800111c:	480b      	ldr	r0, [pc, #44]	; (800114c <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8001120:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001122:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001124:	d3f6      	bcc.n	8001114 <CopyDataInit>
  ldr r2, =_sbss
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8001128:	e002      	b.n	8001130 <LoopFillZerobss>

0800112a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800112c:	f842 3b04 	str.w	r3, [r2], #4

08001130 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8001132:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001134:	d3f9      	bcc.n	800112a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001136:	f000 f841 	bl	80011bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113a:	f000 f903 	bl	8001344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800113e:	f7ff fe29 	bl	8000d94 <main>
  bx lr
 8001142:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001144:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001148:	080013b0 	.word	0x080013b0
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001150:	2000001c 	.word	0x2000001c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8001154:	20000020 	.word	0x20000020
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8001158:	20000124 	.word	0x20000124

0800115c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC1_IRQHandler>
	...

08001160 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001170:	e7fe      	b.n	8001170 <HardFault_Handler+0x4>
 8001172:	bf00      	nop

08001174 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001178:	e7fe      	b.n	8001178 <MemManage_Handler+0x4>
 800117a:	bf00      	nop

0800117c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001180:	e7fe      	b.n	8001180 <BusFault_Handler+0x4>
 8001182:	bf00      	nop

08001184 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001188:	e7fe      	b.n	8001188 <UsageFault_Handler+0x4>
 800118a:	bf00      	nop

0800118c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80011c0:	4a15      	ldr	r2, [pc, #84]	; (8001218 <SystemInit+0x5c>)
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <SystemInit+0x5c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ca:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80011cc:	4912      	ldr	r1, [pc, #72]	; (8001218 <SystemInit+0x5c>)
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <SystemInit+0x5c>)
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <SystemInit+0x60>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80011d8:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <SystemInit+0x5c>)
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <SystemInit+0x5c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80011e2:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80011e6:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011e8:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <SystemInit+0x5c>)
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <SystemInit+0x5c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f2:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80011f4:	4a08      	ldr	r2, [pc, #32]	; (8001218 <SystemInit+0x5c>)
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <SystemInit+0x5c>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80011fe:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <SystemInit+0x5c>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8001206:	f000 f80d 	bl	8001224 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800120a:	4b05      	ldr	r3, [pc, #20]	; (8001220 <SystemInit+0x64>)
 800120c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001210:	609a      	str	r2, [r3, #8]
#endif
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	88ffc00c 	.word	0x88ffc00c
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	2300      	movs	r3, #0
 8001230:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001232:	4a41      	ldr	r2, [pc, #260]	; (8001338 <SetSysClock+0x114>)
 8001234:	4b40      	ldr	r3, [pc, #256]	; (8001338 <SetSysClock+0x114>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800123e:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <SetSysClock+0x114>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3301      	adds	r3, #1
 800124c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d103      	bne.n	800125c <SetSysClock+0x38>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800125a:	d1f0      	bne.n	800123e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <SetSysClock+0x114>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001268:	2301      	movs	r3, #1
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	e001      	b.n	8001272 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d15a      	bne.n	800132e <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001278:	4a30      	ldr	r2, [pc, #192]	; (800133c <SetSysClock+0x118>)
 800127a:	4b30      	ldr	r3, [pc, #192]	; (800133c <SetSysClock+0x118>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8001284:	4a2d      	ldr	r2, [pc, #180]	; (800133c <SetSysClock+0x118>)
 8001286:	4b2d      	ldr	r3, [pc, #180]	; (800133c <SetSysClock+0x118>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f043 0302 	orr.w	r3, r3, #2
 800128e:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8001290:	4a2a      	ldr	r2, [pc, #168]	; (800133c <SetSysClock+0x118>)
 8001292:	4b2a      	ldr	r3, [pc, #168]	; (800133c <SetSysClock+0x118>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800129c:	4a26      	ldr	r2, [pc, #152]	; (8001338 <SetSysClock+0x114>)
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <SetSysClock+0x114>)
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a6:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 80012a8:	4b25      	ldr	r3, [pc, #148]	; (8001340 <SetSysClock+0x11c>)
 80012aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ae:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 80012b0:	bf00      	nop
 80012b2:	4b23      	ldr	r3, [pc, #140]	; (8001340 <SetSysClock+0x11c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f9      	bne.n	80012b2 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80012be:	4a1e      	ldr	r2, [pc, #120]	; (8001338 <SetSysClock+0x114>)
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <SetSysClock+0x114>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80012c6:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <SetSysClock+0x114>)
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <SetSysClock+0x114>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 80012ce:	4a1a      	ldr	r2, [pc, #104]	; (8001338 <SetSysClock+0x114>)
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <SetSysClock+0x114>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 80012d6:	4a18      	ldr	r2, [pc, #96]	; (8001338 <SetSysClock+0x114>)
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <SetSysClock+0x114>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80012e0:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 80012e2:	4a15      	ldr	r2, [pc, #84]	; (8001338 <SetSysClock+0x114>)
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <SetSysClock+0x114>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 80012ec:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80012ee:	4a12      	ldr	r2, [pc, #72]	; (8001338 <SetSysClock+0x114>)
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <SetSysClock+0x114>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012f8:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80012fa:	bf00      	nop
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <SetSysClock+0x114>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0f9      	beq.n	80012fc <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001308:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <SetSysClock+0x114>)
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <SetSysClock+0x114>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f023 0303 	bic.w	r3, r3, #3
 8001312:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001314:	4a08      	ldr	r2, [pc, #32]	; (8001338 <SetSysClock+0x114>)
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <SetSysClock+0x114>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f043 0303 	orr.w	r3, r3, #3
 800131e:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001320:	bf00      	nop
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <SetSysClock+0x114>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b0c      	cmp	r3, #12
 800132c:	d1f9      	bne.n	8001322 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	40023800 	.word	0x40023800
 800133c:	40023c00 	.word	0x40023c00
 8001340:	40007000 	.word	0x40007000

08001344 <__libc_init_array>:
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <__libc_init_array+0x3c>)
 8001346:	b570      	push	{r4, r5, r6, lr}
 8001348:	461e      	mov	r6, r3
 800134a:	4c0e      	ldr	r4, [pc, #56]	; (8001384 <__libc_init_array+0x40>)
 800134c:	2500      	movs	r5, #0
 800134e:	1ae4      	subs	r4, r4, r3
 8001350:	10a4      	asrs	r4, r4, #2
 8001352:	42a5      	cmp	r5, r4
 8001354:	d004      	beq.n	8001360 <__libc_init_array+0x1c>
 8001356:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800135a:	4798      	blx	r3
 800135c:	3501      	adds	r5, #1
 800135e:	e7f8      	b.n	8001352 <__libc_init_array+0xe>
 8001360:	f000 f816 	bl	8001390 <_init>
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <__libc_init_array+0x44>)
 8001366:	4c09      	ldr	r4, [pc, #36]	; (800138c <__libc_init_array+0x48>)
 8001368:	461e      	mov	r6, r3
 800136a:	1ae4      	subs	r4, r4, r3
 800136c:	10a4      	asrs	r4, r4, #2
 800136e:	2500      	movs	r5, #0
 8001370:	42a5      	cmp	r5, r4
 8001372:	d004      	beq.n	800137e <__libc_init_array+0x3a>
 8001374:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001378:	4798      	blx	r3
 800137a:	3501      	adds	r5, #1
 800137c:	e7f8      	b.n	8001370 <__libc_init_array+0x2c>
 800137e:	bd70      	pop	{r4, r5, r6, pc}
 8001380:	080013a8 	.word	0x080013a8
 8001384:	080013a8 	.word	0x080013a8
 8001388:	080013a8 	.word	0x080013a8
 800138c:	080013ac 	.word	0x080013ac

08001390 <_init>:
 8001390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001392:	bf00      	nop
 8001394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001396:	bc08      	pop	{r3}
 8001398:	469e      	mov	lr, r3
 800139a:	4770      	bx	lr

0800139c <_fini>:
 800139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800139e:	bf00      	nop
 80013a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013a2:	bc08      	pop	{r3}
 80013a4:	469e      	mov	lr, r3
 80013a6:	4770      	bx	lr
