
vrs_projekt_bug0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f64  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080010a0  080010a0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080010a0  080010a0  000110a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080010a4  080010a4  000110a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  080010a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000e4  20000010  080010b8  00020010  2**3
                  ALLOC
  7 ._user_heap_stack 00000400  200000f4  080010b8  000200f4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006cea  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001268  00000000  00000000  00026d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000878  00000000  00000000  00027f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007d0  00000000  00000000  00028808  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002d14  00000000  00000000  00028fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002656  00000000  00000000  0002bcec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002e342  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000022b4  00000000  00000000  0002e3c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00030674  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	08001088 	.word	0x08001088

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	08001088 	.word	0x08001088

0800017c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000184:	2300      	movs	r3, #0
 8000186:	73fb      	strb	r3, [r7, #15]
 8000188:	2300      	movs	r3, #0
 800018a:	73bb      	strb	r3, [r7, #14]
 800018c:	230f      	movs	r3, #15
 800018e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	78db      	ldrb	r3, [r3, #3]
 8000194:	2b00      	cmp	r3, #0
 8000196:	d038      	beq.n	800020a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000198:	4b26      	ldr	r3, [pc, #152]	; (8000234 <NVIC_Init+0xb8>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	43db      	mvns	r3, r3
 800019e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001a2:	0a1b      	lsrs	r3, r3, #8
 80001a4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001a6:	7bfb      	ldrb	r3, [r7, #15]
 80001a8:	f1c3 0304 	rsb	r3, r3, #4
 80001ac:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001ae:	7b7a      	ldrb	r2, [r7, #13]
 80001b0:	7bfb      	ldrb	r3, [r7, #15]
 80001b2:	fa42 f303 	asr.w	r3, r2, r3
 80001b6:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	785b      	ldrb	r3, [r3, #1]
 80001bc:	461a      	mov	r2, r3
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	fa02 f303 	lsl.w	r3, r2, r3
 80001c4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	789a      	ldrb	r2, [r3, #2]
 80001ca:	7b7b      	ldrb	r3, [r7, #13]
 80001cc:	4013      	ands	r3, r2
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	7bfb      	ldrb	r3, [r7, #15]
 80001d2:	4313      	orrs	r3, r2
 80001d4:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 80001d6:	7bfb      	ldrb	r3, [r7, #15]
 80001d8:	011b      	lsls	r3, r3, #4
 80001da:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001dc:	4a16      	ldr	r2, [pc, #88]	; (8000238 <NVIC_Init+0xbc>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	4413      	add	r3, r2
 80001e4:	7bfa      	ldrb	r2, [r7, #15]
 80001e6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001ea:	4a13      	ldr	r2, [pc, #76]	; (8000238 <NVIC_Init+0xbc>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	095b      	lsrs	r3, r3, #5
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	f003 031f 	and.w	r3, r3, #31
 80001fe:	2101      	movs	r1, #1
 8000200:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000204:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000208:	e00f      	b.n	800022a <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800020a:	490b      	ldr	r1, [pc, #44]	; (8000238 <NVIC_Init+0xbc>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	095b      	lsrs	r3, r3, #5
 8000212:	b2db      	uxtb	r3, r3
 8000214:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	f003 031f 	and.w	r3, r3, #31
 800021e:	2201      	movs	r2, #1
 8000220:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000222:	f100 0320 	add.w	r3, r0, #32
 8000226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800022a:	bf00      	nop
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	e000e100 	.word	0xe000e100

0800023c <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800023c:	b480      	push	{r7}
 800023e:	b087      	sub	sp, #28
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000246:	2300      	movs	r3, #0
 8000248:	617b      	str	r3, [r7, #20]
 800024a:	2300      	movs	r3, #0
 800024c:	613b      	str	r3, [r7, #16]
 800024e:	2300      	movs	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000252:	2300      	movs	r3, #0
 8000254:	617b      	str	r3, [r7, #20]
 8000256:	e07e      	b.n	8000356 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000258:	2201      	movs	r2, #1
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	fa02 f303 	lsl.w	r3, r2, r3
 8000260:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	4013      	ands	r3, r2
 800026a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800026c:	68fa      	ldr	r2, [r7, #12]
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	429a      	cmp	r2, r3
 8000272:	d16d      	bne.n	8000350 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	2103      	movs	r1, #3
 800027e:	fa01 f303 	lsl.w	r3, r1, r3
 8000282:	43db      	mvns	r3, r3
 8000284:	401a      	ands	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	4619      	mov	r1, r3
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	005b      	lsls	r3, r3, #1
 8000298:	fa01 f303 	lsl.w	r3, r1, r3
 800029c:	431a      	orrs	r2, r3
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	791b      	ldrb	r3, [r3, #4]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d003      	beq.n	80002b2 <GPIO_Init+0x76>
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	791b      	ldrb	r3, [r3, #4]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	d136      	bne.n	8000320 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	689a      	ldr	r2, [r3, #8]
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	2103      	movs	r1, #3
 80002bc:	fa01 f303 	lsl.w	r3, r1, r3
 80002c0:	43db      	mvns	r3, r3
 80002c2:	401a      	ands	r2, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	689a      	ldr	r2, [r3, #8]
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	795b      	ldrb	r3, [r3, #5]
 80002d0:	4619      	mov	r1, r3
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	fa01 f303 	lsl.w	r3, r1, r3
 80002da:	431a      	orrs	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	889b      	ldrh	r3, [r3, #4]
 80002e4:	b29a      	uxth	r2, r3
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	2101      	movs	r1, #1
 80002ec:	fa01 f303 	lsl.w	r3, r1, r3
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	43db      	mvns	r3, r3
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	4013      	ands	r3, r2
 80002f8:	b29a      	uxth	r2, r3
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	889b      	ldrh	r3, [r3, #4]
 8000302:	b29b      	uxth	r3, r3
 8000304:	b21a      	sxth	r2, r3
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	799b      	ldrb	r3, [r3, #6]
 800030a:	4619      	mov	r1, r3
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	b29b      	uxth	r3, r3
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	b21b      	sxth	r3, r3
 8000316:	4313      	orrs	r3, r2
 8000318:	b21b      	sxth	r3, r3
 800031a:	b29a      	uxth	r2, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	68da      	ldr	r2, [r3, #12]
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	b29b      	uxth	r3, r3
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	2103      	movs	r1, #3
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	401a      	ands	r2, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	68da      	ldr	r2, [r3, #12]
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	79db      	ldrb	r3, [r3, #7]
 8000340:	4619      	mov	r1, r3
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	431a      	orrs	r2, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	3301      	adds	r3, #1
 8000354:	617b      	str	r3, [r7, #20]
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	2b0f      	cmp	r3, #15
 800035a:	f67f af7d 	bls.w	8000258 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800035e:	bf00      	nop
 8000360:	371c      	adds	r7, #28
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: Specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	460b      	mov	r3, r1
 8000372:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000374:	2300      	movs	r3, #0
 8000376:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	8a9b      	ldrh	r3, [r3, #20]
 800037c:	b29a      	uxth	r2, r3
 800037e:	887b      	ldrh	r3, [r7, #2]
 8000380:	4013      	ands	r3, r2
 8000382:	b29b      	uxth	r3, r3
 8000384:	2b00      	cmp	r3, #0
 8000386:	d002      	beq.n	800038e <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000388:	2301      	movs	r3, #1
 800038a:	73fb      	strb	r3, [r7, #15]
 800038c:	e001      	b.n	8000392 <GPIO_ReadOutputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800038e:	2300      	movs	r3, #0
 8000390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000392:	7bfb      	ldrb	r3, [r7, #15]
}
 8000394:	4618      	mov	r0, r3
 8000396:	3714      	adds	r7, #20
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <GPIO_SetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	460b      	mov	r3, r1
 80003aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRL = GPIO_Pin;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	887a      	ldrh	r2, [r7, #2]
 80003b0:	831a      	strh	r2, [r3, #24]
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr

080003bc <GPIO_ResetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	460b      	mov	r3, r1
 80003c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRH = GPIO_Pin;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	887a      	ldrh	r2, [r7, #2]
 80003cc:	835a      	strh	r2, [r3, #26]
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr

080003d8 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	460b      	mov	r3, r1
 80003e2:	807b      	strh	r3, [r7, #2]
 80003e4:	4613      	mov	r3, r2
 80003e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 80003e8:	787b      	ldrb	r3, [r7, #1]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d003      	beq.n	80003f6 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	887a      	ldrh	r2, [r7, #2]
 80003f2:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 80003f4:	e002      	b.n	80003fc <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	887a      	ldrh	r2, [r7, #2]
 80003fa:	835a      	strh	r2, [r3, #26]
  }
}
 80003fc:	bf00      	nop
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop

08000408 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..H) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	460b      	mov	r3, r1
 8000412:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	8a9b      	ldrh	r3, [r3, #20]
 8000418:	b29a      	uxth	r2, r3
 800041a:	887b      	ldrh	r3, [r7, #2]
 800041c:	4053      	eors	r3, r2
 800041e:	b29a      	uxth	r2, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	829a      	strh	r2, [r3, #20]
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop

08000430 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	460b      	mov	r3, r1
 800043a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800043c:	78fb      	ldrb	r3, [r7, #3]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d006      	beq.n	8000450 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000442:	4909      	ldr	r1, [pc, #36]	; (8000468 <RCC_AHBPeriphClockCmd+0x38>)
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <RCC_AHBPeriphClockCmd+0x38>)
 8000446:	69da      	ldr	r2, [r3, #28]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4313      	orrs	r3, r2
 800044c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800044e:	e006      	b.n	800045e <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000450:	4905      	ldr	r1, [pc, #20]	; (8000468 <RCC_AHBPeriphClockCmd+0x38>)
 8000452:	4b05      	ldr	r3, [pc, #20]	; (8000468 <RCC_AHBPeriphClockCmd+0x38>)
 8000454:	69da      	ldr	r2, [r3, #28]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	43db      	mvns	r3, r3
 800045a:	4013      	ands	r3, r2
 800045c:	61cb      	str	r3, [r1, #28]
  }
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	40023800 	.word	0x40023800

0800046c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	460b      	mov	r3, r1
 8000476:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000478:	78fb      	ldrb	r3, [r7, #3]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d006      	beq.n	800048c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800047e:	4909      	ldr	r1, [pc, #36]	; (80004a4 <RCC_APB1PeriphClockCmd+0x38>)
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <RCC_APB1PeriphClockCmd+0x38>)
 8000482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4313      	orrs	r3, r2
 8000488:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800048a:	e006      	b.n	800049a <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800048c:	4905      	ldr	r1, [pc, #20]	; (80004a4 <RCC_APB1PeriphClockCmd+0x38>)
 800048e:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <RCC_APB1PeriphClockCmd+0x38>)
 8000490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	43db      	mvns	r3, r3
 8000496:	4013      	ands	r3, r2
 8000498:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40023800 	.word	0x40023800

080004a8 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004c2:	d00b      	beq.n	80004dc <TIM_TimeBaseInit+0x34>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4a1c      	ldr	r2, [pc, #112]	; (8000538 <TIM_TimeBaseInit+0x90>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d007      	beq.n	80004dc <TIM_TimeBaseInit+0x34>
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a1b      	ldr	r2, [pc, #108]	; (800053c <TIM_TimeBaseInit+0x94>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d003      	beq.n	80004dc <TIM_TimeBaseInit+0x34>
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a1a      	ldr	r2, [pc, #104]	; (8000540 <TIM_TimeBaseInit+0x98>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d108      	bne.n	80004ee <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80004dc:	89fb      	ldrh	r3, [r7, #14]
 80004de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80004e2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	885a      	ldrh	r2, [r3, #2]
 80004e8:	89fb      	ldrh	r3, [r7, #14]
 80004ea:	4313      	orrs	r3, r2
 80004ec:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4a14      	ldr	r2, [pc, #80]	; (8000544 <TIM_TimeBaseInit+0x9c>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d00c      	beq.n	8000510 <TIM_TimeBaseInit+0x68>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a13      	ldr	r2, [pc, #76]	; (8000548 <TIM_TimeBaseInit+0xa0>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d008      	beq.n	8000510 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80004fe:	89fb      	ldrh	r3, [r7, #14]
 8000500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000504:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	891a      	ldrh	r2, [r3, #8]
 800050a:	89fb      	ldrh	r3, [r7, #14]
 800050c:	4313      	orrs	r3, r2
 800050e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	89fa      	ldrh	r2, [r7, #14]
 8000514:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	685a      	ldr	r2, [r3, #4]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	881a      	ldrh	r2, [r3, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2201      	movs	r2, #1
 800052a:	829a      	strh	r2, [r3, #20]
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40000400 	.word	0x40000400
 800053c:	40000800 	.word	0x40000800
 8000540:	40000c00 	.word	0x40000c00
 8000544:	40001000 	.word	0x40001000
 8000548:	40001400 	.word	0x40001400

0800054c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000558:	78fb      	ldrb	r3, [r7, #3]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d008      	beq.n	8000570 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	b29b      	uxth	r3, r3
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	b29a      	uxth	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 800056e:	e007      	b.n	8000580 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	b29b      	uxth	r3, r3
 8000576:	f023 0301 	bic.w	r3, r3, #1
 800057a:	b29a      	uxth	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	801a      	strh	r2, [r3, #0]
  }
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 2, 3, 4, 5, 9, 10 or 11 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8000598:	4618      	mov	r0, r3
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 2, 3, 4 or 5 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 2, 3, 4 or 5 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	807b      	strh	r3, [r7, #2]
 80005e0:	4613      	mov	r3, r2
 80005e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80005e4:	787b      	ldrb	r3, [r7, #1]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d008      	beq.n	80005fc <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	899b      	ldrh	r3, [r3, #12]
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	887b      	ldrh	r3, [r7, #2]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80005fa:	e009      	b.n	8000610 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	899b      	ldrh	r3, [r3, #12]
 8000600:	b29a      	uxth	r2, r3
 8000602:	887b      	ldrh	r3, [r7, #2]
 8000604:	43db      	mvns	r3, r3
 8000606:	b29b      	uxth	r3, r3
 8000608:	4013      	ands	r3, r2
 800060a:	b29a      	uxth	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	819a      	strh	r2, [r3, #12]
  }
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800062c:	2300      	movs	r3, #0
 800062e:	81bb      	strh	r3, [r7, #12]
 8000630:	2300      	movs	r3, #0
 8000632:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	8a1b      	ldrh	r3, [r3, #16]
 8000638:	b29a      	uxth	r2, r3
 800063a:	887b      	ldrh	r3, [r7, #2]
 800063c:	4013      	ands	r3, r2
 800063e:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	899b      	ldrh	r3, [r3, #12]
 8000644:	b29a      	uxth	r2, r3
 8000646:	887b      	ldrh	r3, [r7, #2]
 8000648:	4013      	ands	r3, r2
 800064a:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800064c:	89bb      	ldrh	r3, [r7, #12]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d005      	beq.n	800065e <TIM_GetITStatus+0x42>
 8000652:	897b      	ldrh	r3, [r7, #10]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d002      	beq.n	800065e <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000658:	2301      	movs	r3, #1
 800065a:	73fb      	strb	r3, [r7, #15]
 800065c:	e001      	b.n	8000662 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800065e:	2300      	movs	r3, #0
 8000660:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000662:	7bfb      	ldrb	r3, [r7, #15]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800067c:	887b      	ldrh	r3, [r7, #2]
 800067e:	43db      	mvns	r3, r3
 8000680:	b29a      	uxth	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	821a      	strh	r2, [r3, #16]
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None.
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	460b      	mov	r3, r1
 800069a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800069c:	887b      	ldrh	r3, [r7, #2]
 800069e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	809a      	strh	r2, [r3, #4]
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	889b      	ldrh	r3, [r3, #4]
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006c6:	b29b      	uxth	r3, r3
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop

080006d4 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag.
  *     @arg USART_FLAG_PE:   Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80006e0:	2300      	movs	r3, #0
 80006e2:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	887b      	ldrh	r3, [r7, #2]
 80006ec:	4013      	ands	r3, r2
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d002      	beq.n	80006fa <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80006f4:	2301      	movs	r3, #1
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e001      	b.n	80006fe <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop

0800070c <USART_ClearFlag>:
  * @note TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8000718:	887b      	ldrh	r3, [r7, #2]
 800071a:	43db      	mvns	r3, r3
 800071c:	b29a      	uxth	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	801a      	strh	r2, [r3, #0]
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800072c:	b480      	push	{r7}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000744:	2300      	movs	r3, #0
 8000746:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000748:	887b      	ldrh	r3, [r7, #2]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	095b      	lsrs	r3, r3, #5
 800074e:	b2db      	uxtb	r3, r3
 8000750:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000752:	887b      	ldrh	r3, [r7, #2]
 8000754:	f003 031f 	and.w	r3, r3, #31
 8000758:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800075a:	2201      	movs	r2, #1
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d107      	bne.n	800077a <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	899b      	ldrh	r3, [r3, #12]
 800076e:	b29b      	uxth	r3, r3
 8000770:	461a      	mov	r2, r3
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	4013      	ands	r3, r2
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	e011      	b.n	800079e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	2b02      	cmp	r3, #2
 800077e:	d107      	bne.n	8000790 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	8a1b      	ldrh	r3, [r3, #16]
 8000784:	b29b      	uxth	r3, r3
 8000786:	461a      	mov	r2, r3
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	4013      	ands	r3, r2
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	e006      	b.n	800079e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	8a9b      	ldrh	r3, [r3, #20]
 8000794:	b29b      	uxth	r3, r3
 8000796:	461a      	mov	r2, r3
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	4013      	ands	r3, r2
 800079c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800079e:	887b      	ldrh	r3, [r7, #2]
 80007a0:	0a1b      	lsrs	r3, r3, #8
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80007a6:	2201      	movs	r2, #1
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	461a      	mov	r2, r3
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	4013      	ands	r3, r2
 80007bc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d005      	beq.n	80007d0 <USART_GetITStatus+0xa4>
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d002      	beq.n	80007d0 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 80007ca:	2301      	movs	r3, #1
 80007cc:	74fb      	strb	r3, [r7, #19]
 80007ce:	e001      	b.n	80007d4 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80007d0:	2300      	movs	r3, #0
 80007d2:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80007d4:	7cfb      	ldrb	r3, [r7, #19]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	371c      	adds	r7, #28
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <USART_ClearITPendingBit>:
  * @note TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 80007ec:	2300      	movs	r3, #0
 80007ee:	81fb      	strh	r3, [r7, #14]
 80007f0:	2300      	movs	r3, #0
 80007f2:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 80007f4:	887b      	ldrh	r3, [r7, #2]
 80007f6:	0a1b      	lsrs	r3, r3, #8
 80007f8:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80007fa:	89fb      	ldrh	r3, [r7, #14]
 80007fc:	2201      	movs	r2, #1
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	43db      	mvns	r3, r3
 8000808:	b29a      	uxth	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	801a      	strh	r2, [r3, #0]
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <USART2_IRQHandler>:
void PutcUART2(char ch){
	USART_SendData(USART2, (uint8_t) ch);

}

void USART2_IRQHandler(void){
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0

	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 800081e:	f240 5125 	movw	r1, #1317	; 0x525
 8000822:	481b      	ldr	r0, [pc, #108]	; (8000890 <USART2_IRQHandler+0x78>)
 8000824:	f7ff ff82 	bl	800072c <USART_GetITStatus>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d02c      	beq.n	8000888 <USART2_IRQHandler+0x70>
	{
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 800082e:	f240 5125 	movw	r1, #1317	; 0x525
 8000832:	4817      	ldr	r0, [pc, #92]	; (8000890 <USART2_IRQHandler+0x78>)
 8000834:	f7ff ffd4 	bl	80007e0 <USART_ClearITPendingBit>
		char znak = USART_ReceiveData(USART2);
 8000838:	4815      	ldr	r0, [pc, #84]	; (8000890 <USART2_IRQHandler+0x78>)
 800083a:	f7ff ff3b 	bl	80006b4 <USART_ReceiveData>
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]

		//ak v predoslom byte bola poziadavka na zmenu ziadaneho uhla,
		//tak ciel zmeni ak dalsi byte je v zadanom rozsahu
		if (change_goal_request){
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <USART2_IRQHandler+0x7c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d008      	beq.n	800085c <USART2_IRQHandler+0x44>

			if (znak >= 0 && znak <= GOAL_RANGE)
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b08      	cmp	r3, #8
 800084e:	d802      	bhi.n	8000856 <USART2_IRQHandler+0x3e>
			goal_bearing = znak;
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4a11      	ldr	r2, [pc, #68]	; (8000898 <USART2_IRQHandler+0x80>)
 8000854:	6013      	str	r3, [r2, #0]

			change_goal_request = 0;
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <USART2_IRQHandler+0x7c>)
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
		}

		switch (znak){
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2baa      	cmp	r3, #170	; 0xaa
 8000860:	d002      	beq.n	8000868 <USART2_IRQHandler+0x50>
 8000862:	2bbb      	cmp	r3, #187	; 0xbb
 8000864:	d00c      	beq.n	8000880 <USART2_IRQHandler+0x68>
		if (retazec[counter] != '\0'){
			PutcUART2(retazec[counter]);
			counter++;
		}*/
    }
}
 8000866:	e00f      	b.n	8000888 <USART2_IRQHandler+0x70>
			change_goal_request = 0;
		}

		switch (znak){
		case 0xAA:   // vypinanie/zapinanie pohybu
			if (running)
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <USART2_IRQHandler+0x84>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d003      	beq.n	8000878 <USART2_IRQHandler+0x60>
					running = 0;
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <USART2_IRQHandler+0x84>)
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
				else running = 1;
			break;
 8000876:	e007      	b.n	8000888 <USART2_IRQHandler+0x70>

		switch (znak){
		case 0xAA:   // vypinanie/zapinanie pohybu
			if (running)
					running = 0;
				else running = 1;
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <USART2_IRQHandler+0x84>)
 800087a:	2201      	movs	r2, #1
 800087c:	601a      	str	r2, [r3, #0]
			break;
 800087e:	e003      	b.n	8000888 <USART2_IRQHandler+0x70>
		case 0xBB: //poziadavka na zmenu ciela, v dalsom byte sa precita, aky bude novy ciel
			change_goal_request = 1;
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <USART2_IRQHandler+0x7c>)
 8000882:	2201      	movs	r2, #1
 8000884:	601a      	str	r2, [r3, #0]
		if (retazec[counter] != '\0'){
			PutcUART2(retazec[counter]);
			counter++;
		}*/
    }
}
 8000886:	e7ff      	b.n	8000888 <USART2_IRQHandler+0x70>
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40004400 	.word	0x40004400
 8000894:	20000040 	.word	0x20000040
 8000898:	20000038 	.word	0x20000038
 800089c:	2000003c 	.word	0x2000003c

080008a0 <main>:
**
**===========================================================================
*/
int main(void)

{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	init_indicator_LED();
 80008a4:	f000 f876 	bl	8000994 <init_indicator_LED>
	  else stop();*/


	//sendValue();
	//PutcUART2(48);
  }
 80008a8:	e7fe      	b.n	80008a8 <main+0x8>
 80008aa:	bf00      	nop

080008ac <TIM4_IRQHandler>:
	if(a<-5){a=-5;}
	LM=74+a;
}

void TIM4_IRQHandler()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0


    	if (TIM_GetITStatus(TIM4, TIM_IT_Update) == SET)
 80008b0:	2101      	movs	r1, #1
 80008b2:	482f      	ldr	r0, [pc, #188]	; (8000970 <TIM4_IRQHandler+0xc4>)
 80008b4:	f7ff feb2 	bl	800061c <TIM_GetITStatus>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d155      	bne.n	800096a <TIM4_IRQHandler+0xbe>
    		{


    		counter++;
 80008be:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <TIM4_IRQHandler+0xc8>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a2b      	ldr	r2, [pc, #172]	; (8000974 <TIM4_IRQHandler+0xc8>)
 80008c6:	6013      	str	r3, [r2, #0]
    	    	counter2++;
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <TIM4_IRQHandler+0xcc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	3301      	adds	r3, #1
 80008ce:	4a2a      	ldr	r2, [pc, #168]	; (8000978 <TIM4_IRQHandler+0xcc>)
 80008d0:	6013      	str	r3, [r2, #0]


       if(stat==1){
 80008d2:	4b2a      	ldr	r3, [pc, #168]	; (800097c <TIM4_IRQHandler+0xd0>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d110      	bne.n	80008fc <TIM4_IRQHandler+0x50>

        if(counter>=LM) {
 80008da:	4b26      	ldr	r3, [pc, #152]	; (8000974 <TIM4_IRQHandler+0xc8>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	4b28      	ldr	r3, [pc, #160]	; (8000980 <TIM4_IRQHandler+0xd4>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	db19      	blt.n	800091a <TIM4_IRQHandler+0x6e>
        	stat=0;
 80008e6:	4b25      	ldr	r3, [pc, #148]	; (800097c <TIM4_IRQHandler+0xd0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
        	GPIO_ResetBits(GPIOB, GPIO_Pin_6);
 80008ec:	2140      	movs	r1, #64	; 0x40
 80008ee:	4825      	ldr	r0, [pc, #148]	; (8000984 <TIM4_IRQHandler+0xd8>)
 80008f0:	f7ff fd64 	bl	80003bc <GPIO_ResetBits>
        	counter=0;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <TIM4_IRQHandler+0xc8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	e00e      	b.n	800091a <TIM4_IRQHandler+0x6e>
        }

       }
        else {

        	if(counter>=2000) {
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <TIM4_IRQHandler+0xc8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000904:	db09      	blt.n	800091a <TIM4_IRQHandler+0x6e>
        		stat=1;GPIO_SetBits(GPIOB, GPIO_Pin_6);
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <TIM4_IRQHandler+0xd0>)
 8000908:	2201      	movs	r2, #1
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	2140      	movs	r1, #64	; 0x40
 800090e:	481d      	ldr	r0, [pc, #116]	; (8000984 <TIM4_IRQHandler+0xd8>)
 8000910:	f7ff fd46 	bl	80003a0 <GPIO_SetBits>
        		counter=0;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <TIM4_IRQHandler+0xc8>)
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
        	}
        }

      if(stat2==1){
 800091a:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <TIM4_IRQHandler+0xdc>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d110      	bne.n	8000944 <TIM4_IRQHandler+0x98>

                if(counter2>=PM) {
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <TIM4_IRQHandler+0xcc>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <TIM4_IRQHandler+0xe0>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	429a      	cmp	r2, r3
 800092c:	db19      	blt.n	8000962 <TIM4_IRQHandler+0xb6>
                	stat2=0;
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <TIM4_IRQHandler+0xdc>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
                	GPIO_ResetBits(GPIOA, GPIO_Pin_7);
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	4816      	ldr	r0, [pc, #88]	; (8000990 <TIM4_IRQHandler+0xe4>)
 8000938:	f7ff fd40 	bl	80003bc <GPIO_ResetBits>
                	counter2=0;
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <TIM4_IRQHandler+0xcc>)
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	e00e      	b.n	8000962 <TIM4_IRQHandler+0xb6>
                }
      }
       else {

             if(counter2>=2000) {
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <TIM4_IRQHandler+0xcc>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800094c:	db09      	blt.n	8000962 <TIM4_IRQHandler+0xb6>
            	 stat2=1;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <TIM4_IRQHandler+0xdc>)
 8000950:	2201      	movs	r2, #1
 8000952:	601a      	str	r2, [r3, #0]
            	 GPIO_SetBits(GPIOA, GPIO_Pin_7);
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	480e      	ldr	r0, [pc, #56]	; (8000990 <TIM4_IRQHandler+0xe4>)
 8000958:	f7ff fd22 	bl	80003a0 <GPIO_SetBits>
            	 counter2=0;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <TIM4_IRQHandler+0xcc>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]





      TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 8000962:	2101      	movs	r1, #1
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <TIM4_IRQHandler+0xc4>)
 8000966:	f7ff fe83 	bl	8000670 <TIM_ClearITPendingBit>
    }
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40000800 	.word	0x40000800
 8000974:	2000002c 	.word	0x2000002c
 8000978:	20000030 	.word	0x20000030
 800097c:	20000000 	.word	0x20000000
 8000980:	20000008 	.word	0x20000008
 8000984:	40020400 	.word	0x40020400
 8000988:	20000004 	.word	0x20000004
 800098c:	2000000c 	.word	0x2000000c
 8000990:	40020000 	.word	0x40020000

08000994 <init_indicator_LED>:

/* Private functions */

//inicializacia indikacnej LED chodu procesora
void init_indicator_LED()
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	init_indicator_LED_pin();
 8000998:	f000 f804 	bl	80009a4 <init_indicator_LED_pin>
	init_indicator_LED_trigtim();
 800099c:	f000 f81c 	bl	80009d8 <init_indicator_LED_trigtim>
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <init_indicator_LED_pin>:

//inicializacia portu a pinu LED
void init_indicator_LED_pin()
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80009aa:	2101      	movs	r1, #1
 80009ac:	2001      	movs	r0, #1
 80009ae:	f7ff fd3f 	bl	8000430 <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef gpioInitStruc;
	gpioInitStruc.GPIO_Mode = GPIO_Mode_OUT;
 80009b2:	2301      	movs	r3, #1
 80009b4:	713b      	strb	r3, [r7, #4]
	gpioInitStruc.GPIO_OType = GPIO_OType_PP;
 80009b6:	2300      	movs	r3, #0
 80009b8:	71bb      	strb	r3, [r7, #6]
	gpioInitStruc.GPIO_Pin = GPIO_Pin_5;
 80009ba:	2320      	movs	r3, #32
 80009bc:	603b      	str	r3, [r7, #0]
	gpioInitStruc.GPIO_Speed = GPIO_Speed_400KHz;
 80009be:	2300      	movs	r3, #0
 80009c0:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOA, &gpioInitStruc);
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	4803      	ldr	r0, [pc, #12]	; (80009d4 <init_indicator_LED_pin+0x30>)
 80009c8:	f7ff fc38 	bl	800023c <GPIO_Init>
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40020000 	.word	0x40020000

080009d8 <init_indicator_LED_trigtim>:

//inicializacia casovaca pre spustanie led LED
void init_indicator_LED_trigtim()
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b087      	sub	sp, #28
 80009dc:	af00      	add	r7, sp, #0
	indicatorTimeStamp = 0;
 80009de:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <init_indicator_LED_trigtim+0x74>)
 80009e0:	f04f 0300 	mov.w	r3, #0
 80009e4:	f04f 0400 	mov.w	r4, #0
 80009e8:	e882 0018 	stmia.w	r2, {r3, r4}
	//unsigned short prescalerValue = (unsigned short) (SystemCoreClock / 1000) - 1;
	unsigned short prescalerValue = (unsigned short) TIM_CLC_PRESCALER;
 80009ec:	f643 637f 	movw	r3, #15999	; 0x3e7f
 80009f0:	82fb      	strh	r3, [r7, #22]
	//Structure for timer settings
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	// TIM6 clock enable
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 80009f2:	2101      	movs	r1, #1
 80009f4:	2010      	movs	r0, #16
 80009f6:	f7ff fd39 	bl	800046c <RCC_APB1PeriphClockCmd>
	// Enable the TIM6 gloabal Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = TIM6_IRQn;
 80009fa:	232b      	movs	r3, #43	; 0x2b
 80009fc:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = TIM_INTERRUPT_PREEMP;
 80009fe:	2300      	movs	r3, #0
 8000a00:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = TIM_INTERRUPT_SUB;
 8000a02:	2302      	movs	r3, #2
 8000a04:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000a06:	2301      	movs	r3, #1
 8000a08:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fbb5 	bl	800017c <NVIC_Init>
	TIM_TimeBaseStructure.TIM_Period = TIM_PERIOD;
 8000a12:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000a16:	60fb      	str	r3, [r7, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CLC_DIV;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	823b      	strh	r3, [r7, #16]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	817b      	strh	r3, [r7, #10]
	TIM_TimeBaseStructure.TIM_Prescaler = prescalerValue;
 8000a20:	8afb      	ldrh	r3, [r7, #22]
 8000a22:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4809      	ldr	r0, [pc, #36]	; (8000a50 <init_indicator_LED_trigtim+0x78>)
 8000a2c:	f7ff fd3c 	bl	80004a8 <TIM_TimeBaseInit>
	// TIM Interrupts enable
	TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);
 8000a30:	2201      	movs	r2, #1
 8000a32:	2101      	movs	r1, #1
 8000a34:	4806      	ldr	r0, [pc, #24]	; (8000a50 <init_indicator_LED_trigtim+0x78>)
 8000a36:	f7ff fdcd 	bl	80005d4 <TIM_ITConfig>
	// TIM6 enable counter
	TIM_Cmd(TIM6, ENABLE);
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <init_indicator_LED_trigtim+0x78>)
 8000a3e:	f7ff fd85 	bl	800054c <TIM_Cmd>
}
 8000a42:	bf00      	nop
 8000a44:	371c      	adds	r7, #28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd90      	pop	{r4, r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000048 	.word	0x20000048
 8000a50:	40001000 	.word	0x40001000

08000a54 <TIM6_IRQHandler>:

//spracovanie prerusenia z TIM6, casovaca pre kontrolku
void TIM6_IRQHandler(void)
{
 8000a54:	b598      	push	{r3, r4, r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) == SET)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	480c      	ldr	r0, [pc, #48]	; (8000a8c <TIM6_IRQHandler+0x38>)
 8000a5c:	f7ff fdde 	bl	800061c <TIM_GetITStatus>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d10f      	bne.n	8000a86 <TIM6_IRQHandler+0x32>
	{
		indicatorTimeStamp++;
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <TIM6_IRQHandler+0x3c>)
 8000a68:	cb18      	ldmia	r3, {r3, r4}
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	f144 0400 	adc.w	r4, r4, #0
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <TIM6_IRQHandler+0x3c>)
 8000a72:	e882 0018 	stmia.w	r2, {r3, r4}
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);//toggle LED PA5
 8000a76:	2120      	movs	r1, #32
 8000a78:	4806      	ldr	r0, [pc, #24]	; (8000a94 <TIM6_IRQHandler+0x40>)
 8000a7a:	f7ff fcc5 	bl	8000408 <GPIO_ToggleBits>
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 8000a7e:	2101      	movs	r1, #1
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <TIM6_IRQHandler+0x38>)
 8000a82:	f7ff fdf5 	bl	8000670 <TIM_ClearITPendingBit>
	}
}
 8000a86:	bf00      	nop
 8000a88:	bd98      	pop	{r3, r4, r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40001000 	.word	0x40001000
 8000a90:	20000048 	.word	0x20000048
 8000a94:	40020000 	.word	0x40020000

08000a98 <leftSensorMeasure>:
	GPIO_PinAFConfig(CAPTURE_PORT, FORWARD_CAP_PINSOURCE, GPIO_AF_TIM3);
}

//spustenie merania laveho dialkomeru
void leftSensorMeasure(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <leftSensorMeasure+0x28>)
 8000aa0:	f7ff fd54 	bl	800054c <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, LEFT_TRIG_PIN, Bit_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aaa:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <leftSensorMeasure+0x2c>)
 8000aac:	f7ff fc94 	bl	80003d8 <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	LeftSensorCaptureStruc.captureStep = 0;
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <leftSensorMeasure+0x30>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = leftSensorCaptureHandler;
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <leftSensorMeasure+0x34>)
 8000ab8:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <leftSensorMeasure+0x38>)
 8000aba:	601a      	str	r2, [r3, #0]
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40001400 	.word	0x40001400
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	20000068 	.word	0x20000068
 8000acc:	2000008c 	.word	0x2000008c
 8000ad0:	08000c51 	.word	0x08000c51

08000ad4 <rightSensorMeasure>:
//spustenie merania praveho dialkomeru
void rightSensorMeasure(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 8000ad8:	2101      	movs	r1, #1
 8000ada:	4808      	ldr	r0, [pc, #32]	; (8000afc <rightSensorMeasure+0x28>)
 8000adc:	f7ff fd36 	bl	800054c <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, RIGHT_TRIG_PIN, Bit_SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <rightSensorMeasure+0x2c>)
 8000ae8:	f7ff fc76 	bl	80003d8 <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	RightSensorCaptureStruc.captureStep = 0;
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <rightSensorMeasure+0x30>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = rightSensorCaptureHandler;
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <rightSensorMeasure+0x34>)
 8000af4:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <rightSensorMeasure+0x38>)
 8000af6:	601a      	str	r2, [r3, #0]
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40001400 	.word	0x40001400
 8000b00:	40020000 	.word	0x40020000
 8000b04:	20000058 	.word	0x20000058
 8000b08:	2000008c 	.word	0x2000008c
 8000b0c:	08000cb1 	.word	0x08000cb1

08000b10 <forwardSensorMeasure>:
//spustenie memrania predneho dialkomeru
void forwardSensorMeasure(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 8000b14:	2101      	movs	r1, #1
 8000b16:	4808      	ldr	r0, [pc, #32]	; (8000b38 <forwardSensorMeasure+0x28>)
 8000b18:	f7ff fd18 	bl	800054c <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, FORWARD_TRIG_PIN, Bit_SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b22:	4806      	ldr	r0, [pc, #24]	; (8000b3c <forwardSensorMeasure+0x2c>)
 8000b24:	f7ff fc58 	bl	80003d8 <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	ForwardSensorCaptureStruc.captureStep = 0;
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <forwardSensorMeasure+0x30>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = forwardSensorCaptureHandler;
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <forwardSensorMeasure+0x34>)
 8000b30:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <forwardSensorMeasure+0x38>)
 8000b32:	601a      	str	r2, [r3, #0]
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40001400 	.word	0x40001400
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	20000078 	.word	0x20000078
 8000b44:	2000008c 	.word	0x2000008c
 8000b48:	08000d11 	.word	0x08000d11

08000b4c <TIM7_IRQHandler>:

//handlery bude treba dat do suboru, ktory bude urcovat veci specificke pre dany hardver
//samotne funkcie ktore ma vykonat ale ostanu tu
//spracovanie prerusenia z TRIG_TIM, casovac pre spustaci impulz dialkomeru
void TIM7_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	//tez do samostatnej funkcie alebo mozno bude stacit #define fjdkkdf nazov funkcie
	if (TIM_GetITStatus(TRIG_TIM, TIM_IT_Update) == SET)
 8000b50:	2101      	movs	r1, #1
 8000b52:	481e      	ldr	r0, [pc, #120]	; (8000bcc <TIM7_IRQHandler+0x80>)
 8000b54:	f7ff fd62 	bl	800061c <TIM_GetITStatus>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d133      	bne.n	8000bc6 <TIM7_IRQHandler+0x7a>
	{
		TIM_Cmd(TRIG_TIM, DISABLE);
 8000b5e:	2100      	movs	r1, #0
 8000b60:	481a      	ldr	r0, [pc, #104]	; (8000bcc <TIM7_IRQHandler+0x80>)
 8000b62:	f7ff fcf3 	bl	800054c <TIM_Cmd>
		//vypnutie impulzu na prislusnom spustacom pine
		if (GPIO_ReadOutputDataBit(TRIG_PORT, LEFT_TRIG_PIN) == 1)
 8000b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6a:	4819      	ldr	r0, [pc, #100]	; (8000bd0 <TIM7_IRQHandler+0x84>)
 8000b6c:	f7ff fbfc 	bl	8000368 <GPIO_ReadOutputDataBit>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d106      	bne.n	8000b84 <TIM7_IRQHandler+0x38>
		{
			GPIO_WriteBit(TRIG_PORT, LEFT_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu left
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b7c:	4814      	ldr	r0, [pc, #80]	; (8000bd0 <TIM7_IRQHandler+0x84>)
 8000b7e:	f7ff fc2b 	bl	80003d8 <GPIO_WriteBit>
 8000b82:	e01c      	b.n	8000bbe <TIM7_IRQHandler+0x72>
		}
		else if (GPIO_ReadOutputDataBit(TRIG_PORT, RIGHT_TRIG_PIN) == 1)
 8000b84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b88:	4811      	ldr	r0, [pc, #68]	; (8000bd0 <TIM7_IRQHandler+0x84>)
 8000b8a:	f7ff fbed 	bl	8000368 <GPIO_ReadOutputDataBit>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d106      	bne.n	8000ba2 <TIM7_IRQHandler+0x56>
		{
			GPIO_WriteBit(TRIG_PORT, RIGHT_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu right
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b9a:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <TIM7_IRQHandler+0x84>)
 8000b9c:	f7ff fc1c 	bl	80003d8 <GPIO_WriteBit>
 8000ba0:	e00d      	b.n	8000bbe <TIM7_IRQHandler+0x72>
		}
		else if (GPIO_ReadOutputDataBit(TRIG_PORT, FORWARD_TRIG_PIN) == 1)
 8000ba2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba6:	480a      	ldr	r0, [pc, #40]	; (8000bd0 <TIM7_IRQHandler+0x84>)
 8000ba8:	f7ff fbde 	bl	8000368 <GPIO_ReadOutputDataBit>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d105      	bne.n	8000bbe <TIM7_IRQHandler+0x72>
		{
			GPIO_WriteBit(TRIG_PORT, FORWARD_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu forward
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <TIM7_IRQHandler+0x84>)
 8000bba:	f7ff fc0d 	bl	80003d8 <GPIO_WriteBit>
		}
		TIM_ClearITPendingBit(TRIG_TIM, TIM_IT_Update);
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <TIM7_IRQHandler+0x80>)
 8000bc2:	f7ff fd55 	bl	8000670 <TIM_ClearITPendingBit>
	}
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40001400 	.word	0x40001400
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <TIM3_IRQHandler>:
//spracovanie prerusenia z TIM3, casovac pre meranie dlzky impulzu z dialialkomerov
void TIM3_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	//spustenie spracovania prerusenia CAPTURE_TIM pre prislusny senzor
	if (sensorCaptureHandler != 0)
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <TIM3_IRQHandler+0x18>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d002      	beq.n	8000be6 <TIM3_IRQHandler+0x12>
	{
		sensorCaptureHandler();
 8000be0:	4b02      	ldr	r3, [pc, #8]	; (8000bec <TIM3_IRQHandler+0x18>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4798      	blx	r3
	}
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	2000008c 	.word	0x2000008c

08000bf0 <TIM10_IRQHandler>:
//spracovanie prerusenia z casovaca pre volanie merania vzdialenosti
void TIM10_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(SENSOR_CALL_TIM, TIM_IT_Update) == SET)
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4814      	ldr	r0, [pc, #80]	; (8000c48 <TIM10_IRQHandler+0x58>)
 8000bf8:	f7ff fd10 	bl	800061c <TIM_GetITStatus>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d120      	bne.n	8000c44 <TIM10_IRQHandler+0x54>
	{
		//volanie merania senzora, ktory je na rade
		switch (selectSensor)
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <TIM10_IRQHandler+0x5c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d006      	beq.n	8000c18 <TIM10_IRQHandler+0x28>
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d007      	beq.n	8000c1e <TIM10_IRQHandler+0x2e>
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d108      	bne.n	8000c24 <TIM10_IRQHandler+0x34>
		{
		case 0:
			leftSensorMeasure();
 8000c12:	f7ff ff41 	bl	8000a98 <leftSensorMeasure>
			break;
 8000c16:	e005      	b.n	8000c24 <TIM10_IRQHandler+0x34>
		case 1:
			forwardSensorMeasure();
 8000c18:	f7ff ff7a 	bl	8000b10 <forwardSensorMeasure>
			break;
 8000c1c:	e002      	b.n	8000c24 <TIM10_IRQHandler+0x34>
		case 2:
			rightSensorMeasure();
 8000c1e:	f7ff ff59 	bl	8000ad4 <rightSensorMeasure>
			break;
 8000c22:	bf00      	nop
		}
		//inkrementovanie volaneho senzora
		selectSensor++;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <TIM10_IRQHandler+0x5c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <TIM10_IRQHandler+0x5c>)
 8000c2c:	6013      	str	r3, [r2, #0]
		if (selectSensor > 2)
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <TIM10_IRQHandler+0x5c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	dd02      	ble.n	8000c3c <TIM10_IRQHandler+0x4c>
		{
			selectSensor = 0;
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <TIM10_IRQHandler+0x5c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
		}
		TIM_ClearITPendingBit(SENSOR_CALL_TIM, TIM_IT_Update);
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	4802      	ldr	r0, [pc, #8]	; (8000c48 <TIM10_IRQHandler+0x58>)
 8000c40:	f7ff fd16 	bl	8000670 <TIM_ClearITPendingBit>
	}
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40010c00 	.word	0x40010c00
 8000c4c:	20000034 	.word	0x20000034

08000c50 <leftSensorCaptureHandler>:

//meranie dlzky impulzu lavy senzor
void leftSensorCaptureHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, LEFT_TIM_CC) != RESET)
 8000c54:	2108      	movs	r1, #8
 8000c56:	4814      	ldr	r0, [pc, #80]	; (8000ca8 <leftSensorCaptureHandler+0x58>)
 8000c58:	f7ff fce0 	bl	800061c <TIM_GetITStatus>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d01f      	beq.n	8000ca2 <leftSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, LEFT_TIM_CC);
 8000c62:	2108      	movs	r1, #8
 8000c64:	4810      	ldr	r0, [pc, #64]	; (8000ca8 <leftSensorCaptureHandler+0x58>)
 8000c66:	f7ff fd03 	bl	8000670 <TIM_ClearITPendingBit>

		if(LeftSensorCaptureStruc.captureStep == 0)
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <leftSensorCaptureHandler+0x5c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d109      	bne.n	8000c86 <leftSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			LeftSensorCaptureStruc.risingTimeCapturing = LEFT_TIM_GETCAPTURE;
 8000c72:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <leftSensorCaptureHandler+0x58>)
 8000c74:	f7ff fc96 	bl	80005a4 <TIM_GetCapture3>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <leftSensorCaptureHandler+0x5c>)
 8000c7c:	605a      	str	r2, [r3, #4]
			LeftSensorCaptureStruc.captureStep = 1;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <leftSensorCaptureHandler+0x5c>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			LeftSensorCaptureStruc.fallingTime = LEFT_TIM_GETCAPTURE;
			LeftSensorCaptureStruc.risingTime = LeftSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 8000c84:	e00d      	b.n	8000ca2 <leftSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			LeftSensorCaptureStruc.risingTimeCapturing = LEFT_TIM_GETCAPTURE;
			LeftSensorCaptureStruc.captureStep = 1;
		}
		else if(LeftSensorCaptureStruc.captureStep == 1)
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <leftSensorCaptureHandler+0x5c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d109      	bne.n	8000ca2 <leftSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			LeftSensorCaptureStruc.fallingTime = LEFT_TIM_GETCAPTURE;
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <leftSensorCaptureHandler+0x58>)
 8000c90:	f7ff fc88 	bl	80005a4 <TIM_GetCapture3>
 8000c94:	4602      	mov	r2, r0
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <leftSensorCaptureHandler+0x5c>)
 8000c98:	60da      	str	r2, [r3, #12]
			LeftSensorCaptureStruc.risingTime = LeftSensorCaptureStruc.risingTimeCapturing;
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <leftSensorCaptureHandler+0x5c>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	4a03      	ldr	r2, [pc, #12]	; (8000cac <leftSensorCaptureHandler+0x5c>)
 8000ca0:	6093      	str	r3, [r2, #8]
		}
	}
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40000400 	.word	0x40000400
 8000cac:	20000068 	.word	0x20000068

08000cb0 <rightSensorCaptureHandler>:
//meranie dlzky impulzu lavy senzor
void rightSensorCaptureHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, RIGHT_TIM_CC) != RESET)
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	4814      	ldr	r0, [pc, #80]	; (8000d08 <rightSensorCaptureHandler+0x58>)
 8000cb8:	f7ff fcb0 	bl	800061c <TIM_GetITStatus>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d01f      	beq.n	8000d02 <rightSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, RIGHT_TIM_CC);
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	4810      	ldr	r0, [pc, #64]	; (8000d08 <rightSensorCaptureHandler+0x58>)
 8000cc6:	f7ff fcd3 	bl	8000670 <TIM_ClearITPendingBit>

		if(RightSensorCaptureStruc.captureStep == 0)
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <rightSensorCaptureHandler+0x5c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d109      	bne.n	8000ce6 <rightSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			RightSensorCaptureStruc.risingTimeCapturing = RIGHT_TIM_GETCAPTURE;
 8000cd2:	480d      	ldr	r0, [pc, #52]	; (8000d08 <rightSensorCaptureHandler+0x58>)
 8000cd4:	f7ff fc5a 	bl	800058c <TIM_GetCapture1>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <rightSensorCaptureHandler+0x5c>)
 8000cdc:	605a      	str	r2, [r3, #4]
			RightSensorCaptureStruc.captureStep = 1;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <rightSensorCaptureHandler+0x5c>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			RightSensorCaptureStruc.fallingTime = RIGHT_TIM_GETCAPTURE;
			RightSensorCaptureStruc.risingTime = RightSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 8000ce4:	e00d      	b.n	8000d02 <rightSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			RightSensorCaptureStruc.risingTimeCapturing = RIGHT_TIM_GETCAPTURE;
			RightSensorCaptureStruc.captureStep = 1;
		}
		else if(RightSensorCaptureStruc.captureStep == 1)
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <rightSensorCaptureHandler+0x5c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d109      	bne.n	8000d02 <rightSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			RightSensorCaptureStruc.fallingTime = RIGHT_TIM_GETCAPTURE;
 8000cee:	4806      	ldr	r0, [pc, #24]	; (8000d08 <rightSensorCaptureHandler+0x58>)
 8000cf0:	f7ff fc4c 	bl	800058c <TIM_GetCapture1>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <rightSensorCaptureHandler+0x5c>)
 8000cf8:	60da      	str	r2, [r3, #12]
			RightSensorCaptureStruc.risingTime = RightSensorCaptureStruc.risingTimeCapturing;
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <rightSensorCaptureHandler+0x5c>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	4a03      	ldr	r2, [pc, #12]	; (8000d0c <rightSensorCaptureHandler+0x5c>)
 8000d00:	6093      	str	r3, [r2, #8]
		}
	}
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40000400 	.word	0x40000400
 8000d0c:	20000058 	.word	0x20000058

08000d10 <forwardSensorCaptureHandler>:
//meranie dlzky impulzu lavy senzor
void forwardSensorCaptureHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, FORWARD_TIM_CC) != RESET)
 8000d14:	2110      	movs	r1, #16
 8000d16:	4814      	ldr	r0, [pc, #80]	; (8000d68 <forwardSensorCaptureHandler+0x58>)
 8000d18:	f7ff fc80 	bl	800061c <TIM_GetITStatus>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d01f      	beq.n	8000d62 <forwardSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, FORWARD_TIM_CC);
 8000d22:	2110      	movs	r1, #16
 8000d24:	4810      	ldr	r0, [pc, #64]	; (8000d68 <forwardSensorCaptureHandler+0x58>)
 8000d26:	f7ff fca3 	bl	8000670 <TIM_ClearITPendingBit>

		if(ForwardSensorCaptureStruc.captureStep == 0)
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <forwardSensorCaptureHandler+0x5c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d109      	bne.n	8000d46 <forwardSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			ForwardSensorCaptureStruc.risingTimeCapturing = FORWARD_TIM_GETCAPTURE;
 8000d32:	480d      	ldr	r0, [pc, #52]	; (8000d68 <forwardSensorCaptureHandler+0x58>)
 8000d34:	f7ff fc42 	bl	80005bc <TIM_GetCapture4>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <forwardSensorCaptureHandler+0x5c>)
 8000d3c:	605a      	str	r2, [r3, #4]
			ForwardSensorCaptureStruc.captureStep = 1;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <forwardSensorCaptureHandler+0x5c>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			ForwardSensorCaptureStruc.fallingTime = FORWARD_TIM_GETCAPTURE;
			ForwardSensorCaptureStruc.risingTime = ForwardSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 8000d44:	e00d      	b.n	8000d62 <forwardSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			ForwardSensorCaptureStruc.risingTimeCapturing = FORWARD_TIM_GETCAPTURE;
			ForwardSensorCaptureStruc.captureStep = 1;
		}
		else if(ForwardSensorCaptureStruc.captureStep == 1)
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <forwardSensorCaptureHandler+0x5c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d109      	bne.n	8000d62 <forwardSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			ForwardSensorCaptureStruc.fallingTime = FORWARD_TIM_GETCAPTURE;
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <forwardSensorCaptureHandler+0x58>)
 8000d50:	f7ff fc34 	bl	80005bc <TIM_GetCapture4>
 8000d54:	4602      	mov	r2, r0
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <forwardSensorCaptureHandler+0x5c>)
 8000d58:	60da      	str	r2, [r3, #12]
			ForwardSensorCaptureStruc.risingTime = ForwardSensorCaptureStruc.risingTimeCapturing;
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <forwardSensorCaptureHandler+0x5c>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	4a03      	ldr	r2, [pc, #12]	; (8000d6c <forwardSensorCaptureHandler+0x5c>)
 8000d60:	6093      	str	r3, [r2, #8]
		}
	}
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40000400 	.word	0x40000400
 8000d6c:	20000078 	.word	0x20000078

08000d70 <USART3_IRQHandler>:

	return 0;
}

void PRN_USART_IRQHANDLER(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(PRN_USART, USART_IT_RXNE) != RESET)
 8000d74:	f240 5125 	movw	r1, #1317	; 0x525
 8000d78:	481d      	ldr	r0, [pc, #116]	; (8000df0 <USART3_IRQHandler+0x80>)
 8000d7a:	f7ff fcd7 	bl	800072c <USART_GetITStatus>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d00b      	beq.n	8000d9c <USART3_IRQHandler+0x2c>
	{
		USART_ClearITPendingBit(PRN_USART, USART_IT_RXNE);
 8000d84:	f240 5125 	movw	r1, #1317	; 0x525
 8000d88:	4819      	ldr	r0, [pc, #100]	; (8000df0 <USART3_IRQHandler+0x80>)
 8000d8a:	f7ff fd29 	bl	80007e0 <USART_ClearITPendingBit>
		receivedChar = USART_ReceiveData(PRN_USART);
 8000d8e:	4818      	ldr	r0, [pc, #96]	; (8000df0 <USART3_IRQHandler+0x80>)
 8000d90:	f7ff fc90 	bl	80006b4 <USART_ReceiveData>
 8000d94:	4603      	mov	r3, r0
 8000d96:	461a      	mov	r2, r3
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <USART3_IRQHandler+0x84>)
 8000d9a:	801a      	strh	r2, [r3, #0]
	}
	if(USART_GetFlagStatus(PRN_USART, USART_FLAG_TC) != RESET)
 8000d9c:	2140      	movs	r1, #64	; 0x40
 8000d9e:	4814      	ldr	r0, [pc, #80]	; (8000df0 <USART3_IRQHandler+0x80>)
 8000da0:	f7ff fc98 	bl	80006d4 <USART_GetFlagStatus>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d020      	beq.n	8000dec <USART3_IRQHandler+0x7c>
	{
		USART_ClearFlag(PRN_USART, USART_FLAG_TC);
 8000daa:	2140      	movs	r1, #64	; 0x40
 8000dac:	4810      	ldr	r0, [pc, #64]	; (8000df0 <USART3_IRQHandler+0x80>)
 8000dae:	f7ff fcad 	bl	800070c <USART_ClearFlag>
		USARTbufferInkr++;
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <USART3_IRQHandler+0x88>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3301      	adds	r3, #1
 8000db8:	4a0f      	ldr	r2, [pc, #60]	; (8000df8 <USART3_IRQHandler+0x88>)
 8000dba:	6013      	str	r3, [r2, #0]
		if( USARTbufferOut[USARTbufferInkr] != '\0')
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <USART3_IRQHandler+0x88>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <USART3_IRQHandler+0x8c>)
 8000dc2:	5cd3      	ldrb	r3, [r2, r3]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d00a      	beq.n	8000de0 <USART3_IRQHandler+0x70>
		{
			USART_SendData(PRN_USART, USARTbufferOut[USARTbufferInkr]);
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <USART3_IRQHandler+0x88>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <USART3_IRQHandler+0x8c>)
 8000dd0:	5cd3      	ldrb	r3, [r2, r3]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <USART3_IRQHandler+0x80>)
 8000dda:	f7ff fc59 	bl	8000690 <USART_SendData>
		{
			USARTbufferInkr = 0;
			USARTbufferRDY = 1;
		}
	}
}
 8000dde:	e005      	b.n	8000dec <USART3_IRQHandler+0x7c>
		{
			USART_SendData(PRN_USART, USARTbufferOut[USARTbufferInkr]);
		}
		else
		{
			USARTbufferInkr = 0;
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <USART3_IRQHandler+0x88>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
			USARTbufferRDY = 1;
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <USART3_IRQHandler+0x90>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40004800 	.word	0x40004800
 8000df4:	20000088 	.word	0x20000088
 8000df8:	20000054 	.word	0x20000054
 8000dfc:	20000090 	.word	0x20000090
 8000e00:	20000050 	.word	0x20000050

08000e04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e08:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e0a:	e003      	b.n	8000e14 <LoopCopyDataInit>

08000e0c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8000e0e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e10:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e12:	3104      	adds	r1, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e14:	480b      	ldr	r0, [pc, #44]	; (8000e44 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8000e18:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e1a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e1c:	d3f6      	bcc.n	8000e0c <CopyDataInit>
  ldr r2, =_sbss
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8000e20:	e002      	b.n	8000e28 <LoopFillZerobss>

08000e22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e24:	f842 3b04 	str.w	r3, [r2], #4

08000e28 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8000e2a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e2c:	d3f9      	bcc.n	8000e22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e2e:	f000 f841 	bl	8000eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e32:	f000 f903 	bl	800103c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e36:	f7ff fd33 	bl	80008a0 <main>
  bx lr
 8000e3a:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e3c:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000e40:	080010a8 	.word	0x080010a8
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e48:	20000010 	.word	0x20000010
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000e4c:	20000010 	.word	0x20000010
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000e50:	200000f4 	.word	0x200000f4

08000e54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC1_IRQHandler>
	...

08000e58 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000e68:	e7fe      	b.n	8000e68 <HardFault_Handler+0x4>
 8000e6a:	bf00      	nop

08000e6c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>
 8000e72:	bf00      	nop

08000e74 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000e78:	e7fe      	b.n	8000e78 <BusFault_Handler+0x4>
 8000e7a:	bf00      	nop

08000e7c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000e80:	e7fe      	b.n	8000e80 <UsageFault_Handler+0x4>
 8000e82:	bf00      	nop

08000e84 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000eb8:	4a15      	ldr	r2, [pc, #84]	; (8000f10 <SystemInit+0x5c>)
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <SystemInit+0x5c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec2:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000ec4:	4912      	ldr	r1, [pc, #72]	; (8000f10 <SystemInit+0x5c>)
 8000ec6:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <SystemInit+0x5c>)
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <SystemInit+0x60>)
 8000ecc:	4013      	ands	r3, r2
 8000ece:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000ed0:	4a0f      	ldr	r2, [pc, #60]	; (8000f10 <SystemInit+0x5c>)
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <SystemInit+0x5c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000eda:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000ede:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ee0:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <SystemInit+0x5c>)
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <SystemInit+0x5c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eea:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000eec:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <SystemInit+0x5c>)
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <SystemInit+0x5c>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000ef6:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <SystemInit+0x5c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8000efe:	f000 f80d 	bl	8000f1c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <SystemInit+0x64>)
 8000f04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f08:	609a      	str	r2, [r3, #8]
#endif
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	88ffc00c 	.word	0x88ffc00c
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	2300      	movs	r3, #0
 8000f28:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000f2a:	4a41      	ldr	r2, [pc, #260]	; (8001030 <SetSysClock+0x114>)
 8000f2c:	4b40      	ldr	r3, [pc, #256]	; (8001030 <SetSysClock+0x114>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f34:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000f36:	4b3e      	ldr	r3, [pc, #248]	; (8001030 <SetSysClock+0x114>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3301      	adds	r3, #1
 8000f44:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d103      	bne.n	8000f54 <SetSysClock+0x38>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000f52:	d1f0      	bne.n	8000f36 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000f54:	4b36      	ldr	r3, [pc, #216]	; (8001030 <SetSysClock+0x114>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d002      	beq.n	8000f66 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000f60:	2301      	movs	r3, #1
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	e001      	b.n	8000f6a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d15a      	bne.n	8001026 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8000f70:	4a30      	ldr	r2, [pc, #192]	; (8001034 <SetSysClock+0x118>)
 8000f72:	4b30      	ldr	r3, [pc, #192]	; (8001034 <SetSysClock+0x118>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8000f7c:	4a2d      	ldr	r2, [pc, #180]	; (8001034 <SetSysClock+0x118>)
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <SetSysClock+0x118>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f043 0302 	orr.w	r3, r3, #2
 8000f86:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8000f88:	4a2a      	ldr	r2, [pc, #168]	; (8001034 <SetSysClock+0x118>)
 8000f8a:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <SetSysClock+0x118>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000f94:	4a26      	ldr	r2, [pc, #152]	; (8001030 <SetSysClock+0x114>)
 8000f96:	4b26      	ldr	r3, [pc, #152]	; (8001030 <SetSysClock+0x114>)
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <SetSysClock+0x11c>)
 8000fa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fa6:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8000fa8:	bf00      	nop
 8000faa:	4b23      	ldr	r3, [pc, #140]	; (8001038 <SetSysClock+0x11c>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0310 	and.w	r3, r3, #16
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f9      	bne.n	8000faa <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000fb6:	4a1e      	ldr	r2, [pc, #120]	; (8001030 <SetSysClock+0x114>)
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <SetSysClock+0x114>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000fbe:	4a1c      	ldr	r2, [pc, #112]	; (8001030 <SetSysClock+0x114>)
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <SetSysClock+0x114>)
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000fc6:	4a1a      	ldr	r2, [pc, #104]	; (8001030 <SetSysClock+0x114>)
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <SetSysClock+0x114>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8000fce:	4a18      	ldr	r2, [pc, #96]	; (8001030 <SetSysClock+0x114>)
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <SetSysClock+0x114>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000fd8:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <SetSysClock+0x114>)
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <SetSysClock+0x114>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8000fe4:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000fe6:	4a12      	ldr	r2, [pc, #72]	; (8001030 <SetSysClock+0x114>)
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <SetSysClock+0x114>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ff0:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000ff2:	bf00      	nop
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <SetSysClock+0x114>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f9      	beq.n	8000ff4 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001000:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <SetSysClock+0x114>)
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <SetSysClock+0x114>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f023 0303 	bic.w	r3, r3, #3
 800100a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 800100c:	4a08      	ldr	r2, [pc, #32]	; (8001030 <SetSysClock+0x114>)
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <SetSysClock+0x114>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f043 0303 	orr.w	r3, r3, #3
 8001016:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001018:	bf00      	nop
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <SetSysClock+0x114>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f003 030c 	and.w	r3, r3, #12
 8001022:	2b0c      	cmp	r3, #12
 8001024:	d1f9      	bne.n	800101a <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	40023800 	.word	0x40023800
 8001034:	40023c00 	.word	0x40023c00
 8001038:	40007000 	.word	0x40007000

0800103c <__libc_init_array>:
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <__libc_init_array+0x3c>)
 800103e:	b570      	push	{r4, r5, r6, lr}
 8001040:	461e      	mov	r6, r3
 8001042:	4c0e      	ldr	r4, [pc, #56]	; (800107c <__libc_init_array+0x40>)
 8001044:	2500      	movs	r5, #0
 8001046:	1ae4      	subs	r4, r4, r3
 8001048:	10a4      	asrs	r4, r4, #2
 800104a:	42a5      	cmp	r5, r4
 800104c:	d004      	beq.n	8001058 <__libc_init_array+0x1c>
 800104e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001052:	4798      	blx	r3
 8001054:	3501      	adds	r5, #1
 8001056:	e7f8      	b.n	800104a <__libc_init_array+0xe>
 8001058:	f000 f816 	bl	8001088 <_init>
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <__libc_init_array+0x44>)
 800105e:	4c09      	ldr	r4, [pc, #36]	; (8001084 <__libc_init_array+0x48>)
 8001060:	461e      	mov	r6, r3
 8001062:	1ae4      	subs	r4, r4, r3
 8001064:	10a4      	asrs	r4, r4, #2
 8001066:	2500      	movs	r5, #0
 8001068:	42a5      	cmp	r5, r4
 800106a:	d004      	beq.n	8001076 <__libc_init_array+0x3a>
 800106c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001070:	4798      	blx	r3
 8001072:	3501      	adds	r5, #1
 8001074:	e7f8      	b.n	8001068 <__libc_init_array+0x2c>
 8001076:	bd70      	pop	{r4, r5, r6, pc}
 8001078:	080010a0 	.word	0x080010a0
 800107c:	080010a0 	.word	0x080010a0
 8001080:	080010a0 	.word	0x080010a0
 8001084:	080010a4 	.word	0x080010a4

08001088 <_init>:
 8001088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108a:	bf00      	nop
 800108c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800108e:	bc08      	pop	{r3}
 8001090:	469e      	mov	lr, r3
 8001092:	4770      	bx	lr

08001094 <_fini>:
 8001094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001096:	bf00      	nop
 8001098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800109a:	bc08      	pop	{r3}
 800109c:	469e      	mov	lr, r3
 800109e:	4770      	bx	lr
