
vrs_projekt_bug0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002838  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002978  08002978  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08002978  08002978  00012978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800297c  0800297c  0001297c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08002980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000094  20000020  0800299c  00020020  2**3
                  ALLOC
  7 ._user_heap_stack 00000400  200000b4  0800299c  000200b4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006490  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000011b5  00000000  00000000  000264d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000880  00000000  00000000  00027690  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007a8  00000000  00000000  00027f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002c4e  00000000  00000000  000286b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000256b  00000000  00000000  0002b306  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002d871  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000022bc  00000000  00000000  0002d8f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002fbac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000020 	.word	0x20000020
 800015c:	00000000 	.word	0x00000000
 8000160:	08002960 	.word	0x08002960

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000024 	.word	0x20000024
 800017c:	08002960 	.word	0x08002960

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	bf14      	ite	ne
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e720      	b.n	80002c4 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aedc 	beq.w	8000272 <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6c1      	b.n	8000272 <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <__gedf2>:
 8000914:	f04f 3cff 	mov.w	ip, #4294967295
 8000918:	e006      	b.n	8000928 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__ledf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	e002      	b.n	8000928 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__cmpdf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	f84d cd04 	str.w	ip, [sp, #-4]!
 800092c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000930:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000934:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000938:	bf18      	it	ne
 800093a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093e:	d01b      	beq.n	8000978 <__cmpdf2+0x54>
 8000940:	b001      	add	sp, #4
 8000942:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000946:	bf0c      	ite	eq
 8000948:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800094c:	ea91 0f03 	teqne	r1, r3
 8000950:	bf02      	ittt	eq
 8000952:	ea90 0f02 	teqeq	r0, r2
 8000956:	2000      	moveq	r0, #0
 8000958:	4770      	bxeq	lr
 800095a:	f110 0f00 	cmn.w	r0, #0
 800095e:	ea91 0f03 	teq	r1, r3
 8000962:	bf58      	it	pl
 8000964:	4299      	cmppl	r1, r3
 8000966:	bf08      	it	eq
 8000968:	4290      	cmpeq	r0, r2
 800096a:	bf2c      	ite	cs
 800096c:	17d8      	asrcs	r0, r3, #31
 800096e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000972:	f040 0001 	orr.w	r0, r0, #1
 8000976:	4770      	bx	lr
 8000978:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800097c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000980:	d102      	bne.n	8000988 <__cmpdf2+0x64>
 8000982:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000986:	d107      	bne.n	8000998 <__cmpdf2+0x74>
 8000988:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d1d6      	bne.n	8000940 <__cmpdf2+0x1c>
 8000992:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000996:	d0d3      	beq.n	8000940 <__cmpdf2+0x1c>
 8000998:	f85d 0b04 	ldr.w	r0, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <__aeabi_cdrcmple>:
 80009a0:	4684      	mov	ip, r0
 80009a2:	4610      	mov	r0, r2
 80009a4:	4662      	mov	r2, ip
 80009a6:	468c      	mov	ip, r1
 80009a8:	4619      	mov	r1, r3
 80009aa:	4663      	mov	r3, ip
 80009ac:	e000      	b.n	80009b0 <__aeabi_cdcmpeq>
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdcmpeq>:
 80009b0:	b501      	push	{r0, lr}
 80009b2:	f7ff ffb7 	bl	8000924 <__cmpdf2>
 80009b6:	2800      	cmp	r0, #0
 80009b8:	bf48      	it	mi
 80009ba:	f110 0f00 	cmnmi.w	r0, #0
 80009be:	bd01      	pop	{r0, pc}

080009c0 <__aeabi_dcmpeq>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff fff4 	bl	80009b0 <__aeabi_cdcmpeq>
 80009c8:	bf0c      	ite	eq
 80009ca:	2001      	moveq	r0, #1
 80009cc:	2000      	movne	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmplt>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffea 	bl	80009b0 <__aeabi_cdcmpeq>
 80009dc:	bf34      	ite	cc
 80009de:	2001      	movcc	r0, #1
 80009e0:	2000      	movcs	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmple>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffe0 	bl	80009b0 <__aeabi_cdcmpeq>
 80009f0:	bf94      	ite	ls
 80009f2:	2001      	movls	r0, #1
 80009f4:	2000      	movhi	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpge>:
 80009fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a00:	f7ff ffce 	bl	80009a0 <__aeabi_cdrcmple>
 8000a04:	bf94      	ite	ls
 8000a06:	2001      	movls	r0, #1
 8000a08:	2000      	movhi	r0, #0
 8000a0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dcmpgt>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff ffc4 	bl	80009a0 <__aeabi_cdrcmple>
 8000a18:	bf34      	ite	cc
 8000a1a:	2001      	movcc	r0, #1
 8000a1c:	2000      	movcs	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_d2uiz>:
 8000a24:	004a      	lsls	r2, r1, #1
 8000a26:	d211      	bcs.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d211      	bcs.n	8000a52 <__aeabi_d2uiz+0x2e>
 8000a2e:	d50d      	bpl.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d40e      	bmi.n	8000a58 <__aeabi_d2uiz+0x34>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d102      	bne.n	8000a5e <__aeabi_d2uiz+0x3a>
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	4770      	bx	lr
 8000a5e:	f04f 0000 	mov.w	r0, #0
 8000a62:	4770      	bx	lr

08000a64 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	73fb      	strb	r3, [r7, #15]
 8000a70:	2300      	movs	r3, #0
 8000a72:	73bb      	strb	r3, [r7, #14]
 8000a74:	230f      	movs	r3, #15
 8000a76:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	78db      	ldrb	r3, [r3, #3]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d038      	beq.n	8000af2 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000a80:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <NVIC_Init+0xb8>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000a8a:	0a1b      	lsrs	r3, r3, #8
 8000a8c:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	f1c3 0304 	rsb	r3, r3, #4
 8000a94:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000a96:	7b7a      	ldrb	r2, [r7, #13]
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	fa42 f303 	asr.w	r3, r2, r3
 8000a9e:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	785b      	ldrb	r3, [r3, #1]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	7bbb      	ldrb	r3, [r7, #14]
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	789a      	ldrb	r2, [r3, #2]
 8000ab2:	7b7b      	ldrb	r3, [r7, #13]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	011b      	lsls	r3, r3, #4
 8000ac2:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000ac4:	4a16      	ldr	r2, [pc, #88]	; (8000b20 <NVIC_Init+0xbc>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	7bfa      	ldrb	r2, [r7, #15]
 8000ace:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000ad2:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <NVIC_Init+0xbc>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	095b      	lsrs	r3, r3, #5
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	f003 031f 	and.w	r3, r3, #31
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000aec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000af0:	e00f      	b.n	8000b12 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000af2:	490b      	ldr	r1, [pc, #44]	; (8000b20 <NVIC_Init+0xbc>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	095b      	lsrs	r3, r3, #5
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	f003 031f 	and.w	r3, r3, #31
 8000b06:	2201      	movs	r2, #1
 8000b08:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b0a:	f100 0320 	add.w	r3, r0, #32
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00
 8000b20:	e000e100 	.word	0xe000e100

08000b24 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b087      	sub	sp, #28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	e07e      	b.n	8000c3e <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000b40:	2201      	movs	r2, #1
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d16d      	bne.n	8000c38 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2103      	movs	r1, #3
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	791b      	ldrb	r3, [r3, #4]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	fa01 f303 	lsl.w	r3, r1, r3
 8000b84:	431a      	orrs	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	791b      	ldrb	r3, [r3, #4]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d003      	beq.n	8000b9a <GPIO_Init+0x76>
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	791b      	ldrb	r3, [r3, #4]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d136      	bne.n	8000c08 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	2103      	movs	r1, #3
 8000ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	401a      	ands	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689a      	ldr	r2, [r3, #8]
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	795b      	ldrb	r3, [r3, #5]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	889b      	ldrh	r3, [r3, #4]
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	4013      	ands	r3, r2
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	889b      	ldrh	r3, [r3, #4]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	b21a      	sxth	r2, r3
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	799b      	ldrb	r3, [r3, #6]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfc:	b21b      	sxth	r3, r3
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	b21b      	sxth	r3, r3
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	68da      	ldr	r2, [r3, #12]
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	2103      	movs	r1, #3
 8000c14:	fa01 f303 	lsl.w	r3, r1, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68da      	ldr	r2, [r3, #12]
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	79db      	ldrb	r3, [r3, #7]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	431a      	orrs	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	f67f af7d 	bls.w	8000b40 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000c46:	bf00      	nop
 8000c48:	371c      	adds	r7, #28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: Specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	8a9b      	ldrh	r3, [r3, #20]
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	887b      	ldrh	r3, [r7, #2]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d002      	beq.n	8000c76 <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000c70:	2301      	movs	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
 8000c74:	e001      	b.n	8000c7a <GPIO_ReadOutputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000c76:	2300      	movs	r3, #0
 8000c78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
 8000c94:	4613      	mov	r3, r2
 8000c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8000c98:	787b      	ldrb	r3, [r7, #1]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	887a      	ldrh	r2, [r7, #2]
 8000ca2:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000ca4:	e002      	b.n	8000cac <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	887a      	ldrh	r2, [r7, #2]
 8000caa:	835a      	strh	r2, [r3, #26]
  }
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..H) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	8a9b      	ldrh	r3, [r3, #20]
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	887b      	ldrh	r3, [r7, #2]
 8000ccc:	4053      	eors	r3, r2
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	829a      	strh	r2, [r3, #20]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	807b      	strh	r3, [r7, #2]
 8000cec:	4613      	mov	r3, r2
 8000cee:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000cf8:	787a      	ldrb	r2, [r7, #1]
 8000cfa:	887b      	ldrh	r3, [r7, #2]
 8000cfc:	f003 0307 	and.w	r3, r3, #7
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	08db      	lsrs	r3, r3, #3
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	887b      	ldrh	r3, [r7, #2]
 8000d12:	08db      	lsrs	r3, r3, #3
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	461a      	mov	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3208      	adds	r2, #8
 8000d1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d20:	887b      	ldrh	r3, [r7, #2]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	210f      	movs	r1, #15
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	ea02 0103 	and.w	r1, r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f100 0208 	add.w	r2, r0, #8
 8000d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000d3e:	887b      	ldrh	r3, [r7, #2]
 8000d40:	08db      	lsrs	r3, r3, #3
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	461a      	mov	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3208      	adds	r2, #8
 8000d4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000d54:	887b      	ldrh	r3, [r7, #2]
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3208      	adds	r2, #8
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	; 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d90:	4b5f      	ldr	r3, [pc, #380]	; (8000f10 <RCC_GetClocksFreq+0x1a0>)
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f003 030c 	and.w	r3, r3, #12
 8000d98:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	2b0c      	cmp	r3, #12
 8000d9e:	d865      	bhi.n	8000e6c <RCC_GetClocksFreq+0xfc>
 8000da0:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <RCC_GetClocksFreq+0x38>)
 8000da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da6:	bf00      	nop
 8000da8:	08000ddd 	.word	0x08000ddd
 8000dac:	08000e6d 	.word	0x08000e6d
 8000db0:	08000e6d 	.word	0x08000e6d
 8000db4:	08000e6d 	.word	0x08000e6d
 8000db8:	08000dfd 	.word	0x08000dfd
 8000dbc:	08000e6d 	.word	0x08000e6d
 8000dc0:	08000e6d 	.word	0x08000e6d
 8000dc4:	08000e6d 	.word	0x08000e6d
 8000dc8:	08000e05 	.word	0x08000e05
 8000dcc:	08000e6d 	.word	0x08000e6d
 8000dd0:	08000e6d 	.word	0x08000e6d
 8000dd4:	08000e6d 	.word	0x08000e6d
 8000dd8:	08000e0d 	.word	0x08000e0d
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8000ddc:	4b4c      	ldr	r3, [pc, #304]	; (8000f10 <RCC_GetClocksFreq+0x1a0>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000de4:	0b5b      	lsrs	r3, r3, #13
 8000de6:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	3301      	adds	r3, #1
 8000dec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	461a      	mov	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	601a      	str	r2, [r3, #0]
      break;
 8000dfa:	e047      	b.n	8000e8c <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a45      	ldr	r2, [pc, #276]	; (8000f14 <RCC_GetClocksFreq+0x1a4>)
 8000e00:	601a      	str	r2, [r3, #0]
      break;
 8000e02:	e043      	b.n	8000e8c <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a44      	ldr	r2, [pc, #272]	; (8000f18 <RCC_GetClocksFreq+0x1a8>)
 8000e08:	601a      	str	r2, [r3, #0]
      break;
 8000e0a:	e03f      	b.n	8000e8c <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000e0c:	4b40      	ldr	r3, [pc, #256]	; (8000f10 <RCC_GetClocksFreq+0x1a0>)
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000e14:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8000e16:	4b3e      	ldr	r3, [pc, #248]	; (8000f10 <RCC_GetClocksFreq+0x1a0>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e1e:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	0c9b      	lsrs	r3, r3, #18
 8000e24:	4a3d      	ldr	r2, [pc, #244]	; (8000f1c <RCC_GetClocksFreq+0x1ac>)
 8000e26:	5cd3      	ldrb	r3, [r2, r3]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	0d9b      	lsrs	r3, r3, #22
 8000e30:	3301      	adds	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000e34:	4b36      	ldr	r3, [pc, #216]	; (8000f10 <RCC_GetClocksFreq+0x1a0>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e3c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d109      	bne.n	8000e58 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	4a33      	ldr	r2, [pc, #204]	; (8000f14 <RCC_GetClocksFreq+0x1a4>)
 8000e48:	fb02 f203 	mul.w	r2, r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000e56:	e019      	b.n	8000e8c <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	4a2f      	ldr	r2, [pc, #188]	; (8000f18 <RCC_GetClocksFreq+0x1a8>)
 8000e5c:	fb02 f203 	mul.w	r2, r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	601a      	str	r2, [r3, #0]
      }
      break;
 8000e6a:	e00f      	b.n	8000e8c <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8000e6c:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <RCC_GetClocksFreq+0x1a0>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000e74:	0b5b      	lsrs	r3, r3, #13
 8000e76:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	461a      	mov	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	601a      	str	r2, [r3, #0]
      break;
 8000e8a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000e8c:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <RCC_GetClocksFreq+0x1a0>)
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e94:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	091b      	lsrs	r3, r3, #4
 8000e9a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 8000e9c:	4a20      	ldr	r2, [pc, #128]	; (8000f20 <RCC_GetClocksFreq+0x1b0>)
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	40da      	lsrs	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <RCC_GetClocksFreq+0x1a0>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ebc:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000ec4:	4a16      	ldr	r2, [pc, #88]	; (8000f20 <RCC_GetClocksFreq+0x1b0>)
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	4413      	add	r3, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	40da      	lsrs	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <RCC_GetClocksFreq+0x1a0>)
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000ee4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	0adb      	lsrs	r3, r3, #11
 8000eea:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000eec:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <RCC_GetClocksFreq+0x1b0>)
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	40da      	lsrs	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	60da      	str	r2, [r3, #12]
}
 8000f04:	bf00      	nop
 8000f06:	3724      	adds	r7, #36	; 0x24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	00f42400 	.word	0x00f42400
 8000f18:	007a1200 	.word	0x007a1200
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	2000000c 	.word	0x2000000c

08000f24 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d006      	beq.n	8000f44 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000f36:	4909      	ldr	r1, [pc, #36]	; (8000f5c <RCC_AHBPeriphClockCmd+0x38>)
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <RCC_AHBPeriphClockCmd+0x38>)
 8000f3a:	69da      	ldr	r2, [r3, #28]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000f42:	e006      	b.n	8000f52 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000f44:	4905      	ldr	r1, [pc, #20]	; (8000f5c <RCC_AHBPeriphClockCmd+0x38>)
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <RCC_AHBPeriphClockCmd+0x38>)
 8000f48:	69da      	ldr	r2, [r3, #28]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61cb      	str	r3, [r1, #28]
  }
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	40023800 	.word	0x40023800

08000f60 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f6c:	78fb      	ldrb	r3, [r7, #3]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d006      	beq.n	8000f80 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000f72:	4909      	ldr	r1, [pc, #36]	; (8000f98 <RCC_APB2PeriphClockCmd+0x38>)
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <RCC_APB2PeriphClockCmd+0x38>)
 8000f76:	6a1a      	ldr	r2, [r3, #32]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000f7e:	e006      	b.n	8000f8e <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000f80:	4905      	ldr	r1, [pc, #20]	; (8000f98 <RCC_APB2PeriphClockCmd+0x38>)
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <RCC_APB2PeriphClockCmd+0x38>)
 8000f84:	6a1a      	ldr	r2, [r3, #32]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	620b      	str	r3, [r1, #32]
  }
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	40023800 	.word	0x40023800

08000f9c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d006      	beq.n	8000fbc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000fae:	4909      	ldr	r1, [pc, #36]	; (8000fd4 <RCC_APB1PeriphClockCmd+0x38>)
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <RCC_APB1PeriphClockCmd+0x38>)
 8000fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000fba:	e006      	b.n	8000fca <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000fbc:	4905      	ldr	r1, [pc, #20]	; (8000fd4 <RCC_APB1PeriphClockCmd+0x38>)
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <RCC_APB1PeriphClockCmd+0x38>)
 8000fc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff2:	d00b      	beq.n	800100c <TIM_TimeBaseInit+0x34>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a1c      	ldr	r2, [pc, #112]	; (8001068 <TIM_TimeBaseInit+0x90>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d007      	beq.n	800100c <TIM_TimeBaseInit+0x34>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a1b      	ldr	r2, [pc, #108]	; (800106c <TIM_TimeBaseInit+0x94>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d003      	beq.n	800100c <TIM_TimeBaseInit+0x34>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a1a      	ldr	r2, [pc, #104]	; (8001070 <TIM_TimeBaseInit+0x98>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d108      	bne.n	800101e <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 800100c:	89fb      	ldrh	r3, [r7, #14]
 800100e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001012:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	885a      	ldrh	r2, [r3, #2]
 8001018:	89fb      	ldrh	r3, [r7, #14]
 800101a:	4313      	orrs	r3, r2
 800101c:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a14      	ldr	r2, [pc, #80]	; (8001074 <TIM_TimeBaseInit+0x9c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00c      	beq.n	8001040 <TIM_TimeBaseInit+0x68>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a13      	ldr	r2, [pc, #76]	; (8001078 <TIM_TimeBaseInit+0xa0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d008      	beq.n	8001040 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 800102e:	89fb      	ldrh	r3, [r7, #14]
 8001030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001034:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	891a      	ldrh	r2, [r3, #8]
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	4313      	orrs	r3, r2
 800103e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	89fa      	ldrh	r2, [r7, #14]
 8001044:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	881a      	ldrh	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	829a      	strh	r2, [r3, #20]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40000400 	.word	0x40000400
 800106c:	40000800 	.word	0x40000800
 8001070:	40000c00 	.word	0x40000c00
 8001074:	40001000 	.word	0x40001000
 8001078:	40001400 	.word	0x40001400

0800107c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d008      	beq.n	80010a0 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	b29b      	uxth	r3, r3
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	b29a      	uxth	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 800109e:	e007      	b.n	80010b0 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f023 0301 	bic.w	r3, r3, #1
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	801a      	strh	r2, [r3, #0]
  }
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <TIM_OC3Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	81fb      	strh	r3, [r7, #14]
 80010ca:	2300      	movs	r3, #0
 80010cc:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	8c1b      	ldrh	r3, [r3, #32]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010d8:	b29a      	uxth	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	8c1b      	ldrh	r3, [r3, #32]
 80010e2:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	8b9b      	ldrh	r3, [r3, #28]
 80010e8:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 80010ea:	89fb      	ldrh	r3, [r7, #14]
 80010ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010f0:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	881a      	ldrh	r2, [r3, #0]
 80010f6:	89fb      	ldrh	r3, [r7, #14]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 80010fc:	89bb      	ldrh	r3, [r7, #12]
 80010fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001102:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	891b      	ldrh	r3, [r3, #8]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	b29a      	uxth	r2, r3
 800110c:	89bb      	ldrh	r3, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	885b      	ldrh	r3, [r3, #2]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b29a      	uxth	r2, r3
 800111a:	89bb      	ldrh	r3, [r7, #12]
 800111c:	4313      	orrs	r3, r2
 800111e:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	89fa      	ldrh	r2, [r7, #14]
 800112c:	839a      	strh	r2, [r3, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	89ba      	ldrh	r2, [r7, #12]
 8001132:	841a      	strh	r2, [r3, #32]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop

08001140 <TIM_OC4Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	81fb      	strh	r3, [r7, #14]
 800114e:	2300      	movs	r3, #0
 8001150:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	8c1b      	ldrh	r3, [r3, #32]
 8001156:	b29b      	uxth	r3, r3
 8001158:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800115c:	b29a      	uxth	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	8c1b      	ldrh	r3, [r3, #32]
 8001166:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	8b9b      	ldrh	r3, [r3, #28]
 800116c:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 800116e:	89fb      	ldrh	r3, [r7, #14]
 8001170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001174:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	b29a      	uxth	r2, r3
 800117e:	89fb      	ldrh	r3, [r7, #14]
 8001180:	4313      	orrs	r3, r2
 8001182:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8001184:	89bb      	ldrh	r3, [r7, #12]
 8001186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800118a:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	891b      	ldrh	r3, [r3, #8]
 8001190:	031b      	lsls	r3, r3, #12
 8001192:	b29a      	uxth	r2, r3
 8001194:	89bb      	ldrh	r3, [r7, #12]
 8001196:	4313      	orrs	r3, r2
 8001198:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	885b      	ldrh	r3, [r3, #2]
 800119e:	031b      	lsls	r3, r3, #12
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	89bb      	ldrh	r3, [r7, #12]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	89fa      	ldrh	r2, [r7, #14]
 80011b4:	839a      	strh	r2, [r3, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	89ba      	ldrh	r2, [r7, #12]
 80011ba:	841a      	strh	r2, [r3, #32]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	8b9b      	ldrh	r3, [r3, #28]
 80011dc:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 80011de:	89fb      	ldrh	r3, [r7, #14]
 80011e0:	f023 0308 	bic.w	r3, r3, #8
 80011e4:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80011e6:	89fa      	ldrh	r2, [r7, #14]
 80011e8:	887b      	ldrh	r3, [r7, #2]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	89fa      	ldrh	r2, [r7, #14]
 80011f2:	839a      	strh	r2, [r3, #28]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop

08001200 <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	8b9b      	ldrh	r3, [r3, #28]
 8001214:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 8001216:	89fb      	ldrh	r3, [r7, #14]
 8001218:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800121c:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800121e:	887b      	ldrh	r3, [r7, #2]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b29a      	uxth	r2, r3
 8001224:	89fb      	ldrh	r3, [r7, #14]
 8001226:	4313      	orrs	r3, r2
 8001228:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	89fa      	ldrh	r2, [r7, #14]
 800122e:	839a      	strh	r2, [r3, #28]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop

0800123c <TIM_ICInit>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10f      	bne.n	800126e <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	8859      	ldrh	r1, [r3, #2]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	889a      	ldrh	r2, [r3, #4]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	891b      	ldrh	r3, [r3, #8]
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 f938 	bl	80014d0 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	88db      	ldrh	r3, [r3, #6]
 8001264:	4619      	mov	r1, r3
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 f860 	bl	800132c <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800126c:	e036      	b.n	80012dc <TIM_ICInit+0xa0>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	2b04      	cmp	r3, #4
 8001274:	d10f      	bne.n	8001296 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	8859      	ldrh	r1, [r3, #2]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	889a      	ldrh	r2, [r3, #4]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	891b      	ldrh	r3, [r3, #8]
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 f966 	bl	8001554 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	88db      	ldrh	r3, [r3, #6]
 800128c:	4619      	mov	r1, r3
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f868 	bl	8001364 <TIM_SetIC2Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001294:	e022      	b.n	80012dc <TIM_ICInit+0xa0>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	2b08      	cmp	r3, #8
 800129c:	d10f      	bne.n	80012be <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	8859      	ldrh	r1, [r3, #2]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	889a      	ldrh	r2, [r3, #4]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	891b      	ldrh	r3, [r3, #8]
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f99e 	bl	80015ec <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	88db      	ldrh	r3, [r3, #6]
 80012b4:	4619      	mov	r1, r3
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f872 	bl	80013a0 <TIM_SetIC3Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80012bc:	e00e      	b.n	80012dc <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	8859      	ldrh	r1, [r3, #2]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	889a      	ldrh	r2, [r3, #4]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	891b      	ldrh	r3, [r3, #8]
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 f9d6 	bl	800167c <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	88db      	ldrh	r3, [r3, #6]
 80012d4:	4619      	mov	r1, r3
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 f87e 	bl	80013d8 <TIM_SetIC4Prescaler>
  }
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 2, 3, 4, 5, 9, 10 or 11 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop

080012fc <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 2, 3, 4 or 5 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop

08001314 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 2, 3, 4 or 5 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop

0800132c <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	8b1b      	ldrh	r3, [r3, #24]
 800133c:	b29b      	uxth	r3, r3
 800133e:	f023 030c 	bic.w	r3, r3, #12
 8001342:	b29a      	uxth	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	8b1b      	ldrh	r3, [r3, #24]
 800134c:	b29a      	uxth	r2, r3
 800134e:	887b      	ldrh	r3, [r7, #2]
 8001350:	4313      	orrs	r3, r2
 8001352:	b29a      	uxth	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	831a      	strh	r2, [r3, #24]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop

08001364 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	8b1b      	ldrh	r3, [r3, #24]
 8001374:	b29b      	uxth	r3, r3
 8001376:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800137a:	b29a      	uxth	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	8b1b      	ldrh	r3, [r3, #24]
 8001384:	b29a      	uxth	r2, r3
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	b29b      	uxth	r3, r3
 800138c:	4313      	orrs	r3, r2
 800138e:	b29a      	uxth	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	831a      	strh	r2, [r3, #24]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	8b9b      	ldrh	r3, [r3, #28]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	f023 030c 	bic.w	r3, r3, #12
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	8b9b      	ldrh	r3, [r3, #28]
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	839a      	strh	r2, [r3, #28]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop

080013d8 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	8b9b      	ldrh	r3, [r3, #28]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	8b9b      	ldrh	r3, [r3, #28]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	887b      	ldrh	r3, [r7, #2]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	b29a      	uxth	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	839a      	strh	r2, [r3, #28]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop

08001414 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
 8001420:	4613      	mov	r3, r2
 8001422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001424:	787b      	ldrb	r3, [r7, #1]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d008      	beq.n	800143c <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	899b      	ldrh	r3, [r3, #12]
 800142e:	b29a      	uxth	r2, r3
 8001430:	887b      	ldrh	r3, [r7, #2]
 8001432:	4313      	orrs	r3, r2
 8001434:	b29a      	uxth	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800143a:	e009      	b.n	8001450 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	899b      	ldrh	r3, [r3, #12]
 8001440:	b29a      	uxth	r2, r3
 8001442:	887b      	ldrh	r3, [r7, #2]
 8001444:	43db      	mvns	r3, r3
 8001446:	b29b      	uxth	r3, r3
 8001448:	4013      	ands	r3, r2
 800144a:	b29a      	uxth	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	819a      	strh	r2, [r3, #12]
  }
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop

0800145c <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001468:	2300      	movs	r3, #0
 800146a:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800146c:	2300      	movs	r3, #0
 800146e:	81bb      	strh	r3, [r7, #12]
 8001470:	2300      	movs	r3, #0
 8001472:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	8a1b      	ldrh	r3, [r3, #16]
 8001478:	b29a      	uxth	r2, r3
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	4013      	ands	r3, r2
 800147e:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	899b      	ldrh	r3, [r3, #12]
 8001484:	b29a      	uxth	r2, r3
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	4013      	ands	r3, r2
 800148a:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800148c:	89bb      	ldrh	r3, [r7, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <TIM_GetITStatus+0x42>
 8001492:	897b      	ldrh	r3, [r7, #10]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001498:	2301      	movs	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	e001      	b.n	80014a2 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop

080014b0 <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80014bc:	887b      	ldrh	r3, [r7, #2]
 80014be:	43db      	mvns	r3, r3
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	821a      	strh	r2, [r3, #16]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	4608      	mov	r0, r1
 80014da:	4611      	mov	r1, r2
 80014dc:	461a      	mov	r2, r3
 80014de:	4603      	mov	r3, r0
 80014e0:	817b      	strh	r3, [r7, #10]
 80014e2:	460b      	mov	r3, r1
 80014e4:	813b      	strh	r3, [r7, #8]
 80014e6:	4613      	mov	r3, r2
 80014e8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	82fb      	strh	r3, [r7, #22]
 80014ee:	2300      	movs	r3, #0
 80014f0:	82bb      	strh	r3, [r7, #20]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	8c1b      	ldrh	r3, [r3, #32]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	8b1b      	ldrh	r3, [r3, #24]
 8001506:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	8c1b      	ldrh	r3, [r3, #32]
 800150c:	82bb      	strh	r3, [r7, #20]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 800150e:	8afb      	ldrh	r3, [r7, #22]
 8001510:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8001514:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	b29a      	uxth	r2, r3
 800151c:	893b      	ldrh	r3, [r7, #8]
 800151e:	4313      	orrs	r3, r2
 8001520:	b29a      	uxth	r2, r3
 8001522:	8afb      	ldrh	r3, [r7, #22]
 8001524:	4313      	orrs	r3, r2
 8001526:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001528:	8abb      	ldrh	r3, [r7, #20]
 800152a:	f023 030a 	bic.w	r3, r3, #10
 800152e:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001530:	897a      	ldrh	r2, [r7, #10]
 8001532:	8abb      	ldrh	r3, [r7, #20]
 8001534:	4313      	orrs	r3, r2
 8001536:	b29b      	uxth	r3, r3
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8afa      	ldrh	r2, [r7, #22]
 8001542:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	8aba      	ldrh	r2, [r7, #20]
 8001548:	841a      	strh	r2, [r3, #32]
}
 800154a:	bf00      	nop
 800154c:	371c      	adds	r7, #28
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001554:	b480      	push	{r7}
 8001556:	b087      	sub	sp, #28
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	4608      	mov	r0, r1
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	4603      	mov	r3, r0
 8001564:	817b      	strh	r3, [r7, #10]
 8001566:	460b      	mov	r3, r1
 8001568:	813b      	strh	r3, [r7, #8]
 800156a:	4613      	mov	r3, r2
 800156c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	82fb      	strh	r3, [r7, #22]
 8001572:	2300      	movs	r3, #0
 8001574:	82bb      	strh	r3, [r7, #20]
 8001576:	2300      	movs	r3, #0
 8001578:	827b      	strh	r3, [r7, #18]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	8c1b      	ldrh	r3, [r3, #32]
 800157e:	b29b      	uxth	r3, r3
 8001580:	f023 0310 	bic.w	r3, r3, #16
 8001584:	b29a      	uxth	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8b1b      	ldrh	r3, [r3, #24]
 800158e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8c1b      	ldrh	r3, [r3, #32]
 8001594:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8001596:	897b      	ldrh	r3, [r7, #10]
 8001598:	011b      	lsls	r3, r3, #4
 800159a:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 800159c:	8afb      	ldrh	r3, [r7, #22]
 800159e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015a2:	051b      	lsls	r3, r3, #20
 80015a4:	0d1b      	lsrs	r3, r3, #20
 80015a6:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	031b      	lsls	r3, r3, #12
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	8afb      	ldrh	r3, [r7, #22]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80015b4:	893b      	ldrh	r3, [r7, #8]
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	8afb      	ldrh	r3, [r7, #22]
 80015bc:	4313      	orrs	r3, r2
 80015be:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80015c0:	8abb      	ldrh	r3, [r7, #20]
 80015c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80015c6:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80015c8:	8a7a      	ldrh	r2, [r7, #18]
 80015ca:	8abb      	ldrh	r3, [r7, #20]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	f043 0310 	orr.w	r3, r3, #16
 80015d4:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	8afa      	ldrh	r2, [r7, #22]
 80015da:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8aba      	ldrh	r2, [r7, #20]
 80015e0:	841a      	strh	r2, [r3, #32]
}
 80015e2:	bf00      	nop
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	4608      	mov	r0, r1
 80015f6:	4611      	mov	r1, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	4603      	mov	r3, r0
 80015fc:	817b      	strh	r3, [r7, #10]
 80015fe:	460b      	mov	r3, r1
 8001600:	813b      	strh	r3, [r7, #8]
 8001602:	4613      	mov	r3, r2
 8001604:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	82fb      	strh	r3, [r7, #22]
 800160a:	2300      	movs	r3, #0
 800160c:	82bb      	strh	r3, [r7, #20]
 800160e:	2300      	movs	r3, #0
 8001610:	827b      	strh	r3, [r7, #18]
  
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8c1b      	ldrh	r3, [r3, #32]
 8001616:	b29b      	uxth	r3, r3
 8001618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8b9b      	ldrh	r3, [r3, #28]
 8001626:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	8c1b      	ldrh	r3, [r3, #32]
 800162c:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800162e:	897b      	ldrh	r3, [r7, #10]
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8001634:	8afb      	ldrh	r3, [r7, #22]
 8001636:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800163a:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	b29a      	uxth	r2, r3
 8001642:	893b      	ldrh	r3, [r7, #8]
 8001644:	4313      	orrs	r3, r2
 8001646:	b29a      	uxth	r2, r3
 8001648:	8afb      	ldrh	r3, [r7, #22]
 800164a:	4313      	orrs	r3, r2
 800164c:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800164e:	8abb      	ldrh	r3, [r7, #20]
 8001650:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8001654:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8001656:	8a7a      	ldrh	r2, [r7, #18]
 8001658:	8abb      	ldrh	r3, [r7, #20]
 800165a:	4313      	orrs	r3, r2
 800165c:	b29b      	uxth	r3, r3
 800165e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001662:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8afa      	ldrh	r2, [r7, #22]
 8001668:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8aba      	ldrh	r2, [r7, #20]
 800166e:	841a      	strh	r2, [r3, #32]
}
 8001670:	bf00      	nop
 8001672:	371c      	adds	r7, #28
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop

0800167c <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800167c:	b480      	push	{r7}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	4608      	mov	r0, r1
 8001686:	4611      	mov	r1, r2
 8001688:	461a      	mov	r2, r3
 800168a:	4603      	mov	r3, r0
 800168c:	817b      	strh	r3, [r7, #10]
 800168e:	460b      	mov	r3, r1
 8001690:	813b      	strh	r3, [r7, #8]
 8001692:	4613      	mov	r3, r2
 8001694:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	82fb      	strh	r3, [r7, #22]
 800169a:	2300      	movs	r3, #0
 800169c:	82bb      	strh	r3, [r7, #20]
 800169e:	2300      	movs	r3, #0
 80016a0:	827b      	strh	r3, [r7, #18]
  
  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8c1b      	ldrh	r3, [r3, #32]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8b9b      	ldrh	r3, [r3, #28]
 80016b6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8c1b      	ldrh	r3, [r3, #32]
 80016bc:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 80016be:	897b      	ldrh	r3, [r7, #10]
 80016c0:	031b      	lsls	r3, r3, #12
 80016c2:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 80016c4:	8afb      	ldrh	r3, [r7, #22]
 80016c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016ca:	051b      	lsls	r3, r3, #20
 80016cc:	0d1b      	lsrs	r3, r3, #20
 80016ce:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 80016d0:	893b      	ldrh	r3, [r7, #8]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	8afb      	ldrh	r3, [r7, #22]
 80016d8:	4313      	orrs	r3, r2
 80016da:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	031b      	lsls	r3, r3, #12
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	8afb      	ldrh	r3, [r7, #22]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80016e8:	8abb      	ldrh	r3, [r7, #20]
 80016ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016ee:	045b      	lsls	r3, r3, #17
 80016f0:	0c5b      	lsrs	r3, r3, #17
 80016f2:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80016f4:	8a7a      	ldrh	r2, [r7, #18]
 80016f6:	8abb      	ldrh	r3, [r7, #20]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001700:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8afa      	ldrh	r2, [r7, #22]
 8001706:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8aba      	ldrh	r2, [r7, #20]
 800170c:	841a      	strh	r2, [r3, #32]
}
 800170e:	bf00      	nop
 8001710:	371c      	adds	r7, #28
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that 
  *        contains the configuration information for the specified USART peripheral.
  * @retval None.
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }
   
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	8a1b      	ldrh	r3, [r3, #16]
 8001736:	b29b      	uxth	r3, r3
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001740:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	88db      	ldrh	r3, [r3, #6]
 8001746:	461a      	mov	r2, r3
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	4313      	orrs	r3, r2
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	b29a      	uxth	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	899b      	ldrh	r3, [r3, #12]
 800175a:	b29b      	uxth	r3, r3
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001764:	f023 030c 	bic.w	r3, r3, #12
 8001768:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	889a      	ldrh	r2, [r3, #4]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	891b      	ldrh	r3, [r3, #8]
 8001772:	4313      	orrs	r3, r2
 8001774:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800177a:	4313      	orrs	r3, r2
 800177c:	b29b      	uxth	r3, r3
 800177e:	461a      	mov	r2, r3
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	4313      	orrs	r3, r2
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	b29a      	uxth	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	8a9b      	ldrh	r3, [r3, #20]
 8001792:	b29b      	uxth	r3, r3
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800179c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	899b      	ldrh	r3, [r3, #12]
 80017a2:	461a      	mov	r2, r3
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	4313      	orrs	r3, r2
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fada 	bl	8000d70 <RCC_GetClocksFreq>
  if (USARTx == USART1) 
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a2e      	ldr	r2, [pc, #184]	; (8001878 <USART_Init+0x160>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d102      	bne.n	80017ca <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	623b      	str	r3, [r7, #32]
 80017c8:	e001      	b.n	80017ce <USART_Init+0xb6>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	623b      	str	r3, [r7, #32]
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	899b      	ldrh	r3, [r3, #12]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	da0c      	bge.n	80017f4 <USART_Init+0xdc>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80017da:	6a3a      	ldr	r2, [r7, #32]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	009a      	lsls	r2, r3, #2
 80017e4:	441a      	add	r2, r3
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	e00b      	b.n	800180c <USART_Init+0xf4>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80017f4:	6a3a      	ldr	r2, [r7, #32]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	009a      	lsls	r2, r3, #2
 80017fe:	441a      	add	r2, r3
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	4a1b      	ldr	r2, [pc, #108]	; (800187c <USART_Init+0x164>)
 8001810:	fba2 2303 	umull	r2, r3, r2, r3
 8001814:	095b      	lsrs	r3, r3, #5
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	2264      	movs	r2, #100	; 0x64
 8001820:	fb02 f303 	mul.w	r3, r2, r3
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	899b      	ldrh	r3, [r3, #12]
 800182e:	b29b      	uxth	r3, r3
 8001830:	b21b      	sxth	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	da0c      	bge.n	8001850 <USART_Init+0x138>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	3332      	adds	r3, #50	; 0x32
 800183c:	4a0f      	ldr	r2, [pc, #60]	; (800187c <USART_Init+0x164>)
 800183e:	fba2 2303 	umull	r2, r3, r2, r3
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184a:	4313      	orrs	r3, r2
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
 800184e:	e00b      	b.n	8001868 <USART_Init+0x150>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	3332      	adds	r3, #50	; 0x32
 8001856:	4a09      	ldr	r2, [pc, #36]	; (800187c <USART_Init+0x164>)
 8001858:	fba2 2303 	umull	r2, r3, r2, r3
 800185c:	095b      	lsrs	r3, r3, #5
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001864:	4313      	orrs	r3, r2
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
  }
 
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	b29a      	uxth	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	811a      	strh	r2, [r3, #8]
}
 8001870:	bf00      	nop
 8001872:	3728      	adds	r7, #40	; 0x28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40013800 	.word	0x40013800
 800187c:	51eb851f 	.word	0x51eb851f

08001880 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d008      	beq.n	80018a4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	899b      	ldrh	r3, [r3, #12]
 8001896:	b29b      	uxth	r3, r3
 8001898:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800189c:	b29a      	uxth	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80018a2:	e007      	b.n	80018b4 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	899b      	ldrh	r3, [r3, #12]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	819a      	strh	r2, [r3, #12]
  }
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop

080018c0 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None.
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80018cc:	887b      	ldrh	r3, [r7, #2]
 80018ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	809a      	strh	r2, [r3, #4]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop

080018e4 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	889b      	ldrh	r3, [r3, #4]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f6:	b29b      	uxth	r3, r3
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop

08001904 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001904:	b480      	push	{r7}
 8001906:	b087      	sub	sp, #28
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
 8001910:	4613      	mov	r3, r2
 8001912:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001928:	887b      	ldrh	r3, [r7, #2]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	095b      	lsrs	r3, r3, #5
 800192e:	b2db      	uxtb	r3, r3
 8001930:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001932:	887b      	ldrh	r3, [r7, #2]
 8001934:	f003 031f 	and.w	r3, r3, #31
 8001938:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800193a:	2201      	movs	r2, #1
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d103      	bne.n	8001952 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	330c      	adds	r3, #12
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	e009      	b.n	8001966 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d103      	bne.n	8001960 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3310      	adds	r3, #16
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	e002      	b.n	8001966 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	3314      	adds	r3, #20
 8001964:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001966:	787b      	ldrb	r3, [r7, #1]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d006      	beq.n	800197a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	6811      	ldr	r1, [r2, #0]
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	430a      	orrs	r2, r1
 8001976:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001978:	e006      	b.n	8001988 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	6811      	ldr	r1, [r2, #0]
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	43d2      	mvns	r2, r2
 8001984:	400a      	ands	r2, r1
 8001986:	601a      	str	r2, [r3, #0]
  }
}
 8001988:	bf00      	nop
 800198a:	371c      	adds	r7, #28
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop

08001994 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80019b0:	887b      	ldrh	r3, [r7, #2]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	095b      	lsrs	r3, r3, #5
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80019ba:	887b      	ldrh	r3, [r7, #2]
 80019bc:	f003 031f 	and.w	r3, r3, #31
 80019c0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80019c2:	2201      	movs	r2, #1
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d107      	bne.n	80019e2 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	899b      	ldrh	r3, [r3, #12]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	4013      	ands	r3, r2
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	e011      	b.n	8001a06 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d107      	bne.n	80019f8 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	8a1b      	ldrh	r3, [r3, #16]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	4013      	ands	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e006      	b.n	8001a06 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	8a9b      	ldrh	r3, [r3, #20]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	4013      	ands	r3, r2
 8001a04:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001a0e:	2201      	movs	r2, #1
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4013      	ands	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d005      	beq.n	8001a38 <USART_GetITStatus+0xa4>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001a32:	2301      	movs	r3, #1
 8001a34:	74fb      	strb	r3, [r7, #19]
 8001a36:	e001      	b.n	8001a3c <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001a3c:	7cfb      	ldrb	r3, [r7, #19]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	371c      	adds	r7, #28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr

08001a48 <USART_ClearITPendingBit>:
  * @note TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8001a54:	2300      	movs	r3, #0
 8001a56:	81fb      	strh	r3, [r7, #14]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8001a5c:	887b      	ldrh	r3, [r7, #2]
 8001a5e:	0a1b      	lsrs	r3, r3, #8
 8001a60:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001a62:	89fb      	ldrh	r3, [r7, #14]
 8001a64:	2201      	movs	r2, #1
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8001a6c:	89bb      	ldrh	r3, [r7, #12]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	801a      	strh	r2, [r3, #0]
}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <initUSART3>:
 */


#include <bluetooth.h>

void initUSART3(){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0

	running = 0;
 8001a86:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <initUSART3+0xbc>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
	change_goal_request = 0;
 8001a8c:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <initUSART3+0xc0>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
	goal_bearing = 0;
 8001a92:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <initUSART3+0xc4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8001a98:	2101      	movs	r1, #1
 8001a9a:	2004      	movs	r0, #4
 8001a9c:	f7ff fa42 	bl	8000f24 <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001aa6:	f7ff fa79 	bl	8000f9c <RCC_APB1PeriphClockCmd>


	GPIO_InitTypeDef GPIO_usrt;

	GPIO_usrt.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 8001aaa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001aae:	61bb      	str	r3, [r7, #24]
	GPIO_usrt.GPIO_Mode = GPIO_Mode_AF;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	773b      	strb	r3, [r7, #28]
	GPIO_usrt.GPIO_OType = GPIO_OType_PP;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	77bb      	strb	r3, [r7, #30]
	GPIO_usrt.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	77fb      	strb	r3, [r7, #31]
	GPIO_usrt.GPIO_Speed = GPIO_Speed_40MHz;
 8001abc:	2303      	movs	r3, #3
 8001abe:	777b      	strb	r3, [r7, #29]

	GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_USART3);
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	210a      	movs	r1, #10
 8001ac4:	4820      	ldr	r0, [pc, #128]	; (8001b48 <initUSART3+0xc8>)
 8001ac6:	f7ff f90b 	bl	8000ce0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_USART3);
 8001aca:	2207      	movs	r2, #7
 8001acc:	210b      	movs	r1, #11
 8001ace:	481e      	ldr	r0, [pc, #120]	; (8001b48 <initUSART3+0xc8>)
 8001ad0:	f7ff f906 	bl	8000ce0 <GPIO_PinAFConfig>

	GPIO_Init(GPIOC, &GPIO_usrt);
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	4619      	mov	r1, r3
 8001ada:	481b      	ldr	r0, [pc, #108]	; (8001b48 <initUSART3+0xc8>)
 8001adc:	f7ff f822 	bl	8000b24 <GPIO_Init>

//	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
	//GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);

	USART_InitTypeDef USART_InitStructure;
	USART_InitStructure.USART_BaudRate = 19200;
 8001ae0:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8001ae4:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8001aee:	2300      	movs	r3, #0
 8001af0:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001af2:	2300      	movs	r3, #0
 8001af4:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001af6:	230c      	movs	r3, #12
 8001af8:	827b      	strh	r3, [r7, #18]
	USART_Init(USART3, &USART_InitStructure);
 8001afa:	f107 0308 	add.w	r3, r7, #8
 8001afe:	4619      	mov	r1, r3
 8001b00:	4812      	ldr	r0, [pc, #72]	; (8001b4c <initUSART3+0xcc>)
 8001b02:	f7ff fe09 	bl	8001718 <USART_Init>
	USART_Cmd(USART3, ENABLE);
 8001b06:	2101      	movs	r1, #1
 8001b08:	4810      	ldr	r0, [pc, #64]	; (8001b4c <initUSART3+0xcc>)
 8001b0a:	f7ff feb9 	bl	8001880 <USART_Cmd>

	//interrupt
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f240 5125 	movw	r1, #1317	; 0x525
 8001b14:	480d      	ldr	r0, [pc, #52]	; (8001b4c <initUSART3+0xcc>)
 8001b16:	f7ff fef5 	bl	8001904 <USART_ITConfig>

	//NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);

	  /* Enable the USARTx Interrupt */
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 8001b1a:	2327      	movs	r3, #39	; 0x27
 8001b1c:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 8001b22:	2303      	movs	r3, #3
 8001b24:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001b26:	2301      	movs	r3, #1
 8001b28:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe ff99 	bl	8000a64 <NVIC_Init>

	//USART_Cmd(USART1, ENABLE);
}
 8001b32:	bf00      	nop
 8001b34:	3720      	adds	r7, #32
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000044 	.word	0x20000044
 8001b40:	20000048 	.word	0x20000048
 8001b44:	20000040 	.word	0x20000040
 8001b48:	40020800 	.word	0x40020800
 8001b4c:	40004800 	.word	0x40004800

08001b50 <PutcUART3>:

void PutcUART3(char ch){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
	USART_SendData(USART3, (uint8_t) ch);
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4803      	ldr	r0, [pc, #12]	; (8001b70 <PutcUART3+0x20>)
 8001b62:	f7ff fead 	bl	80018c0 <USART_SendData>

}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40004800 	.word	0x40004800

08001b74 <USART3_IRQHandler>:

void USART3_IRQHandler(void){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0

	if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)
 8001b7a:	f240 5125 	movw	r1, #1317	; 0x525
 8001b7e:	481e      	ldr	r0, [pc, #120]	; (8001bf8 <USART3_IRQHandler+0x84>)
 8001b80:	f7ff ff08 	bl	8001994 <USART_GetITStatus>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d032      	beq.n	8001bf0 <USART3_IRQHandler+0x7c>
	{
		USART_ClearITPendingBit(USART3, USART_IT_RXNE);
 8001b8a:	f240 5125 	movw	r1, #1317	; 0x525
 8001b8e:	481a      	ldr	r0, [pc, #104]	; (8001bf8 <USART3_IRQHandler+0x84>)
 8001b90:	f7ff ff5a 	bl	8001a48 <USART_ClearITPendingBit>
		char znak = USART_ReceiveData(USART3);
 8001b94:	4818      	ldr	r0, [pc, #96]	; (8001bf8 <USART3_IRQHandler+0x84>)
 8001b96:	f7ff fea5 	bl	80018e4 <USART_ReceiveData>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]

		//ak v predoslom byte bola poziadavka na zmenu ziadaneho uhla,
		//tak ciel zmeni ak dalsi byte je v zadanom rozsahu
		if (change_goal_request){
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <USART3_IRQHandler+0x88>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00b      	beq.n	8001bbe <USART3_IRQHandler+0x4a>

			if (znak >= '0' && znak <= '7')
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	2b2f      	cmp	r3, #47	; 0x2f
 8001baa:	d905      	bls.n	8001bb8 <USART3_IRQHandler+0x44>
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	2b37      	cmp	r3, #55	; 0x37
 8001bb0:	d802      	bhi.n	8001bb8 <USART3_IRQHandler+0x44>
			goal_bearing = znak;
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <USART3_IRQHandler+0x8c>)
 8001bb6:	6013      	str	r3, [r2, #0]

			change_goal_request = 0;
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <USART3_IRQHandler+0x88>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
		}

		switch (znak){
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	2b63      	cmp	r3, #99	; 0x63
 8001bc2:	d00d      	beq.n	8001be0 <USART3_IRQHandler+0x6c>
 8001bc4:	2b78      	cmp	r3, #120	; 0x78
 8001bc6:	d10f      	bne.n	8001be8 <USART3_IRQHandler+0x74>
		case 'x':   // vypinanie/zapinanie pohybu
			if (running)
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <USART3_IRQHandler+0x90>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <USART3_IRQHandler+0x64>
					running = 0;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <USART3_IRQHandler+0x90>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
				else running = 1;
			break;
 8001bd6:	e00b      	b.n	8001bf0 <USART3_IRQHandler+0x7c>

		switch (znak){
		case 'x':   // vypinanie/zapinanie pohybu
			if (running)
					running = 0;
				else running = 1;
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <USART3_IRQHandler+0x90>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]
			break;
 8001bde:	e007      	b.n	8001bf0 <USART3_IRQHandler+0x7c>
		case 'c': //poziadavka na zmenu ciela, v dalsom byte sa precita, aky bude novy ciel
			change_goal_request = 1;
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <USART3_IRQHandler+0x88>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
			break;
 8001be6:	e003      	b.n	8001bf0 <USART3_IRQHandler+0x7c>
		default:
			change_goal_request = 0;
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <USART3_IRQHandler+0x88>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
		if (retazec[counter] != '\0'){
			PutcUART2(retazec[counter]);
			counter++;
		}*/
    }
}
 8001bee:	e7ff      	b.n	8001bf0 <USART3_IRQHandler+0x7c>
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40004800 	.word	0x40004800
 8001bfc:	20000048 	.word	0x20000048
 8001c00:	20000040 	.word	0x20000040
 8001c04:	20000044 	.word	0x20000044

08001c08 <sendValue>:

void sendValue(double prekazka){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	e9c7 0100 	strd	r0, r1, [r7]
	//PutcUART3('m');



	if (running)
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <sendValue+0x48>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <sendValue+0x26>
		PutcUART3((char)prekazka);
 8001c1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c1e:	f7fe ff01 	bl	8000a24 <__aeabi_d2uiz>
 8001c22:	4603      	mov	r3, r0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ff92 	bl	8001b50 <PutcUART3>
 8001c2c:	e002      	b.n	8001c34 <sendValue+0x2c>
	else
		PutcUART3(0xFF);
 8001c2e:	20ff      	movs	r0, #255	; 0xff
 8001c30:	f7ff ff8e 	bl	8001b50 <PutcUART3>

	//sleep
	for (int i = 0; i < 250000; i++);
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	e002      	b.n	8001c40 <sendValue+0x38>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <sendValue+0x4c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	ddf8      	ble.n	8001c3a <sendValue+0x32>
}
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000044 	.word	0x20000044
 8001c54:	0003d08f 	.word	0x0003d08f

08001c58 <init>:

#include <bug_0.h>
#include <sensor.h>


int init(){
 8001c58:	b598      	push	{r3, r4, r7, lr}
 8001c5a:	af00      	add	r7, sp, #0

	//inicializacia premennych
	obstacle_forward = 0;
 8001c5c:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <init+0x50>)
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	f04f 0400 	mov.w	r4, #0
 8001c66:	e882 0018 	stmia.w	r2, {r3, r4}
	obstacleRight = 0;
 8001c6a:	4a10      	ldr	r2, [pc, #64]	; (8001cac <init+0x54>)
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	f04f 0400 	mov.w	r4, #0
 8001c74:	e882 0018 	stmia.w	r2, {r3, r4}
	obstacleLeft = 0;
 8001c78:	4a0d      	ldr	r2, [pc, #52]	; (8001cb0 <init+0x58>)
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	f04f 0400 	mov.w	r4, #0
 8001c82:	e882 0018 	stmia.w	r2, {r3, r4}
	bearing = 0;
 8001c86:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <init+0x5c>)
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	f04f 0400 	mov.w	r4, #0
 8001c90:	e882 0018 	stmia.w	r2, {r3, r4}
	bearing_error = 0;
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <init+0x60>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]

	  initUSART3();
 8001c9a:	f7ff fef1 	bl	8001a80 <initUSART3>
	  //inicializacia motorov
	  Motor_init();
 8001c9e:	f000 f8e3 	bl	8001e68 <Motor_init>
	//inicializacia zvukacov, kompasu a motorov
	return 1;
 8001ca2:	2301      	movs	r3, #1
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	bd98      	pop	{r3, r4, r7, pc}
 8001ca8:	20000050 	.word	0x20000050
 8001cac:	20000058 	.word	0x20000058
 8001cb0:	20000068 	.word	0x20000068
 8001cb4:	20000070 	.word	0x20000070
 8001cb8:	20000060 	.word	0x20000060

08001cbc <run>:

void run(){
 8001cbc:	b598      	push	{r3, r4, r7, lr}
 8001cbe:	af00      	add	r7, sp, #0

	//bluetooth.start();
	if (running){
 8001cc0:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <run+0x5c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d01d      	beq.n	8001d04 <run+0x48>
		obstacle_forward = forwardSensorGetDistance();
 8001cc8:	f000 fc96 	bl	80025f8 <forwardSensorGetDistance>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	460c      	mov	r4, r1
 8001cd0:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <run+0x60>)
 8001cd2:	e882 0018 	stmia.w	r2, {r3, r4}
		sendValue(obstacle_forward);
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <run+0x60>)
 8001cd8:	cb18      	ldmia	r3, {r3, r4}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	4621      	mov	r1, r4
 8001cde:	f7ff ff93 	bl	8001c08 <sendValue>

		if (obstacle_forward > MIN_DISTANCE){
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <run+0x60>)
 8001ce4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <run+0x64>)
 8001cee:	f7fe fe8f 	bl	8000a10 <__aeabi_dcmpgt>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <run+0x42>
			go_forward();
 8001cf8:	f000 f81e 	bl	8001d38 <go_forward>
			go_forward();
		} else {
			turn(90);
		}
	}*/
}
 8001cfc:	e00a      	b.n	8001d14 <run+0x58>

		if (obstacle_forward > MIN_DISTANCE){
			go_forward();

		}
		else stop();
 8001cfe:	f000 f811 	bl	8001d24 <stop>
			go_forward();
		} else {
			turn(90);
		}
	}*/
}
 8001d02:	e007      	b.n	8001d14 <run+0x58>
		}
		else stop();
	}
	else{

		stop();
 8001d04:	f000 f80e 	bl	8001d24 <stop>
		sendValue(0);
 8001d08:	f04f 0000 	mov.w	r0, #0
 8001d0c:	f04f 0100 	mov.w	r1, #0
 8001d10:	f7ff ff7a 	bl	8001c08 <sendValue>
			go_forward();
		} else {
			turn(90);
		}
	}*/
}
 8001d14:	bf00      	nop
 8001d16:	bd98      	pop	{r3, r4, r7, pc}
 8001d18:	20000044 	.word	0x20000044
 8001d1c:	20000050 	.word	0x20000050
 8001d20:	403e0000 	.word	0x403e0000

08001d24 <stop>:

void stop(){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0

	left_motor_set_speed(0);
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f000 f8cb 	bl	8001ec4 <left_motor_set_speed>
	right_motor_set_speed(0);
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f000 f8a2 	bl	8001e78 <right_motor_set_speed>
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <go_forward>:

void go_forward(){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0

	left_motor_set_speed(10);
 8001d3c:	200a      	movs	r0, #10
 8001d3e:	f000 f8c1 	bl	8001ec4 <left_motor_set_speed>
	right_motor_set_speed(10);
 8001d42:	200a      	movs	r0, #10
 8001d44:	f000 f898 	bl	8001e78 <right_motor_set_speed>

}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <main>:
**
**===========================================================================
*/
int main(void)

{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
	init();
 8001d52:	f7ff ff81 	bl	8001c58 <init>
	init_indicator_LED();
 8001d56:	f000 f8d9 	bl	8001f0c <init_indicator_LED>
	sensorInit();
 8001d5a:	f000 f961 	bl	8002020 <sensorInit>

  /* TODO - Add your application code here */


  /* Infinite loop */
	volatile long i = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
  while (1)
  {

	  run();
 8001d62:	f7ff ffab 	bl	8001cbc <run>
	  i++;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	607b      	str	r3, [r7, #4]
	  if (i > 100000)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a03      	ldr	r2, [pc, #12]	; (8001d7c <main+0x30>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	ddf6      	ble.n	8001d62 <main+0x16>
	  {
		  i = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	607b      	str	r3, [r7, #4]
	  else stop();*/


	//sendValue();
	//PutcUART2(48);
  }
 8001d78:	e7f3      	b.n	8001d62 <main+0x16>
 8001d7a:	bf00      	nop
 8001d7c:	000186a0 	.word	0x000186a0

08001d80 <InitializeOutput>:
int volatile counter2=0;
//int volatile counter3=0;

TIM_OCInitTypeDef  TIM_OCInitStructure;
void InitializeOutput()
{GPIO_InitTypeDef GPIO_InitStructure;
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
	/* --------------------------- System Clocks Configuration ---------------------*/
		  /* TIM3 clock enable */
		  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001d86:	2101      	movs	r1, #1
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f7ff f907 	bl	8000f9c <RCC_APB1PeriphClockCmd>
		  /* GPIOA and GPIOB clock enable */
		  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8001d8e:	2101      	movs	r1, #1
 8001d90:	2002      	movs	r0, #2
 8001d92:	f7ff f8c7 	bl	8000f24 <RCC_AHBPeriphClockCmd>

		  /*--------------------------------- GPIO Configuration -------------------------*/

		  /* GPIOB Configuration: Pin 10 and 11 */
		  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10|GPIO_Pin_11;
 8001d96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d9a:	603b      	str	r3, [r7, #0]
		  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	713b      	strb	r3, [r7, #4]
		  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001da0:	2300      	movs	r3, #0
 8001da2:	71bb      	strb	r3, [r7, #6]
		  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	71fb      	strb	r3, [r7, #7]
		  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001da8:	2303      	movs	r3, #3
 8001daa:	717b      	strb	r3, [r7, #5]

		  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001dac:	463b      	mov	r3, r7
 8001dae:	4619      	mov	r1, r3
 8001db0:	4808      	ldr	r0, [pc, #32]	; (8001dd4 <InitializeOutput+0x54>)
 8001db2:	f7fe feb7 	bl	8000b24 <GPIO_Init>
		  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_TIM2);
 8001db6:	2201      	movs	r2, #1
 8001db8:	210a      	movs	r1, #10
 8001dba:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <InitializeOutput+0x54>)
 8001dbc:	f7fe ff90 	bl	8000ce0 <GPIO_PinAFConfig>
		  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	210b      	movs	r1, #11
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <InitializeOutput+0x54>)
 8001dc6:	f7fe ff8b 	bl	8000ce0 <GPIO_PinAFConfig>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40020400 	.word	0x40020400

08001dd8 <InitializeTimer>:

void InitializeTimer()
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;

	uint16_t pwmvalue = 150;
 8001dde:	2396      	movs	r3, #150	; 0x96
 8001de0:	83fb      	strh	r3, [r7, #30]
	uint16_t pwmvalueL = 150;
 8001de2:	2396      	movs	r3, #150	; 0x96
 8001de4:	83bb      	strh	r3, [r7, #28]
	uint16_t myperiod = 1000;
 8001de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dea:	837b      	strh	r3, [r7, #26]
	uint16_t PrescalerValue = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	833b      	strh	r3, [r7, #24]

	 PrescalerValue = (uint16_t)(16000000/100000) - 1;
 8001df0:	239f      	movs	r3, #159	; 0x9f
 8001df2:	833b      	strh	r3, [r7, #24]
		  /* Time base configuration */
		  TIM_TimeBaseStructure.TIM_Period = myperiod - 1;
 8001df4:	8b7b      	ldrh	r3, [r7, #26]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	613b      	str	r3, [r7, #16]
		  TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 8001dfa:	8b3b      	ldrh	r3, [r7, #24]
 8001dfc:	81bb      	strh	r3, [r7, #12]
		  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	82bb      	strh	r3, [r7, #20]
		  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001e02:	2300      	movs	r3, #0
 8001e04:	81fb      	strh	r3, [r7, #14]

		  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8001e06:	f107 030c 	add.w	r3, r7, #12
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e10:	f7ff f8e2 	bl	8000fd8 <TIM_TimeBaseInit>

		  /* PWM1 Mode configuration: Channel3 */
		  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8001e14:	2360      	movs	r3, #96	; 0x60
 8001e16:	803b      	strh	r3, [r7, #0]

		  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	807b      	strh	r3, [r7, #2]
		  TIM_OCInitStructure.TIM_Pulse = pwmvalue;
 8001e1c:	8bfb      	ldrh	r3, [r7, #30]
 8001e1e:	607b      	str	r3, [r7, #4]
		  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8001e20:	2300      	movs	r3, #0
 8001e22:	813b      	strh	r3, [r7, #8]


		  TIM_OC3Init(TIM2, &TIM_OCInitStructure);//pravy
 8001e24:	463b      	mov	r3, r7
 8001e26:	4619      	mov	r1, r3
 8001e28:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e2c:	f7ff f946 	bl	80010bc <TIM_OC3Init>

		  TIM_OCInitStructure.TIM_Pulse = pwmvalueL;//lavy
 8001e30:	8bbb      	ldrh	r3, [r7, #28]
 8001e32:	607b      	str	r3, [r7, #4]
		  TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8001e34:	463b      	mov	r3, r7
 8001e36:	4619      	mov	r1, r3
 8001e38:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e3c:	f7ff f980 	bl	8001140 <TIM_OC4Init>


		  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8001e40:	2108      	movs	r1, #8
 8001e42:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e46:	f7ff f9bf 	bl	80011c8 <TIM_OC3PreloadConfig>
		  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8001e4a:	2108      	movs	r1, #8
 8001e4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e50:	f7ff f9d6 	bl	8001200 <TIM_OC4PreloadConfig>



		  /* TIM3 enable counter */
		  TIM_Cmd(TIM2, ENABLE);
 8001e54:	2101      	movs	r1, #1
 8001e56:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e5a:	f7ff f90f 	bl	800107c <TIM_Cmd>

}
 8001e5e:	bf00      	nop
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop

08001e68 <Motor_init>:
void Motor_init()
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
	InitializeOutput();
 8001e6c:	f7ff ff88 	bl	8001d80 <InitializeOutput>
InitializeTimer();
 8001e70:	f7ff ffb2 	bl	8001dd8 <InitializeTimer>

}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <right_motor_set_speed>:

void right_motor_set_speed(int a){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8001e80:	2360      	movs	r3, #96	; 0x60
 8001e82:	81bb      	strh	r3, [r7, #12]

			  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001e84:	2301      	movs	r3, #1
 8001e86:	81fb      	strh	r3, [r7, #14]

			  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	82bb      	strh	r3, [r7, #20]

	if(a>20){a=20;}
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b14      	cmp	r3, #20
 8001e90:	dd01      	ble.n	8001e96 <right_motor_set_speed+0x1e>
 8001e92:	2314      	movs	r3, #20
 8001e94:	607b      	str	r3, [r7, #4]
	if(a<-20){a=-20;}
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f113 0f14 	cmn.w	r3, #20
 8001e9c:	da02      	bge.n	8001ea4 <right_motor_set_speed+0x2c>
 8001e9e:	f06f 0313 	mvn.w	r3, #19
 8001ea2:	607b      	str	r3, [r7, #4]

	  TIM_OCInitStructure.TIM_Pulse = 150-a;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8001eaa:	613b      	str	r3, [r7, #16]
	  TIM_OC3Init(TIM2, &TIM_OCInitStructure);//pravy pwm update
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001eb6:	f7ff f901 	bl	80010bc <TIM_OC3Init>
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop

08001ec4 <left_motor_set_speed>:

void left_motor_set_speed(int a){
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8001ecc:	2360      	movs	r3, #96	; 0x60
 8001ece:	81bb      	strh	r3, [r7, #12]

			  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	81fb      	strh	r3, [r7, #14]

			  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	82bb      	strh	r3, [r7, #20]
	if(a>20){a=20;}
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b14      	cmp	r3, #20
 8001edc:	dd01      	ble.n	8001ee2 <left_motor_set_speed+0x1e>
 8001ede:	2314      	movs	r3, #20
 8001ee0:	607b      	str	r3, [r7, #4]
	if(a<-20){a=-20;}
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f113 0f14 	cmn.w	r3, #20
 8001ee8:	da02      	bge.n	8001ef0 <left_motor_set_speed+0x2c>
 8001eea:	f06f 0313 	mvn.w	r3, #19
 8001eee:	607b      	str	r3, [r7, #4]
	 TIM_OCInitStructure.TIM_Pulse = 150+a;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3396      	adds	r3, #150	; 0x96
 8001ef4:	613b      	str	r3, [r7, #16]
	 TIM_OC4Init(TIM2, &TIM_OCInitStructure);//lavy pwm update
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	4619      	mov	r1, r3
 8001efc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f00:	f7ff f91e 	bl	8001140 <TIM_OC4Init>
}
 8001f04:	bf00      	nop
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <init_indicator_LED>:

/* Private functions */

//inicializacia indikacnej LED chodu procesora
void init_indicator_LED()
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
	init_indicator_LED_pin();
 8001f10:	f000 f806 	bl	8001f20 <init_indicator_LED_pin>
	init_indicator_LED_trigtim();
 8001f14:	f000 f81e 	bl	8001f54 <init_indicator_LED_trigtim>
	init_indicator_LED_trigtim_interrupt();
 8001f18:	f000 f84c 	bl	8001fb4 <init_indicator_LED_trigtim_interrupt>
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <init_indicator_LED_pin>:

//inicializacia portu a pinu LED
void init_indicator_LED_pin()
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001f26:	2101      	movs	r1, #1
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f7fe fffb 	bl	8000f24 <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef gpioInitStruc;
	gpioInitStruc.GPIO_Mode = GPIO_Mode_OUT;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	713b      	strb	r3, [r7, #4]
	gpioInitStruc.GPIO_OType = GPIO_OType_PP;
 8001f32:	2300      	movs	r3, #0
 8001f34:	71bb      	strb	r3, [r7, #6]
	gpioInitStruc.GPIO_Pin = GPIO_Pin_5;
 8001f36:	2320      	movs	r3, #32
 8001f38:	603b      	str	r3, [r7, #0]
	gpioInitStruc.GPIO_Speed = GPIO_Speed_400KHz;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOA, &gpioInitStruc);
 8001f3e:	463b      	mov	r3, r7
 8001f40:	4619      	mov	r1, r3
 8001f42:	4803      	ldr	r0, [pc, #12]	; (8001f50 <init_indicator_LED_pin+0x30>)
 8001f44:	f7fe fdee 	bl	8000b24 <GPIO_Init>
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40020000 	.word	0x40020000

08001f54 <init_indicator_LED_trigtim>:

//inicializacia casovaca pre spustanie led LED
void init_indicator_LED_trigtim()
{
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
	indicatorTimeStamp = 0;
 8001f5a:	4a14      	ldr	r2, [pc, #80]	; (8001fac <init_indicator_LED_trigtim+0x58>)
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	f04f 0400 	mov.w	r4, #0
 8001f64:	e882 0018 	stmia.w	r2, {r3, r4}
	unsigned short prescalerValue = (unsigned short) TIM_CLC_PRESCALER;
 8001f68:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8001f6c:	81fb      	strh	r3, [r7, #14]

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 8001f6e:	2101      	movs	r1, #1
 8001f70:	2010      	movs	r0, #16
 8001f72:	f7ff f813 	bl	8000f9c <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Period = TIM_PERIOD;
 8001f76:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001f7a:	607b      	str	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CLC_DIV;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001f80:	2300      	movs	r3, #0
 8001f82:	807b      	strh	r3, [r7, #2]
	TIM_TimeBaseStructure.TIM_Prescaler = prescalerValue;
 8001f84:	89fb      	ldrh	r3, [r7, #14]
 8001f86:	803b      	strh	r3, [r7, #0]
	TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
 8001f88:	463b      	mov	r3, r7
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4808      	ldr	r0, [pc, #32]	; (8001fb0 <init_indicator_LED_trigtim+0x5c>)
 8001f8e:	f7ff f823 	bl	8000fd8 <TIM_TimeBaseInit>
	TIM_ITConfig(TIM6, TIM_IT_Update, ENABLE);
 8001f92:	2201      	movs	r2, #1
 8001f94:	2101      	movs	r1, #1
 8001f96:	4806      	ldr	r0, [pc, #24]	; (8001fb0 <init_indicator_LED_trigtim+0x5c>)
 8001f98:	f7ff fa3c 	bl	8001414 <TIM_ITConfig>
	TIM_Cmd(TIM6, ENABLE);
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	4804      	ldr	r0, [pc, #16]	; (8001fb0 <init_indicator_LED_trigtim+0x5c>)
 8001fa0:	f7ff f86c 	bl	800107c <TIM_Cmd>
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd90      	pop	{r4, r7, pc}
 8001fac:	20000078 	.word	0x20000078
 8001fb0:	40001000 	.word	0x40001000

08001fb4 <init_indicator_LED_trigtim_interrupt>:

//inicializacia prerusenia casovaca
void init_indicator_LED_trigtim_interrupt()
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_InitStructure.NVIC_IRQChannel = TIM6_IRQn;
 8001fba:	232b      	movs	r3, #43	; 0x2b
 8001fbc:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = TIM_INTERRUPT_PREEMP;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = TIM_INTERRUPT_SUB;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fd49 	bl	8000a64 <NVIC_Init>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop

08001fdc <TIM6_IRQHandler>:

//spracovanie prerusenia z TIM6, casovaca pre kontrolku
void TIM6_IRQHandler(void)
{
 8001fdc:	b598      	push	{r3, r4, r7, lr}
 8001fde:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) == SET)
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	480c      	ldr	r0, [pc, #48]	; (8002014 <TIM6_IRQHandler+0x38>)
 8001fe4:	f7ff fa3a 	bl	800145c <TIM_GetITStatus>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d10f      	bne.n	800200e <TIM6_IRQHandler+0x32>
	{
		indicatorTimeStamp++;
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <TIM6_IRQHandler+0x3c>)
 8001ff0:	cb18      	ldmia	r3, {r3, r4}
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	f144 0400 	adc.w	r4, r4, #0
 8001ff8:	4a07      	ldr	r2, [pc, #28]	; (8002018 <TIM6_IRQHandler+0x3c>)
 8001ffa:	e882 0018 	stmia.w	r2, {r3, r4}
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);//toggle LED PA5
 8001ffe:	2120      	movs	r1, #32
 8002000:	4806      	ldr	r0, [pc, #24]	; (800201c <TIM6_IRQHandler+0x40>)
 8002002:	f7fe fe59 	bl	8000cb8 <GPIO_ToggleBits>
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 8002006:	2101      	movs	r1, #1
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <TIM6_IRQHandler+0x38>)
 800200a:	f7ff fa51 	bl	80014b0 <TIM_ClearITPendingBit>
	}
}
 800200e:	bf00      	nop
 8002010:	bd98      	pop	{r3, r4, r7, pc}
 8002012:	bf00      	nop
 8002014:	40001000 	.word	0x40001000
 8002018:	20000078 	.word	0x20000078
 800201c:	40020000 	.word	0x40020000

08002020 <sensorInit>:
#define SENSOR_CALL_TIM_SUBPRIORITY 3

//Functions
//inicializacia senzorov vzdialenosti
void sensorInit(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	initSensorCaptureStruc();
 8002024:	f000 f80c 	bl	8002040 <initSensorCaptureStruc>
	sensorInitTriggerTimer();
 8002028:	f000 f87a 	bl	8002120 <sensorInitTriggerTimer>
	sensorInitTriggerPin();
 800202c:	f000 f8b0 	bl	8002190 <sensorInitTriggerPin>
	sensorInitCapturePins();
 8002030:	f000 f93c 	bl	80022ac <sensorInitCapturePins>
	sensorInitCaptureTimer();
 8002034:	f000 f8d8 	bl	80021e8 <sensorInitCaptureTimer>
	sensorInitCallTimer();
 8002038:	f000 f832 	bl	80020a0 <sensorInitCallTimer>
}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}

08002040 <initSensorCaptureStruc>:
//inicializacia struktur merania vzdialenosti
void initSensorCaptureStruc(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
	LeftSensorCaptureStruc.captureStep = 0;
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <initSensorCaptureStruc+0x54>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
	LeftSensorCaptureStruc.risingTimeCapturing = 0;
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <initSensorCaptureStruc+0x54>)
 800204c:	2200      	movs	r2, #0
 800204e:	605a      	str	r2, [r3, #4]
	LeftSensorCaptureStruc.risingTime = 0;
 8002050:	4b10      	ldr	r3, [pc, #64]	; (8002094 <initSensorCaptureStruc+0x54>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
	LeftSensorCaptureStruc.fallingTime = 0;
 8002056:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <initSensorCaptureStruc+0x54>)
 8002058:	2200      	movs	r2, #0
 800205a:	60da      	str	r2, [r3, #12]

	RightSensorCaptureStruc.captureStep = 0;
 800205c:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <initSensorCaptureStruc+0x58>)
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
	RightSensorCaptureStruc.risingTimeCapturing = 0;
 8002062:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <initSensorCaptureStruc+0x58>)
 8002064:	2200      	movs	r2, #0
 8002066:	605a      	str	r2, [r3, #4]
	RightSensorCaptureStruc.risingTime = 0;
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <initSensorCaptureStruc+0x58>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
	RightSensorCaptureStruc.fallingTime = 0;
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <initSensorCaptureStruc+0x58>)
 8002070:	2200      	movs	r2, #0
 8002072:	60da      	str	r2, [r3, #12]

	ForwardSensorCaptureStruc.captureStep = 0;
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <initSensorCaptureStruc+0x5c>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
	ForwardSensorCaptureStruc.risingTimeCapturing = 0;
 800207a:	4b08      	ldr	r3, [pc, #32]	; (800209c <initSensorCaptureStruc+0x5c>)
 800207c:	2200      	movs	r2, #0
 800207e:	605a      	str	r2, [r3, #4]
	ForwardSensorCaptureStruc.risingTime = 0;
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <initSensorCaptureStruc+0x5c>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
	ForwardSensorCaptureStruc.fallingTime = 0;
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <initSensorCaptureStruc+0x5c>)
 8002088:	2200      	movs	r2, #0
 800208a:	60da      	str	r2, [r3, #12]

}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr
 8002094:	20000090 	.word	0x20000090
 8002098:	20000080 	.word	0x20000080
 800209c:	200000a0 	.word	0x200000a0

080020a0 <sensorInitCallTimer>:
//inicializacia casovaca pravidelne volajuceho meranie vzdialenosti
void sensorInitCallTimer(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
	selectSensor = 0;
 80020a6:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <sensorInitCallTimer+0x50>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
	//Structure for timer settings
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

	//  clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM10, ENABLE);
 80020ac:	2101      	movs	r1, #1
 80020ae:	2008      	movs	r0, #8
 80020b0:	f7fe ff56 	bl	8000f60 <RCC_APB2PeriphClockCmd>

	//CALL_TIM init prerusenie
	sensorInitCallTimerInterrupt();
 80020b4:	f000 f820 	bl	80020f8 <sensorInitCallTimerInterrupt>

	TIM_TimeBaseStructure.TIM_Period = SENSOR_CALL_TIM_PERIOD;
 80020b8:	2341      	movs	r3, #65	; 0x41
 80020ba:	60bb      	str	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_ClockDivision = SENSOR_CALL_TIM_CLOCKDIVISION;
 80020bc:	2300      	movs	r3, #0
 80020be:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80020c0:	2300      	movs	r3, #0
 80020c2:	80fb      	strh	r3, [r7, #6]
	TIM_TimeBaseStructure.TIM_Prescaler = SENSOR_CALL_TIM_PRESCALE;
 80020c4:	f643 637f 	movw	r3, #15999	; 0x3e7f
 80020c8:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseInit(SENSOR_CALL_TIM, &TIM_TimeBaseStructure);
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	4619      	mov	r1, r3
 80020ce:	4809      	ldr	r0, [pc, #36]	; (80020f4 <sensorInitCallTimer+0x54>)
 80020d0:	f7fe ff82 	bl	8000fd8 <TIM_TimeBaseInit>
	// TIM Interrupts enable
	TIM_ITConfig(SENSOR_CALL_TIM, TIM_IT_Update, ENABLE);
 80020d4:	2201      	movs	r2, #1
 80020d6:	2101      	movs	r1, #1
 80020d8:	4806      	ldr	r0, [pc, #24]	; (80020f4 <sensorInitCallTimer+0x54>)
 80020da:	f7ff f99b 	bl	8001414 <TIM_ITConfig>
	// enable counter
	TIM_Cmd(SENSOR_CALL_TIM, ENABLE);
 80020de:	2101      	movs	r1, #1
 80020e0:	4804      	ldr	r0, [pc, #16]	; (80020f4 <sensorInitCallTimer+0x54>)
 80020e2:	f7fe ffcb 	bl	800107c <TIM_Cmd>
}
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2000003c 	.word	0x2000003c
 80020f4:	40010c00 	.word	0x40010c00

080020f8 <sensorInitCallTimerInterrupt>:
//inicializacia preruseni casovaca volajuceho meranie dialkomermy
void sensorInitCallTimerInterrupt(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_InitStructure.NVIC_IRQChannel = TIM10_IRQn;
 80020fe:	231a      	movs	r3, #26
 8002100:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = SENSOR_CALL_TIM_PREEMPTPRIORITY;
 8002102:	2303      	movs	r3, #3
 8002104:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = SENSOR_CALL_TIM_SUBPRIORITY;
 8002106:	2303      	movs	r3, #3
 8002108:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800210a:	2301      	movs	r3, #1
 800210c:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe fca7 	bl	8000a64 <NVIC_Init>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop

08002120 <sensorInitTriggerTimer>:

//inicializacia casovaca, ktory generuje spustaci impulz
void sensorInitTriggerTimer(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
	//vypocet delicky pre periodu 10us
	unsigned short prescalerValue = (unsigned short) (STM_SYSTEM_CLOCK / TRIG_TIM_FREQ) - 1;
 8002126:	239f      	movs	r3, #159	; 0x9f
 8002128:	81fb      	strh	r3, [r7, #14]

	//struktura pre zakladny casovac TRIG_TIM
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

	//spustenie hodinovych impulzov pre TRIG_TIM
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 800212a:	2101      	movs	r1, #1
 800212c:	2020      	movs	r0, #32
 800212e:	f7fe ff35 	bl	8000f9c <RCC_APB1PeriphClockCmd>

	//TRIG_TIM init prerusenie
	sensorInitTriggerTimerInterrup();
 8002132:	f000 f819 	bl	8002168 <sensorInitTriggerTimerInterrup>

	//init struktura TRIG_TIM
	TIM_TimeBaseStructure.TIM_Period = 1;
 8002136:	2301      	movs	r3, #1
 8002138:	607b      	str	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800213e:	2300      	movs	r3, #0
 8002140:	807b      	strh	r3, [r7, #2]
	TIM_TimeBaseStructure.TIM_Prescaler = prescalerValue;
 8002142:	89fb      	ldrh	r3, [r7, #14]
 8002144:	803b      	strh	r3, [r7, #0]
	TIM_TimeBaseInit(TRIG_TIM, &TIM_TimeBaseStructure);//zapisanie struktury
 8002146:	463b      	mov	r3, r7
 8002148:	4619      	mov	r1, r3
 800214a:	4806      	ldr	r0, [pc, #24]	; (8002164 <sensorInitTriggerTimer+0x44>)
 800214c:	f7fe ff44 	bl	8000fd8 <TIM_TimeBaseInit>

	//povolenie preruseni TRIG_TIM
	TIM_ITConfig(TRIG_TIM, TIM_IT_Update, ENABLE);
 8002150:	2201      	movs	r2, #1
 8002152:	2101      	movs	r1, #1
 8002154:	4803      	ldr	r0, [pc, #12]	; (8002164 <sensorInitTriggerTimer+0x44>)
 8002156:	f7ff f95d 	bl	8001414 <TIM_ITConfig>
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40001400 	.word	0x40001400

08002168 <sensorInitTriggerTimerInterrup>:
//inicializacia preruseni casovaca, ktory generuje spustaci impulz
void sensorInitTriggerTimerInterrup(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
	//TRIG_TIM struct prerusenie
	NVIC_InitTypeDef NVIC_InitStructure;

	//init struktura prerusenie
	NVIC_InitStructure.NVIC_IRQChannel = TIM7_IRQn;
 800216e:	232c      	movs	r3, #44	; 0x2c
 8002170:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8002176:	2301      	movs	r3, #1
 8002178:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800217a:	2301      	movs	r3, #1
 800217c:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);//zapisanie struktury
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe fc6f 	bl	8000a64 <NVIC_Init>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop

08002190 <sensorInitTriggerPin>:
//inicializacia pinov pre spustanie dialkomerov
void sensorInitTriggerPin(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
	//spusti hodiny pre port A
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002196:	2101      	movs	r1, #1
 8002198:	2001      	movs	r0, #1
 800219a:	f7fe fec3 	bl	8000f24 <RCC_AHBPeriphClockCmd>

	//vytvorenie struktury GPIO
	GPIO_InitTypeDef gpioInitStruc;
	gpioInitStruc.GPIO_Mode = GPIO_Mode_OUT;
 800219e:	2301      	movs	r3, #1
 80021a0:	713b      	strb	r3, [r7, #4]
	gpioInitStruc.GPIO_OType = GPIO_OType_PP;
 80021a2:	2300      	movs	r3, #0
 80021a4:	71bb      	strb	r3, [r7, #6]
	gpioInitStruc.GPIO_Speed = GPIO_Speed_400KHz;
 80021a6:	2300      	movs	r3, #0
 80021a8:	717b      	strb	r3, [r7, #5]

	//zapisanie inicializacnej struktury - left
	gpioInitStruc.GPIO_Pin = LEFT_TRIG_PIN;
 80021aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ae:	603b      	str	r3, [r7, #0]
	GPIO_Init(TRIG_PORT, &gpioInitStruc);//errror - remote failure E31
 80021b0:	463b      	mov	r3, r7
 80021b2:	4619      	mov	r1, r3
 80021b4:	480b      	ldr	r0, [pc, #44]	; (80021e4 <sensorInitTriggerPin+0x54>)
 80021b6:	f7fe fcb5 	bl	8000b24 <GPIO_Init>

	//zapisanie inicializacnej struktury - right
	gpioInitStruc.GPIO_Pin = RIGHT_TRIG_PIN;
 80021ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021be:	603b      	str	r3, [r7, #0]
	GPIO_Init(TRIG_PORT, &gpioInitStruc);
 80021c0:	463b      	mov	r3, r7
 80021c2:	4619      	mov	r1, r3
 80021c4:	4807      	ldr	r0, [pc, #28]	; (80021e4 <sensorInitTriggerPin+0x54>)
 80021c6:	f7fe fcad 	bl	8000b24 <GPIO_Init>

	//zapisanie inicializacnej struktury - forward
	gpioInitStruc.GPIO_Pin = FORWARD_TRIG_PIN;
 80021ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021ce:	603b      	str	r3, [r7, #0]
	GPIO_Init(TRIG_PORT, &gpioInitStruc);
 80021d0:	463b      	mov	r3, r7
 80021d2:	4619      	mov	r1, r3
 80021d4:	4803      	ldr	r0, [pc, #12]	; (80021e4 <sensorInitTriggerPin+0x54>)
 80021d6:	f7fe fca5 	bl	8000b24 <GPIO_Init>

}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40020000 	.word	0x40020000

080021e8 <sensorInitCaptureTimer>:
//inicializacia casovaca pre meranie dlzky impulzu z dialkomera
void sensorInitCaptureTimer(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	//CAPTURE_TIM struct capture
	TIM_ICInitTypeDef  TIM_ICInitStructure;

	//povolenie hodin pre CAPTURE_TIM
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80021ee:	2101      	movs	r1, #1
 80021f0:	2002      	movs	r0, #2
 80021f2:	f7fe fed3 	bl	8000f9c <RCC_APB1PeriphClockCmd>

	//init CAPTURE_TIM struct capture
	TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_BothEdge;
 80021f6:	230a      	movs	r3, #10
 80021f8:	807b      	strh	r3, [r7, #2]
	TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
 80021fa:	2301      	movs	r3, #1
 80021fc:	80bb      	strh	r3, [r7, #4]
	TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 80021fe:	2300      	movs	r3, #0
 8002200:	80fb      	strh	r3, [r7, #6]
	TIM_ICInitStructure.TIM_ICFilter = 0x0;
 8002202:	2300      	movs	r3, #0
 8002204:	813b      	strh	r3, [r7, #8]

	//CAPTURE_TIM nastavenie kanalov
	TIM_ICInitStructure.TIM_Channel = LEFT_TIM_CHANNEL;//left
 8002206:	2308      	movs	r3, #8
 8002208:	803b      	strh	r3, [r7, #0]
	TIM_ICInit(CAPTURE_TIM, &TIM_ICInitStructure);
 800220a:	463b      	mov	r3, r7
 800220c:	4619      	mov	r1, r3
 800220e:	481c      	ldr	r0, [pc, #112]	; (8002280 <sensorInitCaptureTimer+0x98>)
 8002210:	f7ff f814 	bl	800123c <TIM_ICInit>
	TIM_ICInitStructure.TIM_Channel = RIGHT_TIM_CHANNEL;//right
 8002214:	2300      	movs	r3, #0
 8002216:	803b      	strh	r3, [r7, #0]
	TIM_ICInit(CAPTURE_TIM, &TIM_ICInitStructure);
 8002218:	463b      	mov	r3, r7
 800221a:	4619      	mov	r1, r3
 800221c:	4818      	ldr	r0, [pc, #96]	; (8002280 <sensorInitCaptureTimer+0x98>)
 800221e:	f7ff f80d 	bl	800123c <TIM_ICInit>
	TIM_ICInitStructure.TIM_Channel = FORWARD_TIM_CHANNEL;//forward
 8002222:	230c      	movs	r3, #12
 8002224:	803b      	strh	r3, [r7, #0]
	TIM_ICInit(CAPTURE_TIM, &TIM_ICInitStructure);
 8002226:	463b      	mov	r3, r7
 8002228:	4619      	mov	r1, r3
 800222a:	4815      	ldr	r0, [pc, #84]	; (8002280 <sensorInitCaptureTimer+0x98>)
 800222c:	f7ff f806 	bl	800123c <TIM_ICInit>

	//nastavenie pocitadla kvoli delicke hodinovych impuzov
	TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 8002230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002234:	613b      	str	r3, [r7, #16]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800223a:	2300      	movs	r3, #0
 800223c:	81fb      	strh	r3, [r7, #14]
	TIM_TimeBaseStructure.TIM_Prescaler = CAPTURE_CLC_PRESCALER;
 800223e:	239f      	movs	r3, #159	; 0x9f
 8002240:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(CAPTURE_TIM, &TIM_TimeBaseStructure);
 8002242:	f107 030c 	add.w	r3, r7, #12
 8002246:	4619      	mov	r1, r3
 8002248:	480d      	ldr	r0, [pc, #52]	; (8002280 <sensorInitCaptureTimer+0x98>)
 800224a:	f7fe fec5 	bl	8000fd8 <TIM_TimeBaseInit>

	//CAPTURE_TIM povolenie pocitadla
	TIM_Cmd(CAPTURE_TIM, ENABLE);
 800224e:	2101      	movs	r1, #1
 8002250:	480b      	ldr	r0, [pc, #44]	; (8002280 <sensorInitCaptureTimer+0x98>)
 8002252:	f7fe ff13 	bl	800107c <TIM_Cmd>

	//povolenie CC poziadavky na prerusenie
	TIM_ITConfig(CAPTURE_TIM, LEFT_TIM_CC, ENABLE);//left
 8002256:	2201      	movs	r2, #1
 8002258:	2108      	movs	r1, #8
 800225a:	4809      	ldr	r0, [pc, #36]	; (8002280 <sensorInitCaptureTimer+0x98>)
 800225c:	f7ff f8da 	bl	8001414 <TIM_ITConfig>
	TIM_ITConfig(CAPTURE_TIM, RIGHT_TIM_CC, ENABLE);//right
 8002260:	2201      	movs	r2, #1
 8002262:	2102      	movs	r1, #2
 8002264:	4806      	ldr	r0, [pc, #24]	; (8002280 <sensorInitCaptureTimer+0x98>)
 8002266:	f7ff f8d5 	bl	8001414 <TIM_ITConfig>
	TIM_ITConfig(CAPTURE_TIM, FORWARD_TIM_CC, ENABLE);//forward
 800226a:	2201      	movs	r2, #1
 800226c:	2110      	movs	r1, #16
 800226e:	4804      	ldr	r0, [pc, #16]	; (8002280 <sensorInitCaptureTimer+0x98>)
 8002270:	f7ff f8d0 	bl	8001414 <TIM_ITConfig>

	//CAPTURE_TIM prerusenie init
	sensorInitCaptureTimerInterrup();
 8002274:	f000 f806 	bl	8002284 <sensorInitCaptureTimerInterrup>
}
 8002278:	bf00      	nop
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40000400 	.word	0x40000400

08002284 <sensorInitCaptureTimerInterrup>:

//inicializacia preruseni casovaca pre meranie dlzky impulzu z dialkomera
void sensorInitCaptureTimerInterrup(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
	//CAPTURE_TIM struct prerusenie
	NVIC_InitTypeDef NVIC_InitStructure;

	//init TIM struct prerusenie
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 800228a:	231d      	movs	r3, #29
 800228c:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 8002292:	2302      	movs	r3, #2
 8002294:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002296:	2301      	movs	r3, #1
 8002298:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe fbe1 	bl	8000a64 <NVIC_Init>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop

080022ac <sensorInitCapturePins>:
//inicializacia pinu pre meranie dlzky impulzu z dialkomera
void sensorInitCapturePins(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
	//GPIO struct
	GPIO_InitTypeDef GPIO_InitStructure;

	//GPIOB povolenie hodin
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80022b2:	2101      	movs	r1, #1
 80022b4:	2002      	movs	r0, #2
 80022b6:	f7fe fe35 	bl	8000f24 <RCC_AHBPeriphClockCmd>

	//CAPTURE_TIM struct init
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 80022ba:	2302      	movs	r3, #2
 80022bc:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 80022be:	2303      	movs	r3, #3
 80022c0:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80022c2:	2300      	movs	r3, #0
 80022c4:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 80022c6:	2301      	movs	r3, #1
 80022c8:	71fb      	strb	r3, [r7, #7]

	//inicializacia pinu left
	GPIO_InitStructure.GPIO_Pin   = LEFT_CAP_PIN;
 80022ca:	2301      	movs	r3, #1
 80022cc:	603b      	str	r3, [r7, #0]
	GPIO_Init(CAPTURE_PORT, &GPIO_InitStructure);//zapisanie struktury
 80022ce:	463b      	mov	r3, r7
 80022d0:	4619      	mov	r1, r3
 80022d2:	4812      	ldr	r0, [pc, #72]	; (800231c <sensorInitCapturePins+0x70>)
 80022d4:	f7fe fc26 	bl	8000b24 <GPIO_Init>
	GPIO_PinAFConfig(CAPTURE_PORT, LEFT_CAP_PINSOURCE, GPIO_AF_TIM3);
 80022d8:	2202      	movs	r2, #2
 80022da:	2100      	movs	r1, #0
 80022dc:	480f      	ldr	r0, [pc, #60]	; (800231c <sensorInitCapturePins+0x70>)
 80022de:	f7fe fcff 	bl	8000ce0 <GPIO_PinAFConfig>
	//inicializacia pinu right
	GPIO_InitStructure.GPIO_Pin   = RIGHT_CAP_PIN;
 80022e2:	2310      	movs	r3, #16
 80022e4:	603b      	str	r3, [r7, #0]
	GPIO_Init(CAPTURE_PORT, &GPIO_InitStructure);//zapisanie struktury
 80022e6:	463b      	mov	r3, r7
 80022e8:	4619      	mov	r1, r3
 80022ea:	480c      	ldr	r0, [pc, #48]	; (800231c <sensorInitCapturePins+0x70>)
 80022ec:	f7fe fc1a 	bl	8000b24 <GPIO_Init>
	GPIO_PinAFConfig(CAPTURE_PORT, RIGHT_CAP_PINSOURCE, GPIO_AF_TIM3);
 80022f0:	2202      	movs	r2, #2
 80022f2:	2104      	movs	r1, #4
 80022f4:	4809      	ldr	r0, [pc, #36]	; (800231c <sensorInitCapturePins+0x70>)
 80022f6:	f7fe fcf3 	bl	8000ce0 <GPIO_PinAFConfig>
	//inicializacia pinu forward
	GPIO_InitStructure.GPIO_Pin   = FORWARD_CAP_PIN;
 80022fa:	2302      	movs	r3, #2
 80022fc:	603b      	str	r3, [r7, #0]
	GPIO_Init(CAPTURE_PORT, &GPIO_InitStructure);//zapisanie struktury
 80022fe:	463b      	mov	r3, r7
 8002300:	4619      	mov	r1, r3
 8002302:	4806      	ldr	r0, [pc, #24]	; (800231c <sensorInitCapturePins+0x70>)
 8002304:	f7fe fc0e 	bl	8000b24 <GPIO_Init>
	GPIO_PinAFConfig(CAPTURE_PORT, FORWARD_CAP_PINSOURCE, GPIO_AF_TIM3);
 8002308:	2202      	movs	r2, #2
 800230a:	2101      	movs	r1, #1
 800230c:	4803      	ldr	r0, [pc, #12]	; (800231c <sensorInitCapturePins+0x70>)
 800230e:	f7fe fce7 	bl	8000ce0 <GPIO_PinAFConfig>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40020400 	.word	0x40020400

08002320 <leftSensorMeasure>:

//spustenie merania laveho dialkomeru
void leftSensorMeasure(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 8002324:	2101      	movs	r1, #1
 8002326:	4808      	ldr	r0, [pc, #32]	; (8002348 <leftSensorMeasure+0x28>)
 8002328:	f7fe fea8 	bl	800107c <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, LEFT_TRIG_PIN, Bit_SET);
 800232c:	2201      	movs	r2, #1
 800232e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002332:	4806      	ldr	r0, [pc, #24]	; (800234c <leftSensorMeasure+0x2c>)
 8002334:	f7fe fca8 	bl	8000c88 <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	LeftSensorCaptureStruc.captureStep = 0;
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <leftSensorMeasure+0x30>)
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = leftSensorCaptureHandler;
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <leftSensorMeasure+0x34>)
 8002340:	4a05      	ldr	r2, [pc, #20]	; (8002358 <leftSensorMeasure+0x38>)
 8002342:	601a      	str	r2, [r3, #0]
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40001400 	.word	0x40001400
 800234c:	40020000 	.word	0x40020000
 8002350:	20000090 	.word	0x20000090
 8002354:	200000b0 	.word	0x200000b0
 8002358:	080024d9 	.word	0x080024d9

0800235c <rightSensorMeasure>:
//spustenie merania praveho dialkomeru
void rightSensorMeasure(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 8002360:	2101      	movs	r1, #1
 8002362:	4808      	ldr	r0, [pc, #32]	; (8002384 <rightSensorMeasure+0x28>)
 8002364:	f7fe fe8a 	bl	800107c <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, RIGHT_TRIG_PIN, Bit_SET);
 8002368:	2201      	movs	r2, #1
 800236a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800236e:	4806      	ldr	r0, [pc, #24]	; (8002388 <rightSensorMeasure+0x2c>)
 8002370:	f7fe fc8a 	bl	8000c88 <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	RightSensorCaptureStruc.captureStep = 0;
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <rightSensorMeasure+0x30>)
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = rightSensorCaptureHandler;
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <rightSensorMeasure+0x34>)
 800237c:	4a05      	ldr	r2, [pc, #20]	; (8002394 <rightSensorMeasure+0x38>)
 800237e:	601a      	str	r2, [r3, #0]
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40001400 	.word	0x40001400
 8002388:	40020000 	.word	0x40020000
 800238c:	20000080 	.word	0x20000080
 8002390:	200000b0 	.word	0x200000b0
 8002394:	08002539 	.word	0x08002539

08002398 <forwardSensorMeasure>:
//spustenie memrania predneho dialkomeru
void forwardSensorMeasure(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 800239c:	2101      	movs	r1, #1
 800239e:	4808      	ldr	r0, [pc, #32]	; (80023c0 <forwardSensorMeasure+0x28>)
 80023a0:	f7fe fe6c 	bl	800107c <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, FORWARD_TRIG_PIN, Bit_SET);
 80023a4:	2201      	movs	r2, #1
 80023a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023aa:	4806      	ldr	r0, [pc, #24]	; (80023c4 <forwardSensorMeasure+0x2c>)
 80023ac:	f7fe fc6c 	bl	8000c88 <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	ForwardSensorCaptureStruc.captureStep = 0;
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <forwardSensorMeasure+0x30>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = forwardSensorCaptureHandler;
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <forwardSensorMeasure+0x34>)
 80023b8:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <forwardSensorMeasure+0x38>)
 80023ba:	601a      	str	r2, [r3, #0]
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40001400 	.word	0x40001400
 80023c4:	40020000 	.word	0x40020000
 80023c8:	200000a0 	.word	0x200000a0
 80023cc:	200000b0 	.word	0x200000b0
 80023d0:	08002599 	.word	0x08002599

080023d4 <TIM7_IRQHandler>:

//handlery bude treba dat do suboru, ktory bude urcovat veci specificke pre dany hardver
//samotne funkcie ktore ma vykonat ale ostanu tu
//spracovanie prerusenia z TRIG_TIM, casovac pre spustaci impulz dialkomeru
void TIM7_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
	//tez do samostatnej funkcie alebo mozno bude stacit #define fjdkkdf nazov funkcie
	if (TIM_GetITStatus(TRIG_TIM, TIM_IT_Update) == SET)
 80023d8:	2101      	movs	r1, #1
 80023da:	481e      	ldr	r0, [pc, #120]	; (8002454 <TIM7_IRQHandler+0x80>)
 80023dc:	f7ff f83e 	bl	800145c <TIM_GetITStatus>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d133      	bne.n	800244e <TIM7_IRQHandler+0x7a>
	{
		TIM_Cmd(TRIG_TIM, DISABLE);
 80023e6:	2100      	movs	r1, #0
 80023e8:	481a      	ldr	r0, [pc, #104]	; (8002454 <TIM7_IRQHandler+0x80>)
 80023ea:	f7fe fe47 	bl	800107c <TIM_Cmd>
		//vypnutie impulzu na prislusnom spustacom pine
		if (GPIO_ReadOutputDataBit(TRIG_PORT, LEFT_TRIG_PIN) == 1)
 80023ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023f2:	4819      	ldr	r0, [pc, #100]	; (8002458 <TIM7_IRQHandler+0x84>)
 80023f4:	f7fe fc2c 	bl	8000c50 <GPIO_ReadOutputDataBit>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d106      	bne.n	800240c <TIM7_IRQHandler+0x38>
		{
			GPIO_WriteBit(TRIG_PORT, LEFT_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu left
 80023fe:	2200      	movs	r2, #0
 8002400:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002404:	4814      	ldr	r0, [pc, #80]	; (8002458 <TIM7_IRQHandler+0x84>)
 8002406:	f7fe fc3f 	bl	8000c88 <GPIO_WriteBit>
 800240a:	e01c      	b.n	8002446 <TIM7_IRQHandler+0x72>
		}
		else if (GPIO_ReadOutputDataBit(TRIG_PORT, RIGHT_TRIG_PIN) == 1)
 800240c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002410:	4811      	ldr	r0, [pc, #68]	; (8002458 <TIM7_IRQHandler+0x84>)
 8002412:	f7fe fc1d 	bl	8000c50 <GPIO_ReadOutputDataBit>
 8002416:	4603      	mov	r3, r0
 8002418:	2b01      	cmp	r3, #1
 800241a:	d106      	bne.n	800242a <TIM7_IRQHandler+0x56>
		{
			GPIO_WriteBit(TRIG_PORT, RIGHT_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu right
 800241c:	2200      	movs	r2, #0
 800241e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002422:	480d      	ldr	r0, [pc, #52]	; (8002458 <TIM7_IRQHandler+0x84>)
 8002424:	f7fe fc30 	bl	8000c88 <GPIO_WriteBit>
 8002428:	e00d      	b.n	8002446 <TIM7_IRQHandler+0x72>
		}
		else if (GPIO_ReadOutputDataBit(TRIG_PORT, FORWARD_TRIG_PIN) == 1)
 800242a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800242e:	480a      	ldr	r0, [pc, #40]	; (8002458 <TIM7_IRQHandler+0x84>)
 8002430:	f7fe fc0e 	bl	8000c50 <GPIO_ReadOutputDataBit>
 8002434:	4603      	mov	r3, r0
 8002436:	2b01      	cmp	r3, #1
 8002438:	d105      	bne.n	8002446 <TIM7_IRQHandler+0x72>
		{
			GPIO_WriteBit(TRIG_PORT, FORWARD_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu forward
 800243a:	2200      	movs	r2, #0
 800243c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002440:	4805      	ldr	r0, [pc, #20]	; (8002458 <TIM7_IRQHandler+0x84>)
 8002442:	f7fe fc21 	bl	8000c88 <GPIO_WriteBit>
		}
		TIM_ClearITPendingBit(TRIG_TIM, TIM_IT_Update);
 8002446:	2101      	movs	r1, #1
 8002448:	4802      	ldr	r0, [pc, #8]	; (8002454 <TIM7_IRQHandler+0x80>)
 800244a:	f7ff f831 	bl	80014b0 <TIM_ClearITPendingBit>
	}
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40001400 	.word	0x40001400
 8002458:	40020000 	.word	0x40020000

0800245c <TIM3_IRQHandler>:
//spracovanie prerusenia z TIM3, casovac pre meranie dlzky impulzu z dialialkomerov
void TIM3_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
	//spustenie spracovania prerusenia CAPTURE_TIM pre prislusny senzor
	if (sensorCaptureHandler != 0)
 8002460:	4b04      	ldr	r3, [pc, #16]	; (8002474 <TIM3_IRQHandler+0x18>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <TIM3_IRQHandler+0x12>
	{
		sensorCaptureHandler();
 8002468:	4b02      	ldr	r3, [pc, #8]	; (8002474 <TIM3_IRQHandler+0x18>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4798      	blx	r3
	}
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200000b0 	.word	0x200000b0

08002478 <TIM10_IRQHandler>:
//spracovanie prerusenia z casovaca pre volanie merania vzdialenosti
void TIM10_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(SENSOR_CALL_TIM, TIM_IT_Update) == SET)
 800247c:	2101      	movs	r1, #1
 800247e:	4814      	ldr	r0, [pc, #80]	; (80024d0 <TIM10_IRQHandler+0x58>)
 8002480:	f7fe ffec 	bl	800145c <TIM_GetITStatus>
 8002484:	4603      	mov	r3, r0
 8002486:	2b01      	cmp	r3, #1
 8002488:	d120      	bne.n	80024cc <TIM10_IRQHandler+0x54>
	{
		//volanie merania senzora, ktory je na rade
		switch (selectSensor)
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <TIM10_IRQHandler+0x5c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d006      	beq.n	80024a0 <TIM10_IRQHandler+0x28>
 8002492:	2b02      	cmp	r3, #2
 8002494:	d007      	beq.n	80024a6 <TIM10_IRQHandler+0x2e>
 8002496:	2b00      	cmp	r3, #0
 8002498:	d108      	bne.n	80024ac <TIM10_IRQHandler+0x34>
		{
		case 0:
			leftSensorMeasure();
 800249a:	f7ff ff41 	bl	8002320 <leftSensorMeasure>
			break;
 800249e:	e005      	b.n	80024ac <TIM10_IRQHandler+0x34>
		case 1:
			forwardSensorMeasure();
 80024a0:	f7ff ff7a 	bl	8002398 <forwardSensorMeasure>
			break;
 80024a4:	e002      	b.n	80024ac <TIM10_IRQHandler+0x34>
		case 2:
			rightSensorMeasure();
 80024a6:	f7ff ff59 	bl	800235c <rightSensorMeasure>
			break;
 80024aa:	bf00      	nop
		}
		//inkrementovanie volaneho senzora
		selectSensor++;
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <TIM10_IRQHandler+0x5c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	4a08      	ldr	r2, [pc, #32]	; (80024d4 <TIM10_IRQHandler+0x5c>)
 80024b4:	6013      	str	r3, [r2, #0]
		if (selectSensor > 2)
 80024b6:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <TIM10_IRQHandler+0x5c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	dd02      	ble.n	80024c4 <TIM10_IRQHandler+0x4c>
		{
			selectSensor = 0;
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <TIM10_IRQHandler+0x5c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
		}
		TIM_ClearITPendingBit(SENSOR_CALL_TIM, TIM_IT_Update);
 80024c4:	2101      	movs	r1, #1
 80024c6:	4802      	ldr	r0, [pc, #8]	; (80024d0 <TIM10_IRQHandler+0x58>)
 80024c8:	f7fe fff2 	bl	80014b0 <TIM_ClearITPendingBit>
	}
}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40010c00 	.word	0x40010c00
 80024d4:	2000003c 	.word	0x2000003c

080024d8 <leftSensorCaptureHandler>:

//meranie dlzky impulzu lavy senzor
void leftSensorCaptureHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, LEFT_TIM_CC) != RESET)
 80024dc:	2108      	movs	r1, #8
 80024de:	4814      	ldr	r0, [pc, #80]	; (8002530 <leftSensorCaptureHandler+0x58>)
 80024e0:	f7fe ffbc 	bl	800145c <TIM_GetITStatus>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d01f      	beq.n	800252a <leftSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, LEFT_TIM_CC);
 80024ea:	2108      	movs	r1, #8
 80024ec:	4810      	ldr	r0, [pc, #64]	; (8002530 <leftSensorCaptureHandler+0x58>)
 80024ee:	f7fe ffdf 	bl	80014b0 <TIM_ClearITPendingBit>

		if(LeftSensorCaptureStruc.captureStep == 0)
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <leftSensorCaptureHandler+0x5c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <leftSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			LeftSensorCaptureStruc.risingTimeCapturing = LEFT_TIM_GETCAPTURE;
 80024fa:	480d      	ldr	r0, [pc, #52]	; (8002530 <leftSensorCaptureHandler+0x58>)
 80024fc:	f7fe fefe 	bl	80012fc <TIM_GetCapture3>
 8002500:	4602      	mov	r2, r0
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <leftSensorCaptureHandler+0x5c>)
 8002504:	605a      	str	r2, [r3, #4]
			LeftSensorCaptureStruc.captureStep = 1;
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <leftSensorCaptureHandler+0x5c>)
 8002508:	2201      	movs	r2, #1
 800250a:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			LeftSensorCaptureStruc.fallingTime = LEFT_TIM_GETCAPTURE;
			LeftSensorCaptureStruc.risingTime = LeftSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 800250c:	e00d      	b.n	800252a <leftSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			LeftSensorCaptureStruc.risingTimeCapturing = LEFT_TIM_GETCAPTURE;
			LeftSensorCaptureStruc.captureStep = 1;
		}
		else if(LeftSensorCaptureStruc.captureStep == 1)
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <leftSensorCaptureHandler+0x5c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d109      	bne.n	800252a <leftSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			LeftSensorCaptureStruc.fallingTime = LEFT_TIM_GETCAPTURE;
 8002516:	4806      	ldr	r0, [pc, #24]	; (8002530 <leftSensorCaptureHandler+0x58>)
 8002518:	f7fe fef0 	bl	80012fc <TIM_GetCapture3>
 800251c:	4602      	mov	r2, r0
 800251e:	4b05      	ldr	r3, [pc, #20]	; (8002534 <leftSensorCaptureHandler+0x5c>)
 8002520:	60da      	str	r2, [r3, #12]
			LeftSensorCaptureStruc.risingTime = LeftSensorCaptureStruc.risingTimeCapturing;
 8002522:	4b04      	ldr	r3, [pc, #16]	; (8002534 <leftSensorCaptureHandler+0x5c>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4a03      	ldr	r2, [pc, #12]	; (8002534 <leftSensorCaptureHandler+0x5c>)
 8002528:	6093      	str	r3, [r2, #8]
		}
	}
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40000400 	.word	0x40000400
 8002534:	20000090 	.word	0x20000090

08002538 <rightSensorCaptureHandler>:
//meranie dlzky impulzu lavy senzor
void rightSensorCaptureHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, RIGHT_TIM_CC) != RESET)
 800253c:	2102      	movs	r1, #2
 800253e:	4814      	ldr	r0, [pc, #80]	; (8002590 <rightSensorCaptureHandler+0x58>)
 8002540:	f7fe ff8c 	bl	800145c <TIM_GetITStatus>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d01f      	beq.n	800258a <rightSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, RIGHT_TIM_CC);
 800254a:	2102      	movs	r1, #2
 800254c:	4810      	ldr	r0, [pc, #64]	; (8002590 <rightSensorCaptureHandler+0x58>)
 800254e:	f7fe ffaf 	bl	80014b0 <TIM_ClearITPendingBit>

		if(RightSensorCaptureStruc.captureStep == 0)
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <rightSensorCaptureHandler+0x5c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <rightSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			RightSensorCaptureStruc.risingTimeCapturing = RIGHT_TIM_GETCAPTURE;
 800255a:	480d      	ldr	r0, [pc, #52]	; (8002590 <rightSensorCaptureHandler+0x58>)
 800255c:	f7fe fec2 	bl	80012e4 <TIM_GetCapture1>
 8002560:	4602      	mov	r2, r0
 8002562:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <rightSensorCaptureHandler+0x5c>)
 8002564:	605a      	str	r2, [r3, #4]
			RightSensorCaptureStruc.captureStep = 1;
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <rightSensorCaptureHandler+0x5c>)
 8002568:	2201      	movs	r2, #1
 800256a:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			RightSensorCaptureStruc.fallingTime = RIGHT_TIM_GETCAPTURE;
			RightSensorCaptureStruc.risingTime = RightSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 800256c:	e00d      	b.n	800258a <rightSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			RightSensorCaptureStruc.risingTimeCapturing = RIGHT_TIM_GETCAPTURE;
			RightSensorCaptureStruc.captureStep = 1;
		}
		else if(RightSensorCaptureStruc.captureStep == 1)
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <rightSensorCaptureHandler+0x5c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d109      	bne.n	800258a <rightSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			RightSensorCaptureStruc.fallingTime = RIGHT_TIM_GETCAPTURE;
 8002576:	4806      	ldr	r0, [pc, #24]	; (8002590 <rightSensorCaptureHandler+0x58>)
 8002578:	f7fe feb4 	bl	80012e4 <TIM_GetCapture1>
 800257c:	4602      	mov	r2, r0
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <rightSensorCaptureHandler+0x5c>)
 8002580:	60da      	str	r2, [r3, #12]
			RightSensorCaptureStruc.risingTime = RightSensorCaptureStruc.risingTimeCapturing;
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <rightSensorCaptureHandler+0x5c>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4a03      	ldr	r2, [pc, #12]	; (8002594 <rightSensorCaptureHandler+0x5c>)
 8002588:	6093      	str	r3, [r2, #8]
		}
	}
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40000400 	.word	0x40000400
 8002594:	20000080 	.word	0x20000080

08002598 <forwardSensorCaptureHandler>:
//meranie dlzky impulzu lavy senzor
void forwardSensorCaptureHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, FORWARD_TIM_CC) != RESET)
 800259c:	2110      	movs	r1, #16
 800259e:	4814      	ldr	r0, [pc, #80]	; (80025f0 <forwardSensorCaptureHandler+0x58>)
 80025a0:	f7fe ff5c 	bl	800145c <TIM_GetITStatus>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d01f      	beq.n	80025ea <forwardSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, FORWARD_TIM_CC);
 80025aa:	2110      	movs	r1, #16
 80025ac:	4810      	ldr	r0, [pc, #64]	; (80025f0 <forwardSensorCaptureHandler+0x58>)
 80025ae:	f7fe ff7f 	bl	80014b0 <TIM_ClearITPendingBit>

		if(ForwardSensorCaptureStruc.captureStep == 0)
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <forwardSensorCaptureHandler+0x5c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <forwardSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			ForwardSensorCaptureStruc.risingTimeCapturing = FORWARD_TIM_GETCAPTURE;
 80025ba:	480d      	ldr	r0, [pc, #52]	; (80025f0 <forwardSensorCaptureHandler+0x58>)
 80025bc:	f7fe feaa 	bl	8001314 <TIM_GetCapture4>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <forwardSensorCaptureHandler+0x5c>)
 80025c4:	605a      	str	r2, [r3, #4]
			ForwardSensorCaptureStruc.captureStep = 1;
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <forwardSensorCaptureHandler+0x5c>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			ForwardSensorCaptureStruc.fallingTime = FORWARD_TIM_GETCAPTURE;
			ForwardSensorCaptureStruc.risingTime = ForwardSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 80025cc:	e00d      	b.n	80025ea <forwardSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			ForwardSensorCaptureStruc.risingTimeCapturing = FORWARD_TIM_GETCAPTURE;
			ForwardSensorCaptureStruc.captureStep = 1;
		}
		else if(ForwardSensorCaptureStruc.captureStep == 1)
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <forwardSensorCaptureHandler+0x5c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d109      	bne.n	80025ea <forwardSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			ForwardSensorCaptureStruc.fallingTime = FORWARD_TIM_GETCAPTURE;
 80025d6:	4806      	ldr	r0, [pc, #24]	; (80025f0 <forwardSensorCaptureHandler+0x58>)
 80025d8:	f7fe fe9c 	bl	8001314 <TIM_GetCapture4>
 80025dc:	4602      	mov	r2, r0
 80025de:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <forwardSensorCaptureHandler+0x5c>)
 80025e0:	60da      	str	r2, [r3, #12]
			ForwardSensorCaptureStruc.risingTime = ForwardSensorCaptureStruc.risingTimeCapturing;
 80025e2:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <forwardSensorCaptureHandler+0x5c>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4a03      	ldr	r2, [pc, #12]	; (80025f4 <forwardSensorCaptureHandler+0x5c>)
 80025e8:	6093      	str	r3, [r2, #8]
		}
	}
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40000400 	.word	0x40000400
 80025f4:	200000a0 	.word	0x200000a0

080025f8 <forwardSensorGetDistance>:
		return distance;
	}
}
//prevzatie nameranej vzdialenosti z predneho dialkomeru
double forwardSensorGetDistance(void)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
	uint32_t forwardDistanceTime = 0;//konecna dlzka impulzu z dialkomeru
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
	double distance = 0;//konecna vzdialenost
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	f04f 0400 	mov.w	r4, #0
 800260a:	e887 0018 	stmia.w	r7, {r3, r4}

	//vypocet trvania impulzu
	forwardDistanceTime = computeEchoDuration(ForwardSensorCaptureStruc.risingTime, ForwardSensorCaptureStruc.fallingTime);
 800260e:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <forwardSensorGetDistance+0x88>)
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <forwardSensorGetDistance+0x88>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	4619      	mov	r1, r3
 8002618:	4610      	mov	r0, r2
 800261a:	f000 f839 	bl	8002690 <computeEchoDuration>
 800261e:	60f8      	str	r0, [r7, #12]

	//vypocet vzdialenosti z predneho senzoru
	distance = forwardDistanceTime/DISTANCE_CLC_CONST/DISTANCE_ENV_CONST;
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f7fd feef 	bl	8000404 <__aeabi_ui2d>
 8002626:	a314      	add	r3, pc, #80	; (adr r3, 8002678 <forwardSensorGetDistance+0x80>)
 8002628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262c:	f7fe f88a 	bl	8000744 <__aeabi_ddiv>
 8002630:	4603      	mov	r3, r0
 8002632:	460c      	mov	r4, r1
 8002634:	4618      	mov	r0, r3
 8002636:	4621      	mov	r1, r4
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	4b11      	ldr	r3, [pc, #68]	; (8002684 <forwardSensorGetDistance+0x8c>)
 800263e:	f7fe f881 	bl	8000744 <__aeabi_ddiv>
 8002642:	4603      	mov	r3, r0
 8002644:	460c      	mov	r4, r1
 8002646:	e887 0018 	stmia.w	r7, {r3, r4}
	if (distance > DISTANCE_MAX)
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <forwardSensorGetDistance+0x90>)
 8002650:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002654:	f7fe f9dc 	bl	8000a10 <__aeabi_dcmpgt>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <forwardSensorGetDistance+0x6e>
	{
		//senzor nic nezachytil
		return -1;
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	4c0a      	ldr	r4, [pc, #40]	; (800268c <forwardSensorGetDistance+0x94>)
 8002664:	e001      	b.n	800266a <forwardSensorGetDistance+0x72>
	}
	else
	{
		return distance;
 8002666:	e897 0018 	ldmia.w	r7, {r3, r4}
	}
}
 800266a:	4618      	mov	r0, r3
 800266c:	4621      	mov	r1, r4
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	bd90      	pop	{r4, r7, pc}
 8002674:	f3af 8000 	nop.w
 8002678:	9999999a 	.word	0x9999999a
 800267c:	3fb99999 	.word	0x3fb99999
 8002680:	200000a0 	.word	0x200000a0
 8002684:	404d0000 	.word	0x404d0000
 8002688:	40790000 	.word	0x40790000
 800268c:	bff00000 	.word	0xbff00000

08002690 <computeEchoDuration>:

//vypocet trvania impulzu ozveny z dialkomera
uint32_t computeEchoDuration(uint32_t risingTime, uint32_t fallingTime)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
	uint32_t distanceTime = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
	//vypocet podla toho ci nabezna alebo dobezna je vacsie cislo
	if (fallingTime > risingTime)
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d905      	bls.n	80026b2 <computeEchoDuration+0x22>
	{
		distanceTime = (fallingTime - risingTime) - 1;
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	e00d      	b.n	80026ce <computeEchoDuration+0x3e>
	}
	else if (fallingTime < risingTime)
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d207      	bcs.n	80026ca <computeEchoDuration+0x3a>
	{
		distanceTime = ((CAPTURE_COUNT_MAX - risingTime) + fallingTime) - 1;
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80026c4:	33fe      	adds	r3, #254	; 0xfe
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	e001      	b.n	80026ce <computeEchoDuration+0x3e>
	}
	else
	{
		distanceTime = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
	}

	return distanceTime;
 80026ce:	68fb      	ldr	r3, [r7, #12]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop

080026dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002714 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80026e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80026e2:	e003      	b.n	80026ec <LoopCopyDataInit>

080026e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 80026e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80026e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80026ea:	3104      	adds	r1, #4

080026ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80026ec:	480b      	ldr	r0, [pc, #44]	; (800271c <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 80026ee:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 80026f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80026f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80026f4:	d3f6      	bcc.n	80026e4 <CopyDataInit>
  ldr r2, =_sbss
 80026f6:	4a0b      	ldr	r2, [pc, #44]	; (8002724 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 80026f8:	e002      	b.n	8002700 <LoopFillZerobss>

080026fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80026fa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80026fc:	f842 3b04 	str.w	r3, [r2], #4

08002700 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8002702:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002704:	d3f9      	bcc.n	80026fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002706:	f000 f841 	bl	800278c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800270a:	f000 f903 	bl	8002914 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800270e:	f7ff fb1d 	bl	8001d4c <main>
  bx lr
 8002712:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002714:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8002718:	08002980 	.word	0x08002980
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 800271c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002720:	2000001c 	.word	0x2000001c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8002724:	20000020 	.word	0x20000020
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8002728:	200000b4 	.word	0x200000b4

0800272c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800272c:	e7fe      	b.n	800272c <ADC1_IRQHandler>
	...

08002730 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8002740:	e7fe      	b.n	8002740 <HardFault_Handler+0x4>
 8002742:	bf00      	nop

08002744 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8002748:	e7fe      	b.n	8002748 <MemManage_Handler+0x4>
 800274a:	bf00      	nop

0800274c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8002750:	e7fe      	b.n	8002750 <BusFault_Handler+0x4>
 8002752:	bf00      	nop

08002754 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8002758:	e7fe      	b.n	8002758 <UsageFault_Handler+0x4>
 800275a:	bf00      	nop

0800275c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8002790:	4a15      	ldr	r2, [pc, #84]	; (80027e8 <SystemInit+0x5c>)
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <SystemInit+0x5c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800279c:	4912      	ldr	r1, [pc, #72]	; (80027e8 <SystemInit+0x5c>)
 800279e:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <SystemInit+0x5c>)
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	4b12      	ldr	r3, [pc, #72]	; (80027ec <SystemInit+0x60>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80027a8:	4a0f      	ldr	r2, [pc, #60]	; (80027e8 <SystemInit+0x5c>)
 80027aa:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <SystemInit+0x5c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80027b2:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80027b6:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80027b8:	4a0b      	ldr	r2, [pc, #44]	; (80027e8 <SystemInit+0x5c>)
 80027ba:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <SystemInit+0x5c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c2:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80027c4:	4a08      	ldr	r2, [pc, #32]	; (80027e8 <SystemInit+0x5c>)
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <SystemInit+0x5c>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80027ce:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <SystemInit+0x5c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 80027d6:	f000 f80d 	bl	80027f4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80027da:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <SystemInit+0x64>)
 80027dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027e0:	609a      	str	r2, [r3, #8]
#endif
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	88ffc00c 	.word	0x88ffc00c
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	2300      	movs	r3, #0
 8002800:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002802:	4a41      	ldr	r2, [pc, #260]	; (8002908 <SetSysClock+0x114>)
 8002804:	4b40      	ldr	r3, [pc, #256]	; (8002908 <SetSysClock+0x114>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800280e:	4b3e      	ldr	r3, [pc, #248]	; (8002908 <SetSysClock+0x114>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3301      	adds	r3, #1
 800281c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d103      	bne.n	800282c <SetSysClock+0x38>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800282a:	d1f0      	bne.n	800280e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800282c:	4b36      	ldr	r3, [pc, #216]	; (8002908 <SetSysClock+0x114>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002838:	2301      	movs	r3, #1
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	e001      	b.n	8002842 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800283e:	2300      	movs	r3, #0
 8002840:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d15a      	bne.n	80028fe <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8002848:	4a30      	ldr	r2, [pc, #192]	; (800290c <SetSysClock+0x118>)
 800284a:	4b30      	ldr	r3, [pc, #192]	; (800290c <SetSysClock+0x118>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f043 0304 	orr.w	r3, r3, #4
 8002852:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8002854:	4a2d      	ldr	r2, [pc, #180]	; (800290c <SetSysClock+0x118>)
 8002856:	4b2d      	ldr	r3, [pc, #180]	; (800290c <SetSysClock+0x118>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f043 0302 	orr.w	r3, r3, #2
 800285e:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8002860:	4a2a      	ldr	r2, [pc, #168]	; (800290c <SetSysClock+0x118>)
 8002862:	4b2a      	ldr	r3, [pc, #168]	; (800290c <SetSysClock+0x118>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800286c:	4a26      	ldr	r2, [pc, #152]	; (8002908 <SetSysClock+0x114>)
 800286e:	4b26      	ldr	r3, [pc, #152]	; (8002908 <SetSysClock+0x114>)
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002876:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8002878:	4b25      	ldr	r3, [pc, #148]	; (8002910 <SetSysClock+0x11c>)
 800287a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800287e:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8002880:	bf00      	nop
 8002882:	4b23      	ldr	r3, [pc, #140]	; (8002910 <SetSysClock+0x11c>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f9      	bne.n	8002882 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800288e:	4a1e      	ldr	r2, [pc, #120]	; (8002908 <SetSysClock+0x114>)
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <SetSysClock+0x114>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002896:	4a1c      	ldr	r2, [pc, #112]	; (8002908 <SetSysClock+0x114>)
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <SetSysClock+0x114>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 800289e:	4a1a      	ldr	r2, [pc, #104]	; (8002908 <SetSysClock+0x114>)
 80028a0:	4b19      	ldr	r3, [pc, #100]	; (8002908 <SetSysClock+0x114>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 80028a6:	4a18      	ldr	r2, [pc, #96]	; (8002908 <SetSysClock+0x114>)
 80028a8:	4b17      	ldr	r3, [pc, #92]	; (8002908 <SetSysClock+0x114>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80028b0:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 80028b2:	4a15      	ldr	r2, [pc, #84]	; (8002908 <SetSysClock+0x114>)
 80028b4:	4b14      	ldr	r3, [pc, #80]	; (8002908 <SetSysClock+0x114>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 80028bc:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80028be:	4a12      	ldr	r2, [pc, #72]	; (8002908 <SetSysClock+0x114>)
 80028c0:	4b11      	ldr	r3, [pc, #68]	; (8002908 <SetSysClock+0x114>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028c8:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80028ca:	bf00      	nop
 80028cc:	4b0e      	ldr	r3, [pc, #56]	; (8002908 <SetSysClock+0x114>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f9      	beq.n	80028cc <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80028d8:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <SetSysClock+0x114>)
 80028da:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <SetSysClock+0x114>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f023 0303 	bic.w	r3, r3, #3
 80028e2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80028e4:	4a08      	ldr	r2, [pc, #32]	; (8002908 <SetSysClock+0x114>)
 80028e6:	4b08      	ldr	r3, [pc, #32]	; (8002908 <SetSysClock+0x114>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f043 0303 	orr.w	r3, r3, #3
 80028ee:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80028f0:	bf00      	nop
 80028f2:	4b05      	ldr	r3, [pc, #20]	; (8002908 <SetSysClock+0x114>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b0c      	cmp	r3, #12
 80028fc:	d1f9      	bne.n	80028f2 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	40023800 	.word	0x40023800
 800290c:	40023c00 	.word	0x40023c00
 8002910:	40007000 	.word	0x40007000

08002914 <__libc_init_array>:
 8002914:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <__libc_init_array+0x3c>)
 8002916:	b570      	push	{r4, r5, r6, lr}
 8002918:	461e      	mov	r6, r3
 800291a:	4c0e      	ldr	r4, [pc, #56]	; (8002954 <__libc_init_array+0x40>)
 800291c:	2500      	movs	r5, #0
 800291e:	1ae4      	subs	r4, r4, r3
 8002920:	10a4      	asrs	r4, r4, #2
 8002922:	42a5      	cmp	r5, r4
 8002924:	d004      	beq.n	8002930 <__libc_init_array+0x1c>
 8002926:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800292a:	4798      	blx	r3
 800292c:	3501      	adds	r5, #1
 800292e:	e7f8      	b.n	8002922 <__libc_init_array+0xe>
 8002930:	f000 f816 	bl	8002960 <_init>
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <__libc_init_array+0x44>)
 8002936:	4c09      	ldr	r4, [pc, #36]	; (800295c <__libc_init_array+0x48>)
 8002938:	461e      	mov	r6, r3
 800293a:	1ae4      	subs	r4, r4, r3
 800293c:	10a4      	asrs	r4, r4, #2
 800293e:	2500      	movs	r5, #0
 8002940:	42a5      	cmp	r5, r4
 8002942:	d004      	beq.n	800294e <__libc_init_array+0x3a>
 8002944:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002948:	4798      	blx	r3
 800294a:	3501      	adds	r5, #1
 800294c:	e7f8      	b.n	8002940 <__libc_init_array+0x2c>
 800294e:	bd70      	pop	{r4, r5, r6, pc}
 8002950:	08002978 	.word	0x08002978
 8002954:	08002978 	.word	0x08002978
 8002958:	08002978 	.word	0x08002978
 800295c:	0800297c 	.word	0x0800297c

08002960 <_init>:
 8002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002962:	bf00      	nop
 8002964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002966:	bc08      	pop	{r3}
 8002968:	469e      	mov	lr, r3
 800296a:	4770      	bx	lr

0800296c <_fini>:
 800296c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296e:	bf00      	nop
 8002970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002972:	bc08      	pop	{r3}
 8002974:	469e      	mov	lr, r3
 8002976:	4770      	bx	lr
