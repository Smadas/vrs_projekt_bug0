
vrs_projekt_bug0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013e8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001524  08001524  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001524  08001524  00011524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001528  08001528  00011528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000002c  20000000  0800152c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000010c  20000030  08001558  00020030  2**3
                  ALLOC
  7 ._user_heap_stack 00000400  2000013c  08001558  0002013c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006ebe  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000135c  00000000  00000000  00026f13  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008b8  00000000  00000000  00028270  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000800  00000000  00000000  00028b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002ef5  00000000  00000000  00029328  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002687  00000000  00000000  0002c21d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002e8a4  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002374  00000000  00000000  0002e924  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00030c98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000030 	.word	0x20000030
 8000158:	00000000 	.word	0x00000000
 800015c:	0800150c 	.word	0x0800150c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000034 	.word	0x20000034
 8000178:	0800150c 	.word	0x0800150c

0800017c <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for preemption priority.
  *                                0 bits for subpriority.
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000184:	4a05      	ldr	r2, [pc, #20]	; (800019c <NVIC_PriorityGroupConfig+0x20>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800018c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000190:	60d3      	str	r3, [r2, #12]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	e000ed00 	.word	0xe000ed00

080001a0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b085      	sub	sp, #20
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001a8:	2300      	movs	r3, #0
 80001aa:	73fb      	strb	r3, [r7, #15]
 80001ac:	2300      	movs	r3, #0
 80001ae:	73bb      	strb	r3, [r7, #14]
 80001b0:	230f      	movs	r3, #15
 80001b2:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	78db      	ldrb	r3, [r3, #3]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d038      	beq.n	800022e <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001bc:	4b26      	ldr	r3, [pc, #152]	; (8000258 <NVIC_Init+0xb8>)
 80001be:	68db      	ldr	r3, [r3, #12]
 80001c0:	43db      	mvns	r3, r3
 80001c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001c6:	0a1b      	lsrs	r3, r3, #8
 80001c8:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	f1c3 0304 	rsb	r3, r3, #4
 80001d0:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001d2:	7b7a      	ldrb	r2, [r7, #13]
 80001d4:	7bfb      	ldrb	r3, [r7, #15]
 80001d6:	fa42 f303 	asr.w	r3, r2, r3
 80001da:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	785b      	ldrb	r3, [r3, #1]
 80001e0:	461a      	mov	r2, r3
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	fa02 f303 	lsl.w	r3, r2, r3
 80001e8:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	789a      	ldrb	r2, [r3, #2]
 80001ee:	7b7b      	ldrb	r3, [r7, #13]
 80001f0:	4013      	ands	r3, r2
 80001f2:	b2da      	uxtb	r2, r3
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	4313      	orrs	r3, r2
 80001f8:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 80001fa:	7bfb      	ldrb	r3, [r7, #15]
 80001fc:	011b      	lsls	r3, r3, #4
 80001fe:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000200:	4a16      	ldr	r2, [pc, #88]	; (800025c <NVIC_Init+0xbc>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	4413      	add	r3, r2
 8000208:	7bfa      	ldrb	r2, [r7, #15]
 800020a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <NVIC_Init+0xbc>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	095b      	lsrs	r3, r3, #5
 8000216:	b2db      	uxtb	r3, r3
 8000218:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	f003 031f 	and.w	r3, r3, #31
 8000222:	2101      	movs	r1, #1
 8000224:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000228:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800022c:	e00f      	b.n	800024e <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800022e:	490b      	ldr	r1, [pc, #44]	; (800025c <NVIC_Init+0xbc>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	095b      	lsrs	r3, r3, #5
 8000236:	b2db      	uxtb	r3, r3
 8000238:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	f003 031f 	and.w	r3, r3, #31
 8000242:	2201      	movs	r2, #1
 8000244:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000246:	f100 0320 	add.w	r3, r0, #32
 800024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800024e:	bf00      	nop
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	e000ed00 	.word	0xe000ed00
 800025c:	e000e100 	.word	0xe000e100

08000260 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000260:	b480      	push	{r7}
 8000262:	b087      	sub	sp, #28
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800026a:	2300      	movs	r3, #0
 800026c:	617b      	str	r3, [r7, #20]
 800026e:	2300      	movs	r3, #0
 8000270:	613b      	str	r3, [r7, #16]
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
 800027a:	e07e      	b.n	800037a <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800027c:	2201      	movs	r2, #1
 800027e:	697b      	ldr	r3, [r7, #20]
 8000280:	fa02 f303 	lsl.w	r3, r2, r3
 8000284:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	693b      	ldr	r3, [r7, #16]
 800028c:	4013      	ands	r3, r2
 800028e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000290:	68fa      	ldr	r2, [r7, #12]
 8000292:	693b      	ldr	r3, [r7, #16]
 8000294:	429a      	cmp	r2, r3
 8000296:	d16d      	bne.n	8000374 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	697b      	ldr	r3, [r7, #20]
 800029e:	005b      	lsls	r3, r3, #1
 80002a0:	2103      	movs	r1, #3
 80002a2:	fa01 f303 	lsl.w	r3, r1, r3
 80002a6:	43db      	mvns	r3, r3
 80002a8:	401a      	ands	r2, r3
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	791b      	ldrb	r3, [r3, #4]
 80002b6:	4619      	mov	r1, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	005b      	lsls	r3, r3, #1
 80002bc:	fa01 f303 	lsl.w	r3, r1, r3
 80002c0:	431a      	orrs	r2, r3
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	791b      	ldrb	r3, [r3, #4]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d003      	beq.n	80002d6 <GPIO_Init+0x76>
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	791b      	ldrb	r3, [r3, #4]
 80002d2:	2b02      	cmp	r3, #2
 80002d4:	d136      	bne.n	8000344 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	689a      	ldr	r2, [r3, #8]
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	2103      	movs	r1, #3
 80002e0:	fa01 f303 	lsl.w	r3, r1, r3
 80002e4:	43db      	mvns	r3, r3
 80002e6:	401a      	ands	r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	689a      	ldr	r2, [r3, #8]
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	795b      	ldrb	r3, [r3, #5]
 80002f4:	4619      	mov	r1, r3
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	fa01 f303 	lsl.w	r3, r1, r3
 80002fe:	431a      	orrs	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	889b      	ldrh	r3, [r3, #4]
 8000308:	b29a      	uxth	r2, r3
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	b29b      	uxth	r3, r3
 800030e:	2101      	movs	r1, #1
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	b29b      	uxth	r3, r3
 8000316:	43db      	mvns	r3, r3
 8000318:	b29b      	uxth	r3, r3
 800031a:	4013      	ands	r3, r2
 800031c:	b29a      	uxth	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	889b      	ldrh	r3, [r3, #4]
 8000326:	b29b      	uxth	r3, r3
 8000328:	b21a      	sxth	r2, r3
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	799b      	ldrb	r3, [r3, #6]
 800032e:	4619      	mov	r1, r3
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	b29b      	uxth	r3, r3
 8000334:	fa01 f303 	lsl.w	r3, r1, r3
 8000338:	b21b      	sxth	r3, r3
 800033a:	4313      	orrs	r3, r2
 800033c:	b21b      	sxth	r3, r3
 800033e:	b29a      	uxth	r2, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	68da      	ldr	r2, [r3, #12]
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	b29b      	uxth	r3, r3
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	2103      	movs	r1, #3
 8000350:	fa01 f303 	lsl.w	r3, r1, r3
 8000354:	43db      	mvns	r3, r3
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	68da      	ldr	r2, [r3, #12]
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	79db      	ldrb	r3, [r3, #7]
 8000364:	4619      	mov	r1, r3
 8000366:	697b      	ldr	r3, [r7, #20]
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	fa01 f303 	lsl.w	r3, r1, r3
 800036e:	431a      	orrs	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	3301      	adds	r3, #1
 8000378:	617b      	str	r3, [r7, #20]
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	2b0f      	cmp	r3, #15
 800037e:	f67f af7d 	bls.w	800027c <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000382:	bf00      	nop
 8000384:	371c      	adds	r7, #28
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: Specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	460b      	mov	r3, r1
 8000396:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000398:	2300      	movs	r3, #0
 800039a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	8a9b      	ldrh	r3, [r3, #20]
 80003a0:	b29a      	uxth	r2, r3
 80003a2:	887b      	ldrh	r3, [r7, #2]
 80003a4:	4013      	ands	r3, r2
 80003a6:	b29b      	uxth	r3, r3
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d002      	beq.n	80003b2 <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 80003ac:	2301      	movs	r3, #1
 80003ae:	73fb      	strb	r3, [r7, #15]
 80003b0:	e001      	b.n	80003b6 <GPIO_ReadOutputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80003b2:	2300      	movs	r3, #0
 80003b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80003b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	3714      	adds	r7, #20
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop

080003c4 <GPIO_SetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	460b      	mov	r3, r1
 80003ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRL = GPIO_Pin;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	887a      	ldrh	r2, [r7, #2]
 80003d4:	831a      	strh	r2, [r3, #24]
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr

080003e0 <GPIO_ResetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	460b      	mov	r3, r1
 80003ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRH = GPIO_Pin;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	887a      	ldrh	r2, [r7, #2]
 80003f0:	835a      	strh	r2, [r3, #26]
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr

080003fc <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	460b      	mov	r3, r1
 8000406:	807b      	strh	r3, [r7, #2]
 8000408:	4613      	mov	r3, r2
 800040a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 800040c:	787b      	ldrb	r3, [r7, #1]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d003      	beq.n	800041a <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	887a      	ldrh	r2, [r7, #2]
 8000416:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000418:	e002      	b.n	8000420 <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	887a      	ldrh	r2, [r7, #2]
 800041e:	835a      	strh	r2, [r3, #26]
  }
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop

0800042c <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..H) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	460b      	mov	r3, r1
 8000436:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	8a9b      	ldrh	r3, [r3, #20]
 800043c:	b29a      	uxth	r2, r3
 800043e:	887b      	ldrh	r3, [r7, #2]
 8000440:	4053      	eors	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	829a      	strh	r2, [r3, #20]
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop

08000454 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	460b      	mov	r3, r1
 800045e:	807b      	strh	r3, [r7, #2]
 8000460:	4613      	mov	r3, r2
 8000462:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000468:	2300      	movs	r3, #0
 800046a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800046c:	787a      	ldrb	r2, [r7, #1]
 800046e:	887b      	ldrh	r3, [r7, #2]
 8000470:	f003 0307 	and.w	r3, r3, #7
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	fa02 f303 	lsl.w	r3, r2, r3
 800047a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800047c:	887b      	ldrh	r3, [r7, #2]
 800047e:	08db      	lsrs	r3, r3, #3
 8000480:	b29b      	uxth	r3, r3
 8000482:	4618      	mov	r0, r3
 8000484:	887b      	ldrh	r3, [r7, #2]
 8000486:	08db      	lsrs	r3, r3, #3
 8000488:	b29b      	uxth	r3, r3
 800048a:	461a      	mov	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	3208      	adds	r2, #8
 8000490:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000494:	887b      	ldrh	r3, [r7, #2]
 8000496:	f003 0307 	and.w	r3, r3, #7
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	210f      	movs	r1, #15
 800049e:	fa01 f303 	lsl.w	r3, r1, r3
 80004a2:	43db      	mvns	r3, r3
 80004a4:	ea02 0103 	and.w	r1, r2, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	f100 0208 	add.w	r2, r0, #8
 80004ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80004b2:	887b      	ldrh	r3, [r7, #2]
 80004b4:	08db      	lsrs	r3, r3, #3
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	461a      	mov	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	3208      	adds	r2, #8
 80004be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80004c8:	887b      	ldrh	r3, [r7, #2]
 80004ca:	08db      	lsrs	r3, r3, #3
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	461a      	mov	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	3208      	adds	r2, #8
 80004d4:	68b9      	ldr	r1, [r7, #8]
 80004d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004da:	bf00      	nop
 80004dc:	3714      	adds	r7, #20
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b089      	sub	sp, #36	; 0x24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	61fb      	str	r3, [r7, #28]
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000504:	4b5f      	ldr	r3, [pc, #380]	; (8000684 <RCC_GetClocksFreq+0x1a0>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	f003 030c 	and.w	r3, r3, #12
 800050c:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 800050e:	69fb      	ldr	r3, [r7, #28]
 8000510:	2b0c      	cmp	r3, #12
 8000512:	d865      	bhi.n	80005e0 <RCC_GetClocksFreq+0xfc>
 8000514:	a201      	add	r2, pc, #4	; (adr r2, 800051c <RCC_GetClocksFreq+0x38>)
 8000516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051a:	bf00      	nop
 800051c:	08000551 	.word	0x08000551
 8000520:	080005e1 	.word	0x080005e1
 8000524:	080005e1 	.word	0x080005e1
 8000528:	080005e1 	.word	0x080005e1
 800052c:	08000571 	.word	0x08000571
 8000530:	080005e1 	.word	0x080005e1
 8000534:	080005e1 	.word	0x080005e1
 8000538:	080005e1 	.word	0x080005e1
 800053c:	08000579 	.word	0x08000579
 8000540:	080005e1 	.word	0x080005e1
 8000544:	080005e1 	.word	0x080005e1
 8000548:	080005e1 	.word	0x080005e1
 800054c:	08000581 	.word	0x08000581
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8000550:	4b4c      	ldr	r3, [pc, #304]	; (8000684 <RCC_GetClocksFreq+0x1a0>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000558:	0b5b      	lsrs	r3, r3, #13
 800055a:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	3301      	adds	r3, #1
 8000560:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000564:	fa02 f303 	lsl.w	r3, r2, r3
 8000568:	461a      	mov	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]
      break;
 800056e:	e047      	b.n	8000600 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a45      	ldr	r2, [pc, #276]	; (8000688 <RCC_GetClocksFreq+0x1a4>)
 8000574:	601a      	str	r2, [r3, #0]
      break;
 8000576:	e043      	b.n	8000600 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a44      	ldr	r2, [pc, #272]	; (800068c <RCC_GetClocksFreq+0x1a8>)
 800057c:	601a      	str	r2, [r3, #0]
      break;
 800057e:	e03f      	b.n	8000600 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000580:	4b40      	ldr	r3, [pc, #256]	; (8000684 <RCC_GetClocksFreq+0x1a0>)
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000588:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800058a:	4b3e      	ldr	r3, [pc, #248]	; (8000684 <RCC_GetClocksFreq+0x1a0>)
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000592:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8000594:	69bb      	ldr	r3, [r7, #24]
 8000596:	0c9b      	lsrs	r3, r3, #18
 8000598:	4a3d      	ldr	r2, [pc, #244]	; (8000690 <RCC_GetClocksFreq+0x1ac>)
 800059a:	5cd3      	ldrb	r3, [r2, r3]
 800059c:	b2db      	uxtb	r3, r3
 800059e:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	0d9b      	lsrs	r3, r3, #22
 80005a4:	3301      	adds	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80005a8:	4b36      	ldr	r3, [pc, #216]	; (8000684 <RCC_GetClocksFreq+0x1a0>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005b0:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d109      	bne.n	80005cc <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	4a33      	ldr	r2, [pc, #204]	; (8000688 <RCC_GetClocksFreq+0x1a4>)
 80005bc:	fb02 f203 	mul.w	r2, r2, r3
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 80005ca:	e019      	b.n	8000600 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 80005cc:	69bb      	ldr	r3, [r7, #24]
 80005ce:	4a2f      	ldr	r2, [pc, #188]	; (800068c <RCC_GetClocksFreq+0x1a8>)
 80005d0:	fb02 f203 	mul.w	r2, r2, r3
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	601a      	str	r2, [r3, #0]
      }
      break;
 80005de:	e00f      	b.n	8000600 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 80005e0:	4b28      	ldr	r3, [pc, #160]	; (8000684 <RCC_GetClocksFreq+0x1a0>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80005e8:	0b5b      	lsrs	r3, r3, #13
 80005ea:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	3301      	adds	r3, #1
 80005f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	601a      	str	r2, [r3, #0]
      break;
 80005fe:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <RCC_GetClocksFreq+0x1a0>)
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000608:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 800060a:	69fb      	ldr	r3, [r7, #28]
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 8000610:	4a20      	ldr	r2, [pc, #128]	; (8000694 <RCC_GetClocksFreq+0x1b0>)
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	4413      	add	r3, r2
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	40da      	lsrs	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <RCC_GetClocksFreq+0x1a0>)
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000630:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	0a1b      	lsrs	r3, r3, #8
 8000636:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000638:	4a16      	ldr	r2, [pc, #88]	; (8000694 <RCC_GetClocksFreq+0x1b0>)
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	4413      	add	r3, r2
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	40da      	lsrs	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <RCC_GetClocksFreq+0x1a0>)
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000658:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	0adb      	lsrs	r3, r3, #11
 800065e:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000660:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <RCC_GetClocksFreq+0x1b0>)
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	685a      	ldr	r2, [r3, #4]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	40da      	lsrs	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	60da      	str	r2, [r3, #12]
}
 8000678:	bf00      	nop
 800067a:	3724      	adds	r7, #36	; 0x24
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	00f42400 	.word	0x00f42400
 800068c:	007a1200 	.word	0x007a1200
 8000690:	20000000 	.word	0x20000000
 8000694:	2000000c 	.word	0x2000000c

08000698 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d006      	beq.n	80006b8 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80006aa:	4909      	ldr	r1, [pc, #36]	; (80006d0 <RCC_AHBPeriphClockCmd+0x38>)
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <RCC_AHBPeriphClockCmd+0x38>)
 80006ae:	69da      	ldr	r2, [r3, #28]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80006b6:	e006      	b.n	80006c6 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80006b8:	4905      	ldr	r1, [pc, #20]	; (80006d0 <RCC_AHBPeriphClockCmd+0x38>)
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <RCC_AHBPeriphClockCmd+0x38>)
 80006bc:	69da      	ldr	r2, [r3, #28]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	43db      	mvns	r3, r3
 80006c2:	4013      	ands	r3, r2
 80006c4:	61cb      	str	r3, [r1, #28]
  }
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	40023800 	.word	0x40023800

080006d4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006e0:	78fb      	ldrb	r3, [r7, #3]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d006      	beq.n	80006f4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80006e6:	4909      	ldr	r1, [pc, #36]	; (800070c <RCC_APB1PeriphClockCmd+0x38>)
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <RCC_APB1PeriphClockCmd+0x38>)
 80006ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80006f2:	e006      	b.n	8000702 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80006f4:	4905      	ldr	r1, [pc, #20]	; (800070c <RCC_APB1PeriphClockCmd+0x38>)
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <RCC_APB1PeriphClockCmd+0x38>)
 80006f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	43db      	mvns	r3, r3
 80006fe:	4013      	ands	r3, r2
 8000700:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	40023800 	.word	0x40023800

08000710 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800071c:	78fb      	ldrb	r3, [r7, #3]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d008      	beq.n	8000734 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	b29b      	uxth	r3, r3
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	b29a      	uxth	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000732:	e007      	b.n	8000744 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	b29b      	uxth	r3, r3
 800073a:	f023 0301 	bic.w	r3, r3, #1
 800073e:	b29a      	uxth	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	801a      	strh	r2, [r3, #0]
  }
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 2, 3, 4, 5, 9, 10 or 11 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop

08000768 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 2, 3, 4 or 5 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8000774:	4618      	mov	r0, r3
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop

08000780 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 2, 3, 4 or 5 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop

08000798 <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80007a4:	2300      	movs	r3, #0
 80007a6:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	81bb      	strh	r3, [r7, #12]
 80007ac:	2300      	movs	r3, #0
 80007ae:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	8a1b      	ldrh	r3, [r3, #16]
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	887b      	ldrh	r3, [r7, #2]
 80007b8:	4013      	ands	r3, r2
 80007ba:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	899b      	ldrh	r3, [r3, #12]
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	887b      	ldrh	r3, [r7, #2]
 80007c4:	4013      	ands	r3, r2
 80007c6:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80007c8:	89bb      	ldrh	r3, [r7, #12]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d005      	beq.n	80007da <TIM_GetITStatus+0x42>
 80007ce:	897b      	ldrh	r3, [r7, #10]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d002      	beq.n	80007da <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80007d4:	2301      	movs	r3, #1
 80007d6:	73fb      	strb	r3, [r7, #15]
 80007d8:	e001      	b.n	80007de <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80007de:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop

080007ec <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80007f8:	887b      	ldrh	r3, [r7, #2]
 80007fa:	43db      	mvns	r3, r3
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	821a      	strh	r2, [r3, #16]
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that 
  *        contains the configuration information for the specified USART peripheral.
  * @retval None.
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }
   
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	8a1b      	ldrh	r3, [r3, #16]
 800082a:	b29b      	uxth	r3, r3
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000830:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000834:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	88db      	ldrh	r3, [r3, #6]
 800083a:	461a      	mov	r2, r3
 800083c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083e:	4313      	orrs	r3, r2
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000844:	b29a      	uxth	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	899b      	ldrh	r3, [r3, #12]
 800084e:	b29b      	uxth	r3, r3
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000854:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000858:	f023 030c 	bic.w	r3, r3, #12
 800085c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	889a      	ldrh	r2, [r3, #4]
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	891b      	ldrh	r3, [r3, #8]
 8000866:	4313      	orrs	r3, r2
 8000868:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800086e:	4313      	orrs	r3, r2
 8000870:	b29b      	uxth	r3, r3
 8000872:	461a      	mov	r2, r3
 8000874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000876:	4313      	orrs	r3, r2
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800087a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087c:	b29a      	uxth	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	8a9b      	ldrh	r3, [r3, #20]
 8000886:	b29b      	uxth	r3, r3
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000890:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	899b      	ldrh	r3, [r3, #12]
 8000896:	461a      	mov	r2, r3
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	4313      	orrs	r3, r2
 800089c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fe1a 	bl	80004e4 <RCC_GetClocksFreq>
  if (USARTx == USART1) 
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a2e      	ldr	r2, [pc, #184]	; (800096c <USART_Init+0x160>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d102      	bne.n	80008be <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	623b      	str	r3, [r7, #32]
 80008bc:	e001      	b.n	80008c2 <USART_Init+0xb6>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	623b      	str	r3, [r7, #32]
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	899b      	ldrh	r3, [r3, #12]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	b21b      	sxth	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	da0c      	bge.n	80008e8 <USART_Init+0xdc>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80008ce:	6a3a      	ldr	r2, [r7, #32]
 80008d0:	4613      	mov	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	4413      	add	r3, r2
 80008d6:	009a      	lsls	r2, r3, #2
 80008d8:	441a      	add	r2, r3
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e4:	61fb      	str	r3, [r7, #28]
 80008e6:	e00b      	b.n	8000900 <USART_Init+0xf4>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80008e8:	6a3a      	ldr	r2, [r7, #32]
 80008ea:	4613      	mov	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	4413      	add	r3, r2
 80008f0:	009a      	lsls	r2, r3, #2
 80008f2:	441a      	add	r2, r3
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fe:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <USART_Init+0x164>)
 8000904:	fba2 2303 	umull	r2, r3, r2, r3
 8000908:	095b      	lsrs	r3, r3, #5
 800090a:	011b      	lsls	r3, r3, #4
 800090c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	2264      	movs	r2, #100	; 0x64
 8000914:	fb02 f303 	mul.w	r3, r2, r3
 8000918:	69fa      	ldr	r2, [r7, #28]
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	899b      	ldrh	r3, [r3, #12]
 8000922:	b29b      	uxth	r3, r3
 8000924:	b21b      	sxth	r3, r3
 8000926:	2b00      	cmp	r3, #0
 8000928:	da0c      	bge.n	8000944 <USART_Init+0x138>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	3332      	adds	r3, #50	; 0x32
 8000930:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <USART_Init+0x164>)
 8000932:	fba2 2303 	umull	r2, r3, r2, r3
 8000936:	095b      	lsrs	r3, r3, #5
 8000938:	f003 0307 	and.w	r3, r3, #7
 800093c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800093e:	4313      	orrs	r3, r2
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
 8000942:	e00b      	b.n	800095c <USART_Init+0x150>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	011b      	lsls	r3, r3, #4
 8000948:	3332      	adds	r3, #50	; 0x32
 800094a:	4a09      	ldr	r2, [pc, #36]	; (8000970 <USART_Init+0x164>)
 800094c:	fba2 2303 	umull	r2, r3, r2, r3
 8000950:	095b      	lsrs	r3, r3, #5
 8000952:	f003 030f 	and.w	r3, r3, #15
 8000956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000958:	4313      	orrs	r3, r2
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  }
 
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 800095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095e:	b29a      	uxth	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	811a      	strh	r2, [r3, #8]
}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	; 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40013800 	.word	0x40013800
 8000970:	51eb851f 	.word	0x51eb851f

08000974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000980:	78fb      	ldrb	r3, [r7, #3]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d008      	beq.n	8000998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	899b      	ldrh	r3, [r3, #12]
 800098a:	b29b      	uxth	r3, r3
 800098c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000990:	b29a      	uxth	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000996:	e007      	b.n	80009a8 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	899b      	ldrh	r3, [r3, #12]
 800099c:	b29b      	uxth	r3, r3
 800099e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	819a      	strh	r2, [r3, #12]
  }
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None.
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	460b      	mov	r3, r1
 80009be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80009c0:	887b      	ldrh	r3, [r7, #2]
 80009c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	809a      	strh	r2, [r3, #4]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	889b      	ldrh	r3, [r3, #4]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009ea:	b29b      	uxth	r3, r3
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b087      	sub	sp, #28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	460b      	mov	r3, r1
 8000a02:	807b      	strh	r3, [r7, #2]
 8000a04:	4613      	mov	r3, r2
 8000a06:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000a1c:	887b      	ldrh	r3, [r7, #2]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	095b      	lsrs	r3, r3, #5
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000a26:	887b      	ldrh	r3, [r7, #2]
 8000a28:	f003 031f 	and.w	r3, r3, #31
 8000a2c:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d103      	bne.n	8000a46 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	330c      	adds	r3, #12
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	e009      	b.n	8000a5a <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d103      	bne.n	8000a54 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	3310      	adds	r3, #16
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	e002      	b.n	8000a5a <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	3314      	adds	r3, #20
 8000a58:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000a5a:	787b      	ldrb	r3, [r7, #1]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d006      	beq.n	8000a6e <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	6811      	ldr	r1, [r2, #0]
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000a6c:	e006      	b.n	8000a7c <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	6811      	ldr	r1, [r2, #0]
 8000a74:	68ba      	ldr	r2, [r7, #8]
 8000a76:	43d2      	mvns	r2, r2
 8000a78:	400a      	ands	r2, r1
 8000a7a:	601a      	str	r2, [r3, #0]
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	371c      	adds	r7, #28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag.
  *     @arg USART_FLAG_PE:   Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000a94:	2300      	movs	r3, #0
 8000a96:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	887b      	ldrh	r3, [r7, #2]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	73fb      	strb	r3, [r7, #15]
 8000aac:	e001      	b.n	8000ab2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <USART_ClearFlag>:
  * @note TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8000acc:	887b      	ldrh	r3, [r7, #2]
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	801a      	strh	r2, [r3, #0]
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b087      	sub	sp, #28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000afc:	887b      	ldrh	r3, [r7, #2]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	095b      	lsrs	r3, r3, #5
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000b06:	887b      	ldrh	r3, [r7, #2]
 8000b08:	f003 031f 	and.w	r3, r3, #31
 8000b0c:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000b0e:	2201      	movs	r2, #1
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d107      	bne.n	8000b2e <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	899b      	ldrh	r3, [r3, #12]
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	461a      	mov	r2, r3
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	e011      	b.n	8000b52 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d107      	bne.n	8000b44 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	8a1b      	ldrh	r3, [r3, #16]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	e006      	b.n	8000b52 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	8a9b      	ldrh	r3, [r3, #20]
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000b52:	887b      	ldrh	r3, [r7, #2]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d005      	beq.n	8000b84 <USART_GetITStatus+0xa4>
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d002      	beq.n	8000b84 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	74fb      	strb	r3, [r7, #19]
 8000b82:	e001      	b.n	8000b88 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000b84:	2300      	movs	r3, #0
 8000b86:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000b88:	7cfb      	ldrb	r3, [r7, #19]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	371c      	adds	r7, #28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <USART_ClearITPendingBit>:
  * @note TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	81fb      	strh	r3, [r7, #14]
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000ba8:	887b      	ldrh	r3, [r7, #2]
 8000baa:	0a1b      	lsrs	r3, r3, #8
 8000bac:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000bae:	89fb      	ldrh	r3, [r7, #14]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8000bb8:	89bb      	ldrh	r3, [r7, #12]
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	801a      	strh	r2, [r3, #0]
}
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <initUSART2>:
 */


#include <bluetooth.h>

void initUSART2(){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0

	running = 0;
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <initUSART2+0xc0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
	change_goal_request = 0;
 8000bd8:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <initUSART2+0xc4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
	goal_bearing = 0;
 8000bde:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <initUSART2+0xc8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000be4:	2101      	movs	r1, #1
 8000be6:	2001      	movs	r0, #1
 8000be8:	f7ff fd56 	bl	8000698 <RCC_AHBPeriphClockCmd>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8000bec:	2207      	movs	r2, #7
 8000bee:	2102      	movs	r1, #2
 8000bf0:	4829      	ldr	r0, [pc, #164]	; (8000c98 <initUSART2+0xcc>)
 8000bf2:	f7ff fc2f 	bl	8000454 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 8000bf6:	2207      	movs	r2, #7
 8000bf8:	2103      	movs	r1, #3
 8000bfa:	4827      	ldr	r0, [pc, #156]	; (8000c98 <initUSART2+0xcc>)
 8000bfc:	f7ff fc2a 	bl	8000454 <GPIO_PinAFConfig>

	GPIO_InitTypeDef GPIO_usrt;

	GPIO_usrt.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8000c00:	230c      	movs	r3, #12
 8000c02:	61bb      	str	r3, [r7, #24]
	GPIO_usrt.GPIO_Mode = GPIO_Mode_AF;
 8000c04:	2302      	movs	r3, #2
 8000c06:	773b      	strb	r3, [r7, #28]
	GPIO_usrt.GPIO_OType = GPIO_OType_PP;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	77bb      	strb	r3, [r7, #30]
	GPIO_usrt.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	77fb      	strb	r3, [r7, #31]
	GPIO_usrt.GPIO_Speed = GPIO_Speed_40MHz;
 8000c10:	2303      	movs	r3, #3
 8000c12:	777b      	strb	r3, [r7, #29]

	GPIO_Init(GPIOA,&GPIO_usrt);
 8000c14:	f107 0318 	add.w	r3, r7, #24
 8000c18:	4619      	mov	r1, r3
 8000c1a:	481f      	ldr	r0, [pc, #124]	; (8000c98 <initUSART2+0xcc>)
 8000c1c:	f7ff fb20 	bl	8000260 <GPIO_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000c20:	2101      	movs	r1, #1
 8000c22:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c26:	f7ff fd55 	bl	80006d4 <RCC_APB1PeriphClockCmd>

	USART_InitTypeDef USART_InitStructure;
	USART_InitStructure.USART_BaudRate = 9600;
 8000c2a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000c2e:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000c30:	2300      	movs	r3, #0
 8000c32:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000c40:	230c      	movs	r3, #12
 8000c42:	827b      	strh	r3, [r7, #18]
	USART_Init(USART2, &USART_InitStructure);
 8000c44:	f107 0308 	add.w	r3, r7, #8
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4814      	ldr	r0, [pc, #80]	; (8000c9c <initUSART2+0xd0>)
 8000c4c:	f7ff fdde 	bl	800080c <USART_Init>
	USART_Cmd(USART2, ENABLE);
 8000c50:	2101      	movs	r1, #1
 8000c52:	4812      	ldr	r0, [pc, #72]	; (8000c9c <initUSART2+0xd0>)
 8000c54:	f7ff fe8e 	bl	8000974 <USART_Cmd>

	//interrupt
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f240 5125 	movw	r1, #1317	; 0x525
 8000c5e:	480f      	ldr	r0, [pc, #60]	; (8000c9c <initUSART2+0xd0>)
 8000c60:	f7ff feca 	bl	80009f8 <USART_ITConfig>
	//USART_ITConfig(USART2, USART_IT_TC, ENABLE);

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8000c64:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000c68:	f7ff fa88 	bl	800017c <NVIC_PriorityGroupConfig>

	  /* Enable the USARTx Interrupt */
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8000c6c:	2326      	movs	r3, #38	; 0x26
 8000c6e:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8000c70:	2301      	movs	r3, #1
 8000c72:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fa8e 	bl	80001a0 <NVIC_Init>
}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	2000005c 	.word	0x2000005c
 8000c90:	20000060 	.word	0x20000060
 8000c94:	20000058 	.word	0x20000058
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	40004400 	.word	0x40004400

08000ca0 <PutcUART2>:

void PutcUART2(char ch){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
	USART_SendData(USART2, (uint8_t) ch);
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <PutcUART2+0x20>)
 8000cb2:	f7ff fe7f 	bl	80009b4 <USART_SendData>

}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40004400 	.word	0x40004400

08000cc4 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000cca:	f240 5125 	movw	r1, #1317	; 0x525
 8000cce:	481b      	ldr	r0, [pc, #108]	; (8000d3c <USART2_IRQHandler+0x78>)
 8000cd0:	f7ff ff06 	bl	8000ae0 <USART_GetITStatus>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d02c      	beq.n	8000d34 <USART2_IRQHandler+0x70>
	{
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8000cda:	f240 5125 	movw	r1, #1317	; 0x525
 8000cde:	4817      	ldr	r0, [pc, #92]	; (8000d3c <USART2_IRQHandler+0x78>)
 8000ce0:	f7ff ff58 	bl	8000b94 <USART_ClearITPendingBit>
		char znak = USART_ReceiveData(USART2);
 8000ce4:	4815      	ldr	r0, [pc, #84]	; (8000d3c <USART2_IRQHandler+0x78>)
 8000ce6:	f7ff fe77 	bl	80009d8 <USART_ReceiveData>
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]

		//ak v predoslom byte bola poziadavka na zmenu ziadaneho uhla,
		//tak ciel zmeni ak dalsi byte je v zadanom rozsahu
		if (change_goal_request){
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <USART2_IRQHandler+0x7c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d008      	beq.n	8000d08 <USART2_IRQHandler+0x44>

			if (znak >= 0 && znak <= GOAL_RANGE)
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2b08      	cmp	r3, #8
 8000cfa:	d802      	bhi.n	8000d02 <USART2_IRQHandler+0x3e>
			goal_bearing = znak;
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	4a11      	ldr	r2, [pc, #68]	; (8000d44 <USART2_IRQHandler+0x80>)
 8000d00:	6013      	str	r3, [r2, #0]

			change_goal_request = 0;
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <USART2_IRQHandler+0x7c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
		}

		switch (znak){
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	2baa      	cmp	r3, #170	; 0xaa
 8000d0c:	d002      	beq.n	8000d14 <USART2_IRQHandler+0x50>
 8000d0e:	2bbb      	cmp	r3, #187	; 0xbb
 8000d10:	d00c      	beq.n	8000d2c <USART2_IRQHandler+0x68>
		if (retazec[counter] != '\0'){
			PutcUART2(retazec[counter]);
			counter++;
		}*/
    }
}
 8000d12:	e00f      	b.n	8000d34 <USART2_IRQHandler+0x70>
			change_goal_request = 0;
		}

		switch (znak){
		case 0xAA:   // vypinanie/zapinanie pohybu
			if (running)
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <USART2_IRQHandler+0x84>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <USART2_IRQHandler+0x60>
					running = 0;
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <USART2_IRQHandler+0x84>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
				else running = 1;
			break;
 8000d22:	e007      	b.n	8000d34 <USART2_IRQHandler+0x70>

		switch (znak){
		case 0xAA:   // vypinanie/zapinanie pohybu
			if (running)
					running = 0;
				else running = 1;
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <USART2_IRQHandler+0x84>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	601a      	str	r2, [r3, #0]
			break;
 8000d2a:	e003      	b.n	8000d34 <USART2_IRQHandler+0x70>
		case 0xBB: //poziadavka na zmenu ciela, v dalsom byte sa precita, aky bude novy ciel
			change_goal_request = 1;
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <USART2_IRQHandler+0x7c>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	601a      	str	r2, [r3, #0]
		if (retazec[counter] != '\0'){
			PutcUART2(retazec[counter]);
			counter++;
		}*/
    }
}
 8000d32:	e7ff      	b.n	8000d34 <USART2_IRQHandler+0x70>
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40004400 	.word	0x40004400
 8000d40:	20000060 	.word	0x20000060
 8000d44:	20000058 	.word	0x20000058
 8000d48:	2000005c 	.word	0x2000005c

08000d4c <sendValue>:

void sendValue(){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0

	PutcUART2(goal_bearing);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <sendValue+0x30>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ffa1 	bl	8000ca0 <PutcUART2>

	//sleep
	for (int i = 0; i < 50000; i++);
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	e002      	b.n	8000d6a <sendValue+0x1e>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3301      	adds	r3, #1
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000d70:	4293      	cmp	r3, r2
 8000d72:	ddf7      	ble.n	8000d64 <sendValue+0x18>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000058 	.word	0x20000058

08000d80 <init>:
 */

#include <bug_0.h>


int init(){
 8000d80:	b598      	push	{r3, r4, r7, lr}
 8000d82:	af00      	add	r7, sp, #0

	//inicializacia premennych
	obstacle_forward = 0;
 8000d84:	4a11      	ldr	r2, [pc, #68]	; (8000dcc <init+0x4c>)
 8000d86:	f04f 0300 	mov.w	r3, #0
 8000d8a:	f04f 0400 	mov.w	r4, #0
 8000d8e:	e882 0018 	stmia.w	r2, {r3, r4}
	obstacleRight = 0;
 8000d92:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <init+0x50>)
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	f04f 0400 	mov.w	r4, #0
 8000d9c:	e882 0018 	stmia.w	r2, {r3, r4}
	obstacleLeft = 0;
 8000da0:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <init+0x54>)
 8000da2:	f04f 0300 	mov.w	r3, #0
 8000da6:	f04f 0400 	mov.w	r4, #0
 8000daa:	e882 0018 	stmia.w	r2, {r3, r4}
	bearing = 0;
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <init+0x58>)
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	f04f 0400 	mov.w	r4, #0
 8000db8:	e882 0018 	stmia.w	r2, {r3, r4}
	bearing_error = 0;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <init+0x5c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]

	  initUSART2();
 8000dc2:	f7ff ff03 	bl	8000bcc <initUSART2>
	//inicializacia zvukacov, kompasu a motorov
	return 1;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	bd98      	pop	{r3, r4, r7, pc}
 8000dcc:	20000068 	.word	0x20000068
 8000dd0:	20000070 	.word	0x20000070
 8000dd4:	20000080 	.word	0x20000080
 8000dd8:	20000088 	.word	0x20000088
 8000ddc:	20000078 	.word	0x20000078

08000de0 <TIM6_IRQHandler>:
	return 0;
}

//spracovanie prerusenia z TIM6, casovaca pre kontrolku
void TIM6_IRQHandler(void)
{
 8000de0:	b598      	push	{r3, r4, r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) == SET)
 8000de4:	2101      	movs	r1, #1
 8000de6:	480c      	ldr	r0, [pc, #48]	; (8000e18 <TIM6_IRQHandler+0x38>)
 8000de8:	f7ff fcd6 	bl	8000798 <TIM_GetITStatus>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d10f      	bne.n	8000e12 <TIM6_IRQHandler+0x32>
	{
		gTimeStamp++;
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <TIM6_IRQHandler+0x3c>)
 8000df4:	cb18      	ldmia	r3, {r3, r4}
 8000df6:	3301      	adds	r3, #1
 8000df8:	f144 0400 	adc.w	r4, r4, #0
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <TIM6_IRQHandler+0x3c>)
 8000dfe:	e882 0018 	stmia.w	r2, {r3, r4}
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);//toggle LED PA5
 8000e02:	2120      	movs	r1, #32
 8000e04:	4806      	ldr	r0, [pc, #24]	; (8000e20 <TIM6_IRQHandler+0x40>)
 8000e06:	f7ff fb11 	bl	800042c <GPIO_ToggleBits>
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <TIM6_IRQHandler+0x38>)
 8000e0e:	f7ff fced 	bl	80007ec <TIM_ClearITPendingBit>
	}
}
 8000e12:	bf00      	nop
 8000e14:	bd98      	pop	{r3, r4, r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40001000 	.word	0x40001000
 8000e1c:	20000090 	.word	0x20000090
 8000e20:	40020000 	.word	0x40020000

08000e24 <main>:
**
**===========================================================================
*/
int main(void)

{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	init();
 8000e28:	f7ff ffaa 	bl	8000d80 <init>
	 /* if (running)
		  run();
	  else stop();*/


	sendValue();
 8000e2c:	f7ff ff8e 	bl	8000d4c <sendValue>
	//PutcUART2(48);
  }
 8000e30:	e7fc      	b.n	8000e2c <main+0x8>
 8000e32:	bf00      	nop

08000e34 <TIM4_IRQHandler>:
	if(a<-5){a=-5;}
	LM=74+a;
}

void TIM4_IRQHandler()
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0


    	if (TIM_GetITStatus(TIM4, TIM_IT_Update) == SET)
 8000e38:	2101      	movs	r1, #1
 8000e3a:	482f      	ldr	r0, [pc, #188]	; (8000ef8 <TIM4_IRQHandler+0xc4>)
 8000e3c:	f7ff fcac 	bl	8000798 <TIM_GetITStatus>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d155      	bne.n	8000ef2 <TIM4_IRQHandler+0xbe>
    		{


    		counter++;
 8000e46:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <TIM4_IRQHandler+0xc8>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	4a2b      	ldr	r2, [pc, #172]	; (8000efc <TIM4_IRQHandler+0xc8>)
 8000e4e:	6013      	str	r3, [r2, #0]
    	    	counter2++;
 8000e50:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <TIM4_IRQHandler+0xcc>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	3301      	adds	r3, #1
 8000e56:	4a2a      	ldr	r2, [pc, #168]	; (8000f00 <TIM4_IRQHandler+0xcc>)
 8000e58:	6013      	str	r3, [r2, #0]


       if(stat==1){
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <TIM4_IRQHandler+0xd0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d110      	bne.n	8000e84 <TIM4_IRQHandler+0x50>

        if(counter>=LM) {
 8000e62:	4b26      	ldr	r3, [pc, #152]	; (8000efc <TIM4_IRQHandler+0xc8>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	4b28      	ldr	r3, [pc, #160]	; (8000f08 <TIM4_IRQHandler+0xd4>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	db19      	blt.n	8000ea2 <TIM4_IRQHandler+0x6e>
        	stat=0;
 8000e6e:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <TIM4_IRQHandler+0xd0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
        	GPIO_ResetBits(GPIOB, GPIO_Pin_6);
 8000e74:	2140      	movs	r1, #64	; 0x40
 8000e76:	4825      	ldr	r0, [pc, #148]	; (8000f0c <TIM4_IRQHandler+0xd8>)
 8000e78:	f7ff fab2 	bl	80003e0 <GPIO_ResetBits>
        	counter=0;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <TIM4_IRQHandler+0xc8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	e00e      	b.n	8000ea2 <TIM4_IRQHandler+0x6e>
        }

       }
        else {

        	if(counter>=2000) {
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <TIM4_IRQHandler+0xc8>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e8c:	db09      	blt.n	8000ea2 <TIM4_IRQHandler+0x6e>
        		stat=1;GPIO_SetBits(GPIOB, GPIO_Pin_6);
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <TIM4_IRQHandler+0xd0>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	2140      	movs	r1, #64	; 0x40
 8000e96:	481d      	ldr	r0, [pc, #116]	; (8000f0c <TIM4_IRQHandler+0xd8>)
 8000e98:	f7ff fa94 	bl	80003c4 <GPIO_SetBits>
        		counter=0;
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <TIM4_IRQHandler+0xc8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
        	}
        }

      if(stat2==1){
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <TIM4_IRQHandler+0xdc>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d110      	bne.n	8000ecc <TIM4_IRQHandler+0x98>

                if(counter2>=PM) {
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <TIM4_IRQHandler+0xcc>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <TIM4_IRQHandler+0xe0>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	db19      	blt.n	8000eea <TIM4_IRQHandler+0xb6>
                	stat2=0;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <TIM4_IRQHandler+0xdc>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
                	GPIO_ResetBits(GPIOA, GPIO_Pin_7);
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	4816      	ldr	r0, [pc, #88]	; (8000f18 <TIM4_IRQHandler+0xe4>)
 8000ec0:	f7ff fa8e 	bl	80003e0 <GPIO_ResetBits>
                	counter2=0;
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <TIM4_IRQHandler+0xcc>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	e00e      	b.n	8000eea <TIM4_IRQHandler+0xb6>
                }
      }
       else {

             if(counter2>=2000) {
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <TIM4_IRQHandler+0xcc>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ed4:	db09      	blt.n	8000eea <TIM4_IRQHandler+0xb6>
            	 stat2=1;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <TIM4_IRQHandler+0xdc>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	601a      	str	r2, [r3, #0]
            	 GPIO_SetBits(GPIOA, GPIO_Pin_7);
 8000edc:	2180      	movs	r1, #128	; 0x80
 8000ede:	480e      	ldr	r0, [pc, #56]	; (8000f18 <TIM4_IRQHandler+0xe4>)
 8000ee0:	f7ff fa70 	bl	80003c4 <GPIO_SetBits>
            	 counter2=0;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <TIM4_IRQHandler+0xcc>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]





      TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 8000eea:	2101      	movs	r1, #1
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <TIM4_IRQHandler+0xc4>)
 8000eee:	f7ff fc7d 	bl	80007ec <TIM_ClearITPendingBit>
    }
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40000800 	.word	0x40000800
 8000efc:	2000004c 	.word	0x2000004c
 8000f00:	20000050 	.word	0x20000050
 8000f04:	2000001c 	.word	0x2000001c
 8000f08:	20000024 	.word	0x20000024
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	20000020 	.word	0x20000020
 8000f14:	20000028 	.word	0x20000028
 8000f18:	40020000 	.word	0x40020000

08000f1c <leftSensorMeasure>:
	GPIO_PinAFConfig(CAPTURE_PORT, FORWARD_CAP_PINSOURCE, GPIO_AF_TIM3);
}

//spustenie merania laveho dialkomeru
void leftSensorMeasure(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 8000f20:	2101      	movs	r1, #1
 8000f22:	4808      	ldr	r0, [pc, #32]	; (8000f44 <leftSensorMeasure+0x28>)
 8000f24:	f7ff fbf4 	bl	8000710 <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, LEFT_TRIG_PIN, Bit_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2e:	4806      	ldr	r0, [pc, #24]	; (8000f48 <leftSensorMeasure+0x2c>)
 8000f30:	f7ff fa64 	bl	80003fc <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	LeftSensorCaptureStruc.captureStep = 0;
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <leftSensorMeasure+0x30>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = leftSensorCaptureHandler;
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <leftSensorMeasure+0x34>)
 8000f3c:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <leftSensorMeasure+0x38>)
 8000f3e:	601a      	str	r2, [r3, #0]
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40001400 	.word	0x40001400
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	200000b0 	.word	0x200000b0
 8000f50:	200000d4 	.word	0x200000d4
 8000f54:	080010d5 	.word	0x080010d5

08000f58 <rightSensorMeasure>:
//spustenie merania praveho dialkomeru
void rightSensorMeasure(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4808      	ldr	r0, [pc, #32]	; (8000f80 <rightSensorMeasure+0x28>)
 8000f60:	f7ff fbd6 	bl	8000710 <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, RIGHT_TRIG_PIN, Bit_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f6a:	4806      	ldr	r0, [pc, #24]	; (8000f84 <rightSensorMeasure+0x2c>)
 8000f6c:	f7ff fa46 	bl	80003fc <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	RightSensorCaptureStruc.captureStep = 0;
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <rightSensorMeasure+0x30>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = rightSensorCaptureHandler;
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <rightSensorMeasure+0x34>)
 8000f78:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <rightSensorMeasure+0x38>)
 8000f7a:	601a      	str	r2, [r3, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40001400 	.word	0x40001400
 8000f84:	40020000 	.word	0x40020000
 8000f88:	200000a0 	.word	0x200000a0
 8000f8c:	200000d4 	.word	0x200000d4
 8000f90:	08001135 	.word	0x08001135

08000f94 <forwardSensorMeasure>:
//spustenie memrania predneho dialkomeru
void forwardSensorMeasure(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	//spustenie casovaca
	TIM_Cmd(TRIG_TIM, ENABLE);
 8000f98:	2101      	movs	r1, #1
 8000f9a:	4808      	ldr	r0, [pc, #32]	; (8000fbc <forwardSensorMeasure+0x28>)
 8000f9c:	f7ff fbb8 	bl	8000710 <TIM_Cmd>
	//spustenie trig impulzu
	GPIO_WriteBit(TRIG_PORT, FORWARD_TRIG_PIN, Bit_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <forwardSensorMeasure+0x2c>)
 8000fa8:	f7ff fa28 	bl	80003fc <GPIO_WriteBit>
	//nulovanie CaptureStep ak by nahodou meranie zblblo
	ForwardSensorCaptureStruc.captureStep = 0;
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <forwardSensorMeasure+0x30>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
	//pridelenie funkcie spracovanie prerusenia capture
	sensorCaptureHandler = forwardSensorCaptureHandler;
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <forwardSensorMeasure+0x34>)
 8000fb4:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <forwardSensorMeasure+0x38>)
 8000fb6:	601a      	str	r2, [r3, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40001400 	.word	0x40001400
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	200000c0 	.word	0x200000c0
 8000fc8:	200000d4 	.word	0x200000d4
 8000fcc:	08001195 	.word	0x08001195

08000fd0 <TIM7_IRQHandler>:

//handlery bude treba dat do suboru, ktory bude urcovat veci specificke pre dany hardver
//samotne funkcie ktore ma vykonat ale ostanu tu
//spracovanie prerusenia z TRIG_TIM, casovac pre spustaci impulz dialkomeru
void TIM7_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	//tez do samostatnej funkcie alebo mozno bude stacit #define fjdkkdf nazov funkcie
	if (TIM_GetITStatus(TRIG_TIM, TIM_IT_Update) == SET)
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	481e      	ldr	r0, [pc, #120]	; (8001050 <TIM7_IRQHandler+0x80>)
 8000fd8:	f7ff fbde 	bl	8000798 <TIM_GetITStatus>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d133      	bne.n	800104a <TIM7_IRQHandler+0x7a>
	{
		TIM_Cmd(TRIG_TIM, DISABLE);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	481a      	ldr	r0, [pc, #104]	; (8001050 <TIM7_IRQHandler+0x80>)
 8000fe6:	f7ff fb93 	bl	8000710 <TIM_Cmd>
		//vypnutie impulzu na prislusnom spustacom pine
		if (GPIO_ReadOutputDataBit(TRIG_PORT, LEFT_TRIG_PIN) == 1)
 8000fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fee:	4819      	ldr	r0, [pc, #100]	; (8001054 <TIM7_IRQHandler+0x84>)
 8000ff0:	f7ff f9cc 	bl	800038c <GPIO_ReadOutputDataBit>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d106      	bne.n	8001008 <TIM7_IRQHandler+0x38>
		{
			GPIO_WriteBit(TRIG_PORT, LEFT_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu left
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001000:	4814      	ldr	r0, [pc, #80]	; (8001054 <TIM7_IRQHandler+0x84>)
 8001002:	f7ff f9fb 	bl	80003fc <GPIO_WriteBit>
 8001006:	e01c      	b.n	8001042 <TIM7_IRQHandler+0x72>
		}
		else if (GPIO_ReadOutputDataBit(TRIG_PORT, RIGHT_TRIG_PIN) == 1)
 8001008:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800100c:	4811      	ldr	r0, [pc, #68]	; (8001054 <TIM7_IRQHandler+0x84>)
 800100e:	f7ff f9bd 	bl	800038c <GPIO_ReadOutputDataBit>
 8001012:	4603      	mov	r3, r0
 8001014:	2b01      	cmp	r3, #1
 8001016:	d106      	bne.n	8001026 <TIM7_IRQHandler+0x56>
		{
			GPIO_WriteBit(TRIG_PORT, RIGHT_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu right
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <TIM7_IRQHandler+0x84>)
 8001020:	f7ff f9ec 	bl	80003fc <GPIO_WriteBit>
 8001024:	e00d      	b.n	8001042 <TIM7_IRQHandler+0x72>
		}
		else if (GPIO_ReadOutputDataBit(TRIG_PORT, FORWARD_TRIG_PIN) == 1)
 8001026:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800102a:	480a      	ldr	r0, [pc, #40]	; (8001054 <TIM7_IRQHandler+0x84>)
 800102c:	f7ff f9ae 	bl	800038c <GPIO_ReadOutputDataBit>
 8001030:	4603      	mov	r3, r0
 8001032:	2b01      	cmp	r3, #1
 8001034:	d105      	bne.n	8001042 <TIM7_IRQHandler+0x72>
		{
			GPIO_WriteBit(TRIG_PORT, FORWARD_TRIG_PIN, Bit_RESET);//ukoncenie trig impulzu forward
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <TIM7_IRQHandler+0x84>)
 800103e:	f7ff f9dd 	bl	80003fc <GPIO_WriteBit>
		}
		TIM_ClearITPendingBit(TRIG_TIM, TIM_IT_Update);
 8001042:	2101      	movs	r1, #1
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <TIM7_IRQHandler+0x80>)
 8001046:	f7ff fbd1 	bl	80007ec <TIM_ClearITPendingBit>
	}
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40001400 	.word	0x40001400
 8001054:	40020000 	.word	0x40020000

08001058 <TIM3_IRQHandler>:
//spracovanie prerusenia z TIM3, casovac pre meranie dlzky impulzu z dialialkomerov
void TIM3_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	//spustenie spracovania prerusenia CAPTURE_TIM pre prislusny senzor
	if (sensorCaptureHandler != 0)
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <TIM3_IRQHandler+0x18>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d002      	beq.n	800106a <TIM3_IRQHandler+0x12>
	{
		sensorCaptureHandler();
 8001064:	4b02      	ldr	r3, [pc, #8]	; (8001070 <TIM3_IRQHandler+0x18>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4798      	blx	r3
	}
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200000d4 	.word	0x200000d4

08001074 <TIM10_IRQHandler>:
//spracovanie prerusenia z casovaca pre volanie merania vzdialenosti
void TIM10_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(SENSOR_CALL_TIM, TIM_IT_Update) == SET)
 8001078:	2101      	movs	r1, #1
 800107a:	4814      	ldr	r0, [pc, #80]	; (80010cc <TIM10_IRQHandler+0x58>)
 800107c:	f7ff fb8c 	bl	8000798 <TIM_GetITStatus>
 8001080:	4603      	mov	r3, r0
 8001082:	2b01      	cmp	r3, #1
 8001084:	d120      	bne.n	80010c8 <TIM10_IRQHandler+0x54>
	{
		//volanie merania senzora, ktory je na rade
		switch (selectSensor)
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <TIM10_IRQHandler+0x5c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d006      	beq.n	800109c <TIM10_IRQHandler+0x28>
 800108e:	2b02      	cmp	r3, #2
 8001090:	d007      	beq.n	80010a2 <TIM10_IRQHandler+0x2e>
 8001092:	2b00      	cmp	r3, #0
 8001094:	d108      	bne.n	80010a8 <TIM10_IRQHandler+0x34>
		{
		case 0:
			leftSensorMeasure();
 8001096:	f7ff ff41 	bl	8000f1c <leftSensorMeasure>
			break;
 800109a:	e005      	b.n	80010a8 <TIM10_IRQHandler+0x34>
		case 1:
			forwardSensorMeasure();
 800109c:	f7ff ff7a 	bl	8000f94 <forwardSensorMeasure>
			break;
 80010a0:	e002      	b.n	80010a8 <TIM10_IRQHandler+0x34>
		case 2:
			rightSensorMeasure();
 80010a2:	f7ff ff59 	bl	8000f58 <rightSensorMeasure>
			break;
 80010a6:	bf00      	nop
		}
		//inkrementovanie volaneho senzora
		selectSensor++;
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <TIM10_IRQHandler+0x5c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <TIM10_IRQHandler+0x5c>)
 80010b0:	6013      	str	r3, [r2, #0]
		if (selectSensor > 2)
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <TIM10_IRQHandler+0x5c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	dd02      	ble.n	80010c0 <TIM10_IRQHandler+0x4c>
		{
			selectSensor = 0;
 80010ba:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <TIM10_IRQHandler+0x5c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
		}
		TIM_ClearITPendingBit(SENSOR_CALL_TIM, TIM_IT_Update);
 80010c0:	2101      	movs	r1, #1
 80010c2:	4802      	ldr	r0, [pc, #8]	; (80010cc <TIM10_IRQHandler+0x58>)
 80010c4:	f7ff fb92 	bl	80007ec <TIM_ClearITPendingBit>
	}
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40010c00 	.word	0x40010c00
 80010d0:	20000054 	.word	0x20000054

080010d4 <leftSensorCaptureHandler>:

//meranie dlzky impulzu lavy senzor
void leftSensorCaptureHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, LEFT_TIM_CC) != RESET)
 80010d8:	2108      	movs	r1, #8
 80010da:	4814      	ldr	r0, [pc, #80]	; (800112c <leftSensorCaptureHandler+0x58>)
 80010dc:	f7ff fb5c 	bl	8000798 <TIM_GetITStatus>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d01f      	beq.n	8001126 <leftSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, LEFT_TIM_CC);
 80010e6:	2108      	movs	r1, #8
 80010e8:	4810      	ldr	r0, [pc, #64]	; (800112c <leftSensorCaptureHandler+0x58>)
 80010ea:	f7ff fb7f 	bl	80007ec <TIM_ClearITPendingBit>

		if(LeftSensorCaptureStruc.captureStep == 0)
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <leftSensorCaptureHandler+0x5c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d109      	bne.n	800110a <leftSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			LeftSensorCaptureStruc.risingTimeCapturing = LEFT_TIM_GETCAPTURE;
 80010f6:	480d      	ldr	r0, [pc, #52]	; (800112c <leftSensorCaptureHandler+0x58>)
 80010f8:	f7ff fb36 	bl	8000768 <TIM_GetCapture3>
 80010fc:	4602      	mov	r2, r0
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <leftSensorCaptureHandler+0x5c>)
 8001100:	605a      	str	r2, [r3, #4]
			LeftSensorCaptureStruc.captureStep = 1;
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <leftSensorCaptureHandler+0x5c>)
 8001104:	2201      	movs	r2, #1
 8001106:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			LeftSensorCaptureStruc.fallingTime = LEFT_TIM_GETCAPTURE;
			LeftSensorCaptureStruc.risingTime = LeftSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 8001108:	e00d      	b.n	8001126 <leftSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			LeftSensorCaptureStruc.risingTimeCapturing = LEFT_TIM_GETCAPTURE;
			LeftSensorCaptureStruc.captureStep = 1;
		}
		else if(LeftSensorCaptureStruc.captureStep == 1)
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <leftSensorCaptureHandler+0x5c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d109      	bne.n	8001126 <leftSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			LeftSensorCaptureStruc.fallingTime = LEFT_TIM_GETCAPTURE;
 8001112:	4806      	ldr	r0, [pc, #24]	; (800112c <leftSensorCaptureHandler+0x58>)
 8001114:	f7ff fb28 	bl	8000768 <TIM_GetCapture3>
 8001118:	4602      	mov	r2, r0
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <leftSensorCaptureHandler+0x5c>)
 800111c:	60da      	str	r2, [r3, #12]
			LeftSensorCaptureStruc.risingTime = LeftSensorCaptureStruc.risingTimeCapturing;
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <leftSensorCaptureHandler+0x5c>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	4a03      	ldr	r2, [pc, #12]	; (8001130 <leftSensorCaptureHandler+0x5c>)
 8001124:	6093      	str	r3, [r2, #8]
		}
	}
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40000400 	.word	0x40000400
 8001130:	200000b0 	.word	0x200000b0

08001134 <rightSensorCaptureHandler>:
//meranie dlzky impulzu lavy senzor
void rightSensorCaptureHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, RIGHT_TIM_CC) != RESET)
 8001138:	2102      	movs	r1, #2
 800113a:	4814      	ldr	r0, [pc, #80]	; (800118c <rightSensorCaptureHandler+0x58>)
 800113c:	f7ff fb2c 	bl	8000798 <TIM_GetITStatus>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d01f      	beq.n	8001186 <rightSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, RIGHT_TIM_CC);
 8001146:	2102      	movs	r1, #2
 8001148:	4810      	ldr	r0, [pc, #64]	; (800118c <rightSensorCaptureHandler+0x58>)
 800114a:	f7ff fb4f 	bl	80007ec <TIM_ClearITPendingBit>

		if(RightSensorCaptureStruc.captureStep == 0)
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <rightSensorCaptureHandler+0x5c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d109      	bne.n	800116a <rightSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			RightSensorCaptureStruc.risingTimeCapturing = RIGHT_TIM_GETCAPTURE;
 8001156:	480d      	ldr	r0, [pc, #52]	; (800118c <rightSensorCaptureHandler+0x58>)
 8001158:	f7ff fafa 	bl	8000750 <TIM_GetCapture1>
 800115c:	4602      	mov	r2, r0
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <rightSensorCaptureHandler+0x5c>)
 8001160:	605a      	str	r2, [r3, #4]
			RightSensorCaptureStruc.captureStep = 1;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <rightSensorCaptureHandler+0x5c>)
 8001164:	2201      	movs	r2, #1
 8001166:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			RightSensorCaptureStruc.fallingTime = RIGHT_TIM_GETCAPTURE;
			RightSensorCaptureStruc.risingTime = RightSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 8001168:	e00d      	b.n	8001186 <rightSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			RightSensorCaptureStruc.risingTimeCapturing = RIGHT_TIM_GETCAPTURE;
			RightSensorCaptureStruc.captureStep = 1;
		}
		else if(RightSensorCaptureStruc.captureStep == 1)
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <rightSensorCaptureHandler+0x5c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d109      	bne.n	8001186 <rightSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			RightSensorCaptureStruc.fallingTime = RIGHT_TIM_GETCAPTURE;
 8001172:	4806      	ldr	r0, [pc, #24]	; (800118c <rightSensorCaptureHandler+0x58>)
 8001174:	f7ff faec 	bl	8000750 <TIM_GetCapture1>
 8001178:	4602      	mov	r2, r0
 800117a:	4b05      	ldr	r3, [pc, #20]	; (8001190 <rightSensorCaptureHandler+0x5c>)
 800117c:	60da      	str	r2, [r3, #12]
			RightSensorCaptureStruc.risingTime = RightSensorCaptureStruc.risingTimeCapturing;
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <rightSensorCaptureHandler+0x5c>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	4a03      	ldr	r2, [pc, #12]	; (8001190 <rightSensorCaptureHandler+0x5c>)
 8001184:	6093      	str	r3, [r2, #8]
		}
	}
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40000400 	.word	0x40000400
 8001190:	200000a0 	.word	0x200000a0

08001194 <forwardSensorCaptureHandler>:
//meranie dlzky impulzu lavy senzor
void forwardSensorCaptureHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(CAPTURE_TIM, FORWARD_TIM_CC) != RESET)
 8001198:	2110      	movs	r1, #16
 800119a:	4814      	ldr	r0, [pc, #80]	; (80011ec <forwardSensorCaptureHandler+0x58>)
 800119c:	f7ff fafc 	bl	8000798 <TIM_GetITStatus>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d01f      	beq.n	80011e6 <forwardSensorCaptureHandler+0x52>
	{
		//zmaz CAPTURE_TIM priznak prerusenia
		TIM_ClearITPendingBit(CAPTURE_TIM, FORWARD_TIM_CC);
 80011a6:	2110      	movs	r1, #16
 80011a8:	4810      	ldr	r0, [pc, #64]	; (80011ec <forwardSensorCaptureHandler+0x58>)
 80011aa:	f7ff fb1f 	bl	80007ec <TIM_ClearITPendingBit>

		if(ForwardSensorCaptureStruc.captureStep == 0)
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <forwardSensorCaptureHandler+0x5c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d109      	bne.n	80011ca <forwardSensorCaptureHandler+0x36>
		{
			//zachyt cas nabeznej hrany
			ForwardSensorCaptureStruc.risingTimeCapturing = FORWARD_TIM_GETCAPTURE;
 80011b6:	480d      	ldr	r0, [pc, #52]	; (80011ec <forwardSensorCaptureHandler+0x58>)
 80011b8:	f7ff fae2 	bl	8000780 <TIM_GetCapture4>
 80011bc:	4602      	mov	r2, r0
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <forwardSensorCaptureHandler+0x5c>)
 80011c0:	605a      	str	r2, [r3, #4]
			ForwardSensorCaptureStruc.captureStep = 1;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <forwardSensorCaptureHandler+0x5c>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	601a      	str	r2, [r3, #0]
			//zachyt cas dobeznej hrany
			ForwardSensorCaptureStruc.fallingTime = FORWARD_TIM_GETCAPTURE;
			ForwardSensorCaptureStruc.risingTime = ForwardSensorCaptureStruc.risingTimeCapturing;
		}
	}
}
 80011c8:	e00d      	b.n	80011e6 <forwardSensorCaptureHandler+0x52>
		{
			//zachyt cas nabeznej hrany
			ForwardSensorCaptureStruc.risingTimeCapturing = FORWARD_TIM_GETCAPTURE;
			ForwardSensorCaptureStruc.captureStep = 1;
		}
		else if(ForwardSensorCaptureStruc.captureStep == 1)
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <forwardSensorCaptureHandler+0x5c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d109      	bne.n	80011e6 <forwardSensorCaptureHandler+0x52>
		{
			//zachyt cas dobeznej hrany
			ForwardSensorCaptureStruc.fallingTime = FORWARD_TIM_GETCAPTURE;
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <forwardSensorCaptureHandler+0x58>)
 80011d4:	f7ff fad4 	bl	8000780 <TIM_GetCapture4>
 80011d8:	4602      	mov	r2, r0
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <forwardSensorCaptureHandler+0x5c>)
 80011dc:	60da      	str	r2, [r3, #12]
			ForwardSensorCaptureStruc.risingTime = ForwardSensorCaptureStruc.risingTimeCapturing;
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <forwardSensorCaptureHandler+0x5c>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <forwardSensorCaptureHandler+0x5c>)
 80011e4:	6093      	str	r3, [r2, #8]
		}
	}
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40000400 	.word	0x40000400
 80011f0:	200000c0 	.word	0x200000c0

080011f4 <USART3_IRQHandler>:

	return 0;
}

void PRN_USART_IRQHANDLER(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(PRN_USART, USART_IT_RXNE) != RESET)
 80011f8:	f240 5125 	movw	r1, #1317	; 0x525
 80011fc:	481d      	ldr	r0, [pc, #116]	; (8001274 <USART3_IRQHandler+0x80>)
 80011fe:	f7ff fc6f 	bl	8000ae0 <USART_GetITStatus>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00b      	beq.n	8001220 <USART3_IRQHandler+0x2c>
	{
		USART_ClearITPendingBit(PRN_USART, USART_IT_RXNE);
 8001208:	f240 5125 	movw	r1, #1317	; 0x525
 800120c:	4819      	ldr	r0, [pc, #100]	; (8001274 <USART3_IRQHandler+0x80>)
 800120e:	f7ff fcc1 	bl	8000b94 <USART_ClearITPendingBit>
		receivedChar = USART_ReceiveData(PRN_USART);
 8001212:	4818      	ldr	r0, [pc, #96]	; (8001274 <USART3_IRQHandler+0x80>)
 8001214:	f7ff fbe0 	bl	80009d8 <USART_ReceiveData>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	4b16      	ldr	r3, [pc, #88]	; (8001278 <USART3_IRQHandler+0x84>)
 800121e:	801a      	strh	r2, [r3, #0]
	}
	if(USART_GetFlagStatus(PRN_USART, USART_FLAG_TC) != RESET)
 8001220:	2140      	movs	r1, #64	; 0x40
 8001222:	4814      	ldr	r0, [pc, #80]	; (8001274 <USART3_IRQHandler+0x80>)
 8001224:	f7ff fc30 	bl	8000a88 <USART_GetFlagStatus>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d020      	beq.n	8001270 <USART3_IRQHandler+0x7c>
	{
		USART_ClearFlag(PRN_USART, USART_FLAG_TC);
 800122e:	2140      	movs	r1, #64	; 0x40
 8001230:	4810      	ldr	r0, [pc, #64]	; (8001274 <USART3_IRQHandler+0x80>)
 8001232:	f7ff fc45 	bl	8000ac0 <USART_ClearFlag>
		USARTbufferInkr++;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <USART3_IRQHandler+0x88>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	4a0f      	ldr	r2, [pc, #60]	; (800127c <USART3_IRQHandler+0x88>)
 800123e:	6013      	str	r3, [r2, #0]
		if( USARTbufferOut[USARTbufferInkr] != '\0')
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <USART3_IRQHandler+0x88>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <USART3_IRQHandler+0x8c>)
 8001246:	5cd3      	ldrb	r3, [r2, r3]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00a      	beq.n	8001264 <USART3_IRQHandler+0x70>
		{
			USART_SendData(PRN_USART, USARTbufferOut[USARTbufferInkr]);
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <USART3_IRQHandler+0x88>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <USART3_IRQHandler+0x8c>)
 8001254:	5cd3      	ldrb	r3, [r2, r3]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	b29b      	uxth	r3, r3
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <USART3_IRQHandler+0x80>)
 800125e:	f7ff fba9 	bl	80009b4 <USART_SendData>
		{
			USARTbufferInkr = 0;
			USARTbufferRDY = 1;
		}
	}
}
 8001262:	e005      	b.n	8001270 <USART3_IRQHandler+0x7c>
		{
			USART_SendData(PRN_USART, USARTbufferOut[USARTbufferInkr]);
		}
		else
		{
			USARTbufferInkr = 0;
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <USART3_IRQHandler+0x88>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
			USARTbufferRDY = 1;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <USART3_IRQHandler+0x90>)
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40004800 	.word	0x40004800
 8001278:	200000d0 	.word	0x200000d0
 800127c:	2000009c 	.word	0x2000009c
 8001280:	200000d8 	.word	0x200000d8
 8001284:	20000098 	.word	0x20000098

08001288 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800128c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800128e:	e003      	b.n	8001298 <LoopCopyDataInit>

08001290 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8001292:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001294:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001296:	3104      	adds	r1, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001298:	480b      	ldr	r0, [pc, #44]	; (80012c8 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 800129c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800129e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012a0:	d3f6      	bcc.n	8001290 <CopyDataInit>
  ldr r2, =_sbss
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 80012a4:	e002      	b.n	80012ac <LoopFillZerobss>

080012a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012a8:	f842 3b04 	str.w	r3, [r2], #4

080012ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <LoopFillZerobss+0x28>)
  cmp r2, r3
 80012ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012b0:	d3f9      	bcc.n	80012a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012b2:	f000 f841 	bl	8001338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012b6:	f000 f903 	bl	80014c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ba:	f7ff fdb3 	bl	8000e24 <main>
  bx lr
 80012be:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012c0:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80012c4:	0800152c 	.word	0x0800152c
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012cc:	2000002c 	.word	0x2000002c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80012d0:	20000030 	.word	0x20000030
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 80012d4:	2000013c 	.word	0x2000013c

080012d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC1_IRQHandler>
	...

080012dc <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80012ec:	e7fe      	b.n	80012ec <HardFault_Handler+0x4>
 80012ee:	bf00      	nop

080012f0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80012f4:	e7fe      	b.n	80012f4 <MemManage_Handler+0x4>
 80012f6:	bf00      	nop

080012f8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80012fc:	e7fe      	b.n	80012fc <BusFault_Handler+0x4>
 80012fe:	bf00      	nop

08001300 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001304:	e7fe      	b.n	8001304 <UsageFault_Handler+0x4>
 8001306:	bf00      	nop

08001308 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800133c:	4a15      	ldr	r2, [pc, #84]	; (8001394 <SystemInit+0x5c>)
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <SystemInit+0x5c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001346:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001348:	4912      	ldr	r1, [pc, #72]	; (8001394 <SystemInit+0x5c>)
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <SystemInit+0x5c>)
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <SystemInit+0x60>)
 8001350:	4013      	ands	r3, r2
 8001352:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001354:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <SystemInit+0x5c>)
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <SystemInit+0x5c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800135e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001362:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001364:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <SystemInit+0x5c>)
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <SystemInit+0x5c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001370:	4a08      	ldr	r2, [pc, #32]	; (8001394 <SystemInit+0x5c>)
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <SystemInit+0x5c>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800137a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <SystemInit+0x5c>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8001382:	f000 f80d 	bl	80013a0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <SystemInit+0x64>)
 8001388:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800138c:	609a      	str	r2, [r3, #8]
#endif
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	88ffc00c 	.word	0x88ffc00c
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	2300      	movs	r3, #0
 80013ac:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80013ae:	4a41      	ldr	r2, [pc, #260]	; (80014b4 <SetSysClock+0x114>)
 80013b0:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <SetSysClock+0x114>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80013ba:	4b3e      	ldr	r3, [pc, #248]	; (80014b4 <SetSysClock+0x114>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3301      	adds	r3, #1
 80013c8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d103      	bne.n	80013d8 <SetSysClock+0x38>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80013d6:	d1f0      	bne.n	80013ba <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80013d8:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <SetSysClock+0x114>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d002      	beq.n	80013ea <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80013e4:	2301      	movs	r3, #1
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	e001      	b.n	80013ee <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80013ea:	2300      	movs	r3, #0
 80013ec:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d15a      	bne.n	80014aa <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 80013f4:	4a30      	ldr	r2, [pc, #192]	; (80014b8 <SetSysClock+0x118>)
 80013f6:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <SetSysClock+0x118>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f043 0304 	orr.w	r3, r3, #4
 80013fe:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8001400:	4a2d      	ldr	r2, [pc, #180]	; (80014b8 <SetSysClock+0x118>)
 8001402:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <SetSysClock+0x118>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f043 0302 	orr.w	r3, r3, #2
 800140a:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 800140c:	4a2a      	ldr	r2, [pc, #168]	; (80014b8 <SetSysClock+0x118>)
 800140e:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <SetSysClock+0x118>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001418:	4a26      	ldr	r2, [pc, #152]	; (80014b4 <SetSysClock+0x114>)
 800141a:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <SetSysClock+0x114>)
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001422:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8001424:	4b25      	ldr	r3, [pc, #148]	; (80014bc <SetSysClock+0x11c>)
 8001426:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800142a:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 800142c:	bf00      	nop
 800142e:	4b23      	ldr	r3, [pc, #140]	; (80014bc <SetSysClock+0x11c>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f9      	bne.n	800142e <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800143a:	4a1e      	ldr	r2, [pc, #120]	; (80014b4 <SetSysClock+0x114>)
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <SetSysClock+0x114>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001442:	4a1c      	ldr	r2, [pc, #112]	; (80014b4 <SetSysClock+0x114>)
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <SetSysClock+0x114>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 800144a:	4a1a      	ldr	r2, [pc, #104]	; (80014b4 <SetSysClock+0x114>)
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <SetSysClock+0x114>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8001452:	4a18      	ldr	r2, [pc, #96]	; (80014b4 <SetSysClock+0x114>)
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <SetSysClock+0x114>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800145c:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 800145e:	4a15      	ldr	r2, [pc, #84]	; (80014b4 <SetSysClock+0x114>)
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <SetSysClock+0x114>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8001468:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <SetSysClock+0x114>)
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <SetSysClock+0x114>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001474:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001476:	bf00      	nop
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <SetSysClock+0x114>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f9      	beq.n	8001478 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001484:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <SetSysClock+0x114>)
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <SetSysClock+0x114>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f023 0303 	bic.w	r3, r3, #3
 800148e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001490:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <SetSysClock+0x114>)
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <SetSysClock+0x114>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f043 0303 	orr.w	r3, r3, #3
 800149a:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 800149c:	bf00      	nop
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <SetSysClock+0x114>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b0c      	cmp	r3, #12
 80014a8:	d1f9      	bne.n	800149e <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40023c00 	.word	0x40023c00
 80014bc:	40007000 	.word	0x40007000

080014c0 <__libc_init_array>:
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <__libc_init_array+0x3c>)
 80014c2:	b570      	push	{r4, r5, r6, lr}
 80014c4:	461e      	mov	r6, r3
 80014c6:	4c0e      	ldr	r4, [pc, #56]	; (8001500 <__libc_init_array+0x40>)
 80014c8:	2500      	movs	r5, #0
 80014ca:	1ae4      	subs	r4, r4, r3
 80014cc:	10a4      	asrs	r4, r4, #2
 80014ce:	42a5      	cmp	r5, r4
 80014d0:	d004      	beq.n	80014dc <__libc_init_array+0x1c>
 80014d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014d6:	4798      	blx	r3
 80014d8:	3501      	adds	r5, #1
 80014da:	e7f8      	b.n	80014ce <__libc_init_array+0xe>
 80014dc:	f000 f816 	bl	800150c <_init>
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <__libc_init_array+0x44>)
 80014e2:	4c09      	ldr	r4, [pc, #36]	; (8001508 <__libc_init_array+0x48>)
 80014e4:	461e      	mov	r6, r3
 80014e6:	1ae4      	subs	r4, r4, r3
 80014e8:	10a4      	asrs	r4, r4, #2
 80014ea:	2500      	movs	r5, #0
 80014ec:	42a5      	cmp	r5, r4
 80014ee:	d004      	beq.n	80014fa <__libc_init_array+0x3a>
 80014f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014f4:	4798      	blx	r3
 80014f6:	3501      	adds	r5, #1
 80014f8:	e7f8      	b.n	80014ec <__libc_init_array+0x2c>
 80014fa:	bd70      	pop	{r4, r5, r6, pc}
 80014fc:	08001524 	.word	0x08001524
 8001500:	08001524 	.word	0x08001524
 8001504:	08001524 	.word	0x08001524
 8001508:	08001528 	.word	0x08001528

0800150c <_init>:
 800150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800150e:	bf00      	nop
 8001510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001512:	bc08      	pop	{r3}
 8001514:	469e      	mov	lr, r3
 8001516:	4770      	bx	lr

08001518 <_fini>:
 8001518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800151a:	bf00      	nop
 800151c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800151e:	bc08      	pop	{r3}
 8001520:	469e      	mov	lr, r3
 8001522:	4770      	bx	lr
